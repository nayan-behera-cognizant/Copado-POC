<apex:page showHeader="true" standardController="zqu__GuidedSellingStep__c" extensions="zqu.CreateGuidedSellingStepController" tabStyle="Z_Quote_Config__tab" title="{!$Label.zqu__ADD_EDIT_STEP}" sidebar="false" >
  
  <!-- Include config css -->
  <apex:stylesheet value="{!URLFOR($Resource.zqu__ImagesAndJavascriptZip, '/css/ZQConfig-min.css')}" />

  <apex:includeScript value="{!$Resource.zqu__jquery_1_9_1}" />
  <apex:includeScript value="{!$Resource.zqu__JQuery_JSON}" />

  <style>
    /* For addition info subsections */
    .additionalInfo {
      border: 1px solid gray;
      margin-left: 10%;
      margin-right: 5%;
      width: 50%;
    }

    /* Suppress highlighting of config table */
    #pageBlockContainer table tbody tr.highlight td {
      background-color: #FFFFFF;
    }

    /* Style the list filter item columns  */
    th.listFilterLogicalOperatorColumn {
      width:5%;
    }

    th.listFilterNameColumn {
      width: 30%;
    }

    th.listFilterOperatorColumn {
      width:30%;
    }

    th.listFilterValueColumn {
      width:35%;
    }

    /* Style the user product filter columns */
    th.productFilterLogicalOperatorColumn {
      width:5%;
    }

    th.productFilterOrderColumn {
      width:5%;
    }

    th.productFilterHeaderTextColumn {
      width:20%;
    }

    th.productFilterObjectColumn {
      width:20%;
    }

    th.productFilterFieldColumn {
      width:20%;
    }

    th.productFilterActionColumn {
      width:20%;
    }

    /* For tables listing related user product filters */
    .relatedTable {
      margin-left: 12%;
      table-layout: fixed;
      width: 65%;
    }

    #manageFiltersLink {
      margin-left: 18.5%;
      width: 55%;
    }

    /* Product filter column style classes */
    #pageBlockContainer .firstColumn {
      border-bottom-width: 0px;
      border-left-width: 0px;
      border-right-width: 0px;
      border-top-width: 1px;
      vertical-align: middle;
      width: 5%;
    }

    #pageBlockContainer .orderColumn {
      border-bottom-width: 0px;
      border-left-width: 0px;
      border-right-width: 0px;
      border-top-width: 1px;
      text-align: center;
      vertical-align: middle;
      width: 5%;
    }

    #pageBlockContainer .objectColumn {
      border-bottom-width: 0px;
      border-left-width: 0px;
      border-right-width: 0px;
      border-top-width: 1px;
      width: 15%;
    }

    #pageBlockContainer .fieldColumn {
      border-bottom-width: 0px;
      border-left-width: 0px;
      border-right-width: 0px;
      border-top-width: 1px;
      width: 15%;
    }

    #pageBlockContainer .actionColumn {
      border-bottom-width: 0px;
      border-left-width: 0px;
      border-right-width: 0px;
      border-top-width: 1px;
      width: 25%;
    }

    p.andLabel {
      color: #d3d3d3;
      margin: 0px;
      text-align: center;
      vertical-align: middle;
    }

    /* Arrow css */
    .arrowUpDisabled {
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
      border-bottom: 4px solid #d3d3d3;
      height: 0;
      margin: auto;
      margin-bottom: 3px;
      width: 0;
    }
    .arrowUpActive {
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
      border-bottom: 4px solid black;
      cursor: pointer;
      height: 0;
      margin: auto;
      margin-bottom: 3px;
      width: 0;
    }
    .arrowDownDisabled {
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
      border-top: 4px solid #d3d3d3;
      height: 0;
      margin: auto;
      margin-top: 3px;
      width: 0;
    }
    .arrowDownActive {
      cursor: pointer;
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
      border-top: 4px solid black;
      height: 0;
      margin: auto;
      margin-top: 3px;
      width: 0;
    }

    #pageBlockContainer #relatedTable table {
      width: 60%;
    }

    table.listFilterTable {
      table-layout: fixed;
    }
  </style>

  <script>
    // Init jQuery
    var $jq = jQuery.noConflict();

    // Keep a list of user product filters deleted
    var deletedUserProductFilterIds = [];

    // Call after page initialization
    $jq(function() {
      initRowNumbers();
      initEvents();
      initCss();

      // Decode the step title for display to the user
      var stepTitleInput = $jq('input[data-id="stepTitleInput"]');
      var htmlDecodedTitle = htmlDecode(stepTitleInput.val());
      stepTitleInput.val(htmlDecodedTitle);
    });

    // Initially annotate each TR in the filters table with its row number (ex: data-row=2)
    function initRowNumbers() {
      $jq('tbody[data-id="userProductFilterTable"] tr').each(
        function(index) {
          $jq(this).attr('data-row', index + 1);
        }
      )
    }

    function initEvents() {
      // If user changes the filterProductCatalog option, toggle 'Create New Filter' link
      $jq('input[data-id="filterProductSelectRadio"]').click(
        function() {
          toggleFilterProductSubsection();
        }
      );

      // Show category navigation sub panel when user clicks that checkbox
      $jq('input[data-id="categoryNavigationCheckbox"]').click(
        function() {
          $jq('span[data-id="categoryNavigationSubsection"]').parent('td').toggle();
        }
      );

      // Show product context sub panel when user clicks that checkbox
      $jq('input[data-id="productContextCheckbox"]').click(
        function() {
          $jq('span[data-id="productContextSubsection"]').parent('td').toggle();
        }
      );

      // Show related userProductFilters when user clicks that checkbox
      $jq('input[data-id="productFilterCheckbox"]').click( 
        function() {
          toggleProductFilterSubsection();
        }
      );

      // Update the select options for field name when the user changes the object type of a filter
      $jq(document).on('change', 'select[data-id="objectNameSelectOptions"]', function(event) {
          updateFieldSelectOptions(event.currentTarget);
          event.preventDefault();
        }
      );

      // Reorder the filter rows when a user clicks one of the reorder triangles
      $jq(document).on('click', 'div.arrowUpActive', function(event) {
        swapUp(event.target);
      });

      $jq(document).on('click', 'div.arrowDownActive', function(event) {
        swapDown(event.target);
      });
    }

    // Toggles the visibility of the Filter Product Subsection
    function toggleFilterProductSubsection() {
      // Get the TD containing the Create New Filters button
      var subsectionContainer = $jq('span[data-id="filterProductSubsection"]').parent('td');

      // The width of the border between the radio button section and related filters subsection (the border will be hidden if the subsection is visible)
      var borderBottomWidth = '1px';

      // If the first option (entire product catalog) is checked, hide the filter subsection
      if($jq('input[data-id="filterProductSelectRadio"]').first().is(':checked')) {
        subsectionContainer.hide();
      }
      else {
        subsectionContainer.show();
        borderBottomWidth = '0px';
      }

      // If the filter subsection is shows, hide the bottom line of the section above it
      var parentTd = $jq('table[data-id="filterProductSelectRadio"]').parent('td');
      parentTd.css('border-bottom-width', borderBottomWidth);
      parentTd.prev('th').css('border-bottom-width', borderBottomWidth);
    }

    function toggleProductFilterSubsection() {
      // Get the TD containing the subsection
      var subsectionContainer = $jq('span[data-id="productFilterSubsection"]').parent('td');

      // Toggle the visibility of the container
      subsectionContainer.toggle();

      // If the subsection is now visible, the bottom border of the supersection should be hidden
      var borderBottomWidth = subsectionContainer.is(':visible') ? '0px' : '1px';

      // Set the width of the bottom border on the table elements
      var parentTd = $jq('input[data-id="productFilterCheckbox"]').parent('td');
      parentTd.css('border-bottom-width', borderBottomWidth);
      parentTd.prev('th').css('border-bottom-width', borderBottomWidth);
    }

    // Initializes styling of related tables and sections
    function initCss() {
      // Set of inputs that require additional info from the user
      var additionalInfoInputs = {
        'productFilter' : $jq('table[data-id="filterProductSelectRadio"]'),
        'categoryNavigation' : $jq('input[data-id="categoryNavigationCheckbox"]'),
        'productContext' : $jq('input[data-id="productContextCheckbox"]')
      }

      // For each input, remove the border below it
      for(inputName in additionalInfoInputs) {
        // Retrieve the input
        var theInput = additionalInfoInputs[inputName];

        // Retrieve the inputs containing dom elements
        var parentTd = theInput.parent('td');
        var parentTh = parentTd.prev('th');

        // Remove the bottom border from those dom elements
        parentTd.css('border-bottom-width', '0px');
        parentTh.css('border-bottom-width', '0px');
      }

      // If filter product catalog is not checked, hide its subsection
      if({!NOT(GuidedSellingStep__c.FilterProductCatalog__c)}) {
      	toggleFilterProductSubsection();
      }

      // If includeCategoryNavigation flag is not set, hide its subsection
      if({!NOT(GuidedSellingStep__c.IncludeCategoryNavigation__c)}) {
        $jq('span[data-id="categoryNavigationSubsection"]').parent('td').css('display', 'none');
      }

      // If includeContextFilters flag is not set, hide its subsection
      if({!NOT(GuidedSellingStep__c.IncludeContextFilters__c)}) {
        $jq('span[data-id="productContextSubsection"]').parent('td').css('display', 'none');
      }

      // If includeProductFilters flag is not set, hide its subsection
      if({!NOT(GuidedSellingStep__c.IncludeUserFilters__c)}) {
        toggleProductFilterSubsection();
      }
      else {
      	// Get the TD containing the Create New Filters button
        var buttonContainer = $jq('span[data-id="filterProductSubsection"]').parent('td');

      	// If the subsection is now visible, the bottom border of the supersection should be hidden
	      var borderBottomWidth = buttonContainer.is(':visible') ? '0px' : '1px';

  	    // Set the width of the bottom border on the table elements
  	    var parentTd = $jq('input[data-id="productFilterCheckbox"]').parent('td');
  	    parentTd.css('border-bottom-width', borderBottomWidth);
  	    parentTd.prev('th').css('border-bottom-width', borderBottomWidth);
      }

      // Show link to list filter config
      var parentTable = $jq('table[data-id="filterProductSelectRadio"]')

      parentTable.children('input[type="radio"]').click(
        function() {
          $jq('#manageFiltersLink').toggle();
        }
      );

      // If there is only one user product filter, hide its remove button from view
      var removeButtons = $jq('button.removeFilterButton');
      if(removeButtons.length == 1) {
        removeButtons.css('display', 'none');
      }
    }

    // Called when the user adds a filter
    function addUserFilter(event) {
      // For cross browser compatibility
      var e = event || window.event;
      var srcElement = e.target || e.srcElement;

      // Get the filter table body
      var userProductFilterTbody = $jq('tbody[data-id="userProductFilterTable"]');

      // Determine the row number (stored as data in the parentTd)
      var rowNumber = parseInt($jq(srcElement).closest('tr').attr('data-row'));

      // Append a new row to the filter table
      userProductFilterTbody.append(getNewFilterRow(rowNumber + 1));

      // Activate the DOWN arrow on the previous row
      $jq('tr[data-row="' + rowNumber + '"] div.arrowDownDisabled').removeClass('arrowDownDisabled').addClass('arrowDownActive');

      // Remove the ADD button from the old final row
      $jq('button.addFilterButton').filter(':visible').first().remove();

      // Make sure all remove buttons are visible
      $jq('button.removeFilterButton').css('display', 'inline');

      event.preventDefault();
    }

    // Called when the user removes a filter
    function removeUserFilter(event) {
      // For cross browser compatibility
      var e = event || window.event;
      var srcElement = e.target || e.srcElement;

      // Get the parent td of the button that triggered the event
      var parentTd = $jq(srcElement).parent('td');

      // Determine the row number (stored as data in the parentTd)
      var rowNumber = parseInt(parentTd.parent('tr').attr('data-row'));

      // Determine the total number of rows (the logic is different if the user removes the final row)
      var rowCount = $jq('tbody[data-id="userProductFilterTable"] tr').length;

      // If the last row in the table was deleted, skip the resequencing logic and append the ADD button to the new last row
      if(rowNumber == rowCount) {
        // Create new button dom
        var addButton = $jq('<button class="addFilterButton" onclick="addUserFilter(event);" > + {!$Label.BUTTON_ADD}</button>');

        // Append the button to the last cell of the previous row
        parentTd.parent('tr').prev('tr').children('td').last().append(addButton);

        // Since the last row was removed, disable the DOWN arrow of the previous row
        $jq('tr[data-row="' + (rowNumber - 1) + '"] div.arrowDownActive').removeClass('arrowDownActive').addClass('arrowDownDisabled');
      }
      else {
        // Update the order field on all subsequent rows
        parentTd.parent('tr').nextAll('tr').each(
          function() {
            var currentRow = $jq(this);
            var currentOrder = parseInt(currentRow.attr('data-row'));

            // Update the data-row attribute
            currentRow.attr('data-row', currentOrder - 1);
          }
        );
      }

      // Remove the row from the UI
      parentTd.parent('tr').remove();

      // If there is only one row left (rowCount was 2 before the removal), hide the final remaining "Remove" button from view
      if(rowCount == 2) {
        $jq('button.removeFilterButton').css('display', 'none');
      }

      // If the first row was removed, the AND text must be hidden from view and the UP arrow must be deactivated for the new first row
      if(rowNumber == 1) {
        $jq('p.andLabel').first().css('display', 'none');
        $jq('tr[data-row="1"] div.arrowUpActive').removeClass('arrowUpActive').addClass('arrowUpDisabled');
      }

      // Add the deleted row was already in the database, add its id to the list to be deleted
      var deletedId = parentTd.find('p').html();
      if(deletedId) deletedUserProductFilterIds.push(deletedId);

      event.preventDefault();
    }

    // Returns the html of a new row in the filter table
    function getNewFilterRow(order) {
      // Create the new filter row
      var newFilterRow = $jq('<tr data-row={row}><td class="firstColumn" ><p class="andLabel">{!$Label.ROW_AND}</p></td><td class="orderColumn" ><div class="arrowUpActive" ></div><div class="arrowDownDisabled" ></div></td><td class="objectColumn" ></td><td class="fieldColumn" ></td><td class="actionColumn" ><button class="removeFilterButton" onclick="removeUserFilter(event);return false;" > - {!$Label.BUTTON_REMOVE}</button><button class="addFilterButton" onclick="addUserFilter(event);" > + {!$Label.BUTTON_ADD}</button><p style="display:none;"></p></td></tr>'.replace('{row}', order));

      // Get a clone of the object name select list
      var objectNameSelectOptions = $jq('div > select[data-id="objectNameSelectOptions"]').clone();

      // Append it to the object name column
      newFilterRow.find('td.objectColumn').append(objectNameSelectOptions);

      // Get a clone of the object field select list
      var productFieldSelectOptions = $jq('div > select[data-id="productFieldSelectOptions"]').clone().val('{!defaultFilterFieldName}');

    // Append it to the object name column
      $jq('td.fieldColumn', newFilterRow).append(productFieldSelectOptions);

      return newFilterRow;
    }

    // Updates the select options for FieldName when ObjectName is updated
    function updateFieldSelectOptions(target) {
      // Get the parent td of the button that triggered the event
      var parentTd = $jq(target).parent('td');

      // Determine the cell to be updated
      var tdToUpdate = parentTd.next('td');

      // Determine the new object name
      var newObjectName = (target.value == 'Product') ? 'product' : (target.value == 'Product Rate Plan' ? 'ratePlan' : 'charge');

      // Get the correct field select options by object name
      var newFieldSelectOptions = $jq('#selectListPlaceholder > select[data-id="' + newObjectName + 'FieldSelectOptions"]').clone();

      // Remove the old field select options
      tdToUpdate.children('select').remove();

      // Append a clone of the updated options
      tdToUpdate.append(newFieldSelectOptions);
    }

    // Swap a row with the row above it
    function swapUp(target) {
      // Get the tr of the current row and its child inputs
      var thisRow = $jq(target).closest('tr');
      var thisObjectInput = thisRow.find('td.objectColumn > select');
      var thisFieldInput = thisRow.find('td.fieldColumn > select');
      var thisId = thisRow.find('td.actionColumn > p');

      // Get the tr of the previous row and its child inputs
      var previousRow = thisRow.prev('tr');
      var previousObjectInput = previousRow.find('td.objectColumn > select');
      var previousFieldInput = previousRow.find('td.fieldColumn > select');
      var previousId = previousRow.find('td.actionColumn > p');

      // Detach the inputs of this row and append them to the previous row
      previousRow.children('td.objectColumn').append(thisObjectInput.detach());
      previousRow.children('td.fieldColumn').append(thisFieldInput.detach());
      previousRow.children('td.actionColumn').append(thisId.detach());

      // Detach the inputs of the previous row and append them to this row
      thisRow.children('td.objectColumn').append(previousObjectInput.detach());
      thisRow.children('td.fieldColumn').append(previousFieldInput.detach());
      thisRow.children('td.actionColumn').append(previousId.detach());
    }

    // Swap a row with the row below it
    function swapDown(target) {
      // Get the tr of the current row and its child inputs
      var thisRow = $jq(target).closest('tr');
      var thisObjectInput = thisRow.find('td.objectColumn > select');
      var thisFieldInput = thisRow.find('td.fieldColumn > select');
      var thisId = thisRow.find('td.actionColumn > p');

      // Get the tr of the next row and its child inputs
      var nextRow = thisRow.next('tr');
      var nextObjectInput = nextRow.find('td.objectColumn > select');
      var nextFieldInput = nextRow.find('td.fieldColumn > select');
      var nextId = nextRow.find('td.actionColumn > p');

      // Detach the inputs of the next row and append them to this row
      nextRow.children('td.objectColumn').append(thisObjectInput.detach());
      nextRow.children('td.fieldColumn').append(thisFieldInput.detach());
      nextRow.children('td.actionColumn').append(thisId.detach());

      // Detach the inputs of this row and append them to the next row
      thisRow.children('td.objectColumn').append(nextObjectInput.detach());
      thisRow.children('td.fieldColumn').append(nextFieldInput.detach());
      thisRow.children('td.actionColumn').append(nextId.detach());
    }

    // Takes in a TR of the user product filters sub table and returns a js object of a userProductFilterRow
    function trToFilterObject(tr) {
      // Initialize the filter object
      var filter = { 
        'fieldName' : tr.find('td.fieldColumn > select').val(),
        'objectName' : tr.find('td.objectColumn > select').val(),
        'order' : tr.attr('data-row'),
        'stepid' : '{!$CurrentPage.parameters.id}'
      };

      // To avoid validation errors, only populate the ID if it exists
      if(tr.find('td.actionColumn > p').html()) filter.id = tr.find('td.actionColumn > p').html();

      return filter;
    }

    // Called before save action to pass updated user product filters to controller
    function beforeSave() {
      // display status modal
      displayStatusModal();

      // List of js objects to hold the updated user product filters and be sent to the controller as json
      var updatedUserProductFilters = [];

      // Iterate through the user product filters table, assembling an array of js objects based on the contents to be sent to the controller
      $jq('tbody[data-id="userProductFilterTable"]').children('tr').each(
        function() {
          updatedUserProductFilters.push(trToFilterObject($jq(this)));
        }
      );

      // Serialize the updated filters to JSON
      var updatedUserProductFiltersJson = $jq.toJSON(updatedUserProductFilters);

      // Send the value to the controller before saving
      $jq('input[data-id="userProductFiltersJson"]').val(updatedUserProductFiltersJson);

      // Pass the deleted row Ids to the controller before saving
      var deletedUserProductFilterIdsJson = $jq.toJSON(deletedUserProductFilterIds);
      $jq('input[data-id="userProductFiltersToDeleteJson"]').val(deletedUserProductFilterIdsJson);
    }

    // Called before navigating back to the Guided Product Selector page
    function saveAndViewFlow(flowId) {
      // Pass the updated user product filter json to the controller
      beforeSave();

      // Pass the related flowId to the controller
      $jq('input[data-id="relatedFlowId"]').val(flowId);

      // Call action function to save and view flow
      viewFlow();
    }

    // HtmlDecodes a string value by inserting value into a dummy div and retrieving the text value
    function htmlDecode(value) {
      return $jq('<div/>').html(value).text();
    }
  </script>

  <!-- Page title -->
  <c:PageTitle title="{!$Label.zqu__ADD_EDIT_STEP}" />

  <!-- Notification -->
  <c:Notification id="theNotification" />

  <apex:form id="theForm" >

    <!-- action function linked to server side logic to save changes and view a related flow -->
    <apex:actionFunction name="viewFlow" action="{!viewFlow}" />

    <!-- hidden input to pass user product filters to controller -->
    <apex:inputHidden value="{!userProductFiltersToSaveJson}" html-data-id="userProductFiltersJson" />
    <apex:inputHidden value="{!userProductFiltersToDeleteJson}" html-data-id="userProductFiltersToDeleteJson" />
    <apex:inputHidden value="{!relatedFlowId}" html-data-id="relatedFlowId" />

    <!-- status modal -->
    <c:StatusModal />

    <!-- Placeholder for select lists that will be cloned whenever a user adds a row -->
    <div id="selectListPlaceholder" style="display:none;" >
      <apex:selectList size="1" html-data-id="productFieldSelectOptions" >
        <apex:selectOptions value="{!productFieldSelectOptions}" />
      </apex:selectList>

      <apex:selectList size="1" html-data-id="ratePlanFieldSelectOptions" >
        <apex:selectOptions value="{!ratePlanFieldSelectOptions}" />
      </apex:selectList>

      <apex:selectList size="1" html-data-id="chargeFieldSelectOptions" >
        <apex:selectOptions value="{!chargeFieldSelectOptions}" />
      </apex:selectList>

      <apex:selectList size="1" html-data-id="objectNameSelectOptions" >
        <apex:selectOptions value="{!objectNameSelectOptions}" />
      </apex:selectList>
    </div>

    <div id="pageBlockContainer" >

    <apex:pageBlock id="thePageBlock" >
      <apex:pageBlockButtons >
        <!-- REMOVE UNTIL PREVIEW FUNCTIONALITY IS IMPLEMENTED
        <apex:commandButton value="{!$Label.BUTTON_PREVIEW}" action="{!preview}" rerender="theNotification" />
        -->
        <apex:commandButton value="{!$Label.zqu__BUTTON_SAVE}" action="{!save}" onclick="beforeSave();" oncomplete="closeStatusModal();" rerender="theNotification" />
        <apex:commandButton value="{!$Label.zqu__BUTTON_CANCEL}" action="{!cancel}" rerender="theNotification" />
      </apex:pageBlockButtons>

      <!-- Basic information -->
      <apex:pageBlockSection title="{!$Label.zqu__QUOTE_BASIC_INFORMATION}" columns="1" collapsible="false" >
        <apex:inputField value="{!zqu__GuidedSellingStep__c.Name}" required="true" />
        <apex:inputField value="{!zqu__GuidedSellingStep__c.zqu__StepTitle__c}" html-data-id="stepTitleInput" />
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="{!$Label.zqu__FLOWS}" />
          <apex:repeat value="{!relatedFlowInfos}" var="flowInfo" >
            <apex:commandLink value="{!HTMLENCODE(flowInfo.flowName)}" onclick="saveAndViewFlow('{!flowInfo.flowId}'); return false;" html-data-flowid="{!flowInfo.flowId}" />{!IF(flowInfo.isLast, '', ', ')}
          </apex:repeat>
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>

      <!-- Products Offered -->
      <apex:pageBlockSection title="{!$Label.zqu__GUIDED_SELLING_CONFIG_PRODUCTS_OFFERED}" columns="1" collapsible="false" >
        <apex:selectRadio value="{!zqu__GuidedSellingStep__c.zqu__FilterProductCatalog__c}" layout="pageDirection" html-data-id="filterProductSelectRadio" >
          <apex:selectOption itemValue="false" itemLabel="Entire Product Catalog" />
          <apex:selectOption itemValue="true" itemLabel="Filtered Product Catalog" />
        </apex:selectRadio>
        <apex:outputPanel html-data-id="filterProductSubsection" >
          <div class="relatedTable" >
            <apex:repeat value="{!listFilters}" var="listFilter" >
              <apex:pageBlockTable value="{!listFilter.listFilterItems}" var="listFilterItem" styleClass="relatedTable" >
                <apex:column headerClass="listFilterLogicalOperatorColumn" >
                  <p class="andLabel" >{!listFilterItem.logicalOperator}</p>
                  <apex:facet name="header" >
                  </apex:facet>
                </apex:column>
                <apex:column headerClass="listFilterNameColumn" >
                  {!listFilterItem.fieldName}
                  <apex:facet name="header" >
                    {!$ObjectType.zqu__List_Filter_Item__c.Fields.zqu__Field_Name__c.Label}
                  </apex:facet>
                </apex:column>
                <apex:column headerClass="listFilterOperatorColumn" >
                  {!listFilterItem.operator}
                  <apex:facet name="header" >
                    {!$ObjectType.zqu__List_Filter_Item__c.Fields.zqu__Operator__c.Label}
                  </apex:facet>
                </apex:column>
                <apex:column headerClass="listFilterValueColumn" >
                  {!IF(ISBLANK(listFilterItem.fixedValue), listFilterItem.rightObjectName  + ' > ' + listFilterItem.value, listFilterItem.fixedValue)}
                  <apex:facet name="header" >
                    {!$ObjectType.zqu__List_Filter_Item__c.Fields.zqu__Value__c.Label}
                  </apex:facet>
                </apex:column>
              </apex:pageBlockTable>
              <br/>
            </apex:repeat>
            <apex:commandButton style="margin-left: 12%;" action="{!createNewFilters}" onclick="beforeSave();" oncomplete="closeStatusModal();" value="+ {!$Label.zqu__CREATE_NEW_FILTERS}" rerender="theNotification" />
          </div>
        </apex:outputPanel>
        <apex:inputField value="{!zqu__GuidedSellingStep__c.zqu__IncludeSearchBox__c}" />
        <apex:inputField value="{!zqu__GuidedSellingStep__c.zqu__IncludeUserFilters__c}" html-data-id="productFilterCheckbox" />
        <apex:outputPanel html-data-id="productFilterSubsection" >
          <div class="relatedTable" >
            <apex:pageBlockTable value="{!userProductFilters}" var="filter" html-data-id="userProductFilterTable" style="margin-left: 12%;" >
              <!-- AND -->
              <apex:column styleClass="firstColumn" headerClass="productFilterLogicalOperatorColumn" >
                <p style="{!IF(filter.order = 1, 'display:none;', '')}" class="andLabel" >{!$Label.ROW_AND}</p>
                <apex:facet name="header" >
                </apex:facet>
              </apex:column>
              <!-- ORDER -->
              <apex:column styleClass="orderColumn" headerClass="productFilterOrderColumn" >
                <div class="{!IF(filter.order = 1, 'arrowUpDisabled', 'arrowUpActive')}"></div>
                <div class="{!IF(filter.order = userProductFilters.size, 'arrowDownDisabled', 'arrowDownActive')}"></div>
                <apex:facet name="header" >
                  {!$ObjectType.zqu__UserProductFilter__c.Fields.zqu__Order__c.Label}
                </apex:facet>
              </apex:column>
              <!-- OBJECT NAME -->
              <apex:column styleClass="objectColumn" headerClass="productFilterObjectColumn" >
                <apex:selectList size="1" html-data-id="objectNameSelectOptions" value="{!filter.objectName}" >
                  <apex:selectOptions value="{!objectNameSelectOptions}" />
                </apex:selectList>
                <apex:facet name="header" >
                  {!$ObjectType.zqu__UserProductFilter__c.Fields.zqu__ObjectName__c.Label}
                </apex:facet>
              </apex:column>
              <!-- FIELD NAME -->
              <apex:column styleClass="fieldColumn" headerClass="productFilterFieldColumn" >
                <apex:selectList size="1" value="{!filter.fieldName}">
                  <apex:selectOptions value="{!IF(filter.objectName = 'Product', productFieldSelectOptions, IF(filter.objectName = 'Product Rate Plan', ratePlanFieldSelectOptions, chargeFieldSelectOptions))}" />
                </apex:selectList>
                <apex:facet name="header" >
                  {!$ObjectType.zqu__UserProductFilter__c.Fields.zqu__FieldName__c.Label}
                </apex:facet>
              </apex:column>
              <!-- ACTION -->
              <apex:column html-data-row="{!filter.order}" styleClass="actionColumn" headerClass="productFilterActionColumn" >
                <button class="removeFilterButton" id="removeFilterButton{!filter.order}" onclick="removeUserFilter(event);" > - {!$Label.BUTTON_REMOVE}</button>
                <button class="addFilterButton" onclick="addUserFilter(event);" style="{!IF(filter.order = userProductFilters.size, '', 'display:none;')}" > + {!$Label.BUTTON_ADD}</button>
                <p style="display:none;">{!filter.id}</p>
                <apex:facet name="header" >
                  {!$Label.zqu__CONFIG_LIST_ACTION}
                </apex:facet>
              </apex:column>
            </apex:pageBlockTable>
          </div>
        </apex:outputPanel>
        <apex:inputField value="{!zqu__GuidedSellingStep__c.zqu__IncludeCategoryNavigation__c}" html-data-id="categoryNavigationCheckbox" />
        <apex:outputPanel html-data-id="categoryNavigationSubsection" >
          <div class="additionalInfo" >
            <apex:pageBlockSection columns="1" >
              <apex:pageBlockSectionItem >
                <apex:outputLabel value="{!$ObjectType.zqu__GuidedSellingSection__c.Fields.zqu__NavigationHeaderText__c.Label}" />
                <apex:inputText value="{!navigationSection.navigationHeaderText}" />
              </apex:pageBlockSectionItem>
              <apex:pageBlockSectionItem >
                <apex:outputLabel value="{!$ObjectType.zqu__GuidedSellingSection__c.Fields.zqu__ProductGroupingField__c.Label}" />
                <apex:selectList value="{!navigationSection.productGroupingField}" size="1" >
                  <apex:selectOptions value="{!productGroupingFieldSelectOptions}" />
                </apex:selectList>
              </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
          </div>
        </apex:outputPanel>
      </apex:pageBlockSection>

      <!-- Product Relationships -->
      <apex:pageBlockSection title="{!$Label.zqu__GUIDED_SELLING_CONFIG_PRODUCT_RELATIONSHIPS}" columns="1" collapsible="false" >
        <apex:inputField value="{!zqu__GuidedSellingStep__c.zqu__IncludeContextFilters__c}" html-data-id="productContextCheckbox" />
        <apex:outputPanel html-data-id="productContextSubsection" >
          <div class="additionalInfo" >
            <apex:pageBlockSection columns="1" >
              <apex:selectList value="{!zqu__GuidedSellingStep__c.zqu__ProductContextFieldName__c}" size="1" >
                <apex:selectOptions value="{!contextMappingSelectOptions}" />
              </apex:selectList>
              <apex:selectRadio value="{!zqu__GuidedSellingStep__c.zqu__ProductContext__c}" layout="pageDirection" >
                <apex:selectOptions value="{!productContextSelectOptions}" />
              </apex:selectRadio>
            </apex:pageBlockSection>
          </div>
        </apex:outputPanel>
      </apex:pageBlockSection>

      <!-- List column configuration -->
      <apex:pageBlockSection title="{!$Label.zqu__GUIDED_SELLING_CONFIG_COLUMN_CONFIGURATION}" columns="1" collapsible="false" >
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="{!$ObjectType.zqu__GuidedSellingSection__c.Fields.zqu__RatePlanFieldSet__c.Label}" />
          <apex:selectList value="{!listSection.ratePlanFieldSet}" size="1" >
            <apex:selectOptions value="{!ratePlanFieldSetSelectOptions}" />
          </apex:selectList>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem rendered="{!featureFieldSetSelectOptions != null}">
          <apex:outputLabel value="{!$ObjectType.zqu__GuidedSellingSection__c.Fields.zqu__FeatureFieldSet__c.Label}" />
          <apex:selectList value="{!listSection.featureFieldSet}" size="1" >
            <apex:selectOptions value="{!featureFieldSetSelectOptions}" />
          </apex:selectList>
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
    </apex:pageBlock>

    </div>

  </apex:form>
</apex:page>