"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('base-method-ember-styleguide/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'base-method-ember-styleguide/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default'],
    webfont: {
      path: 'app/webfont-svg/',
      options: {
        files: ['**/*.svg'],
        dest: 'assets/webfonts/',
        fontName: 'iconfont',
        cssFontsPath: 'webfonts/',
        // cssTemplate: webfont.templates.css,
        templateOptions: {
          classPrefix: 'iconfont-',
          baseClass: 'iconfont'
        }
      }
    }
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('base-method-ember-styleguide/components/code-block', ['exports', 'ui-code-highlight/components/code-block'], function (exports, codeBlock) {

	'use strict';

	exports['default'] = codeBlock['default'];

});
define('base-method-ember-styleguide/components/code-reference', ['exports', 'ui-code-highlight/components/code-reference'], function (exports, codeReference) {

	'use strict';

	exports['default'] = codeReference['default'];

});
define('base-method-ember-styleguide/components/context-element', ['exports', 'ember-gestures/components/context-element'], function (exports, context_element) {

	'use strict';



	exports['default'] = context_element['default'];

});
define('base-method-ember-styleguide/components/fast-action', ['exports', 'ember-gestures/components/fast-action'], function (exports, fast_action) {

	'use strict';



	exports['default'] = fast_action['default'];

});
define('base-method-ember-styleguide/components/fast-async', ['exports', 'ember-gestures/components/fast-async'], function (exports, fast_async) {

	'use strict';



	exports['default'] = fast_async['default'];

});
define('base-method-ember-styleguide/components/ui-code-highlight', ['exports', 'ui-code-highlight/components/ui-code-highlight'], function (exports, uiCodeHighlight) {

	'use strict';

	exports['default'] = uiCodeHighlight['default'];

});
define('base-method-ember-styleguide/controllers/array', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('base-method-ember-styleguide/controllers/object', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('base-method-ember-styleguide/ember-gestures/recognizers/pan', ['exports', 'ember-gestures/recognizers/pan'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/pinch', ['exports', 'ember-gestures/recognizers/pinch'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/press', ['exports', 'ember-gestures/recognizers/press'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/rotate', ['exports', 'ember-gestures/recognizers/rotate'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/swipe', ['exports', 'ember-gestures/recognizers/swipe'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/tap', ['exports', 'ember-gestures/recognizers/tap'], function (exports, Gesture) {

	'use strict';

	exports['default'] = Gesture['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/vertical-pan', ['exports', 'ember-gestures/recognizers/vertical-pan'], function (exports, vertical_pan) {

	'use strict';



	exports['default'] = vertical_pan['default'];

});
define('base-method-ember-styleguide/ember-gestures/recognizers/vertical-swipe', ['exports', 'ember-gestures/recognizers/vertical-swipe'], function (exports, vertical_swipe) {

	'use strict';



	exports['default'] = vertical_swipe['default'];

});
define('base-method-ember-styleguide/event_dispatcher', ['exports', 'ember', 'ember-gestures/event_dispatcher', 'base-method-ember-styleguide/config/environment'], function (exports, Ember, EventDispatcher, config) {

  'use strict';

  var gestures = Ember['default'].merge({}, {
    emberUseCapture: false,
    removeTracking: true,
    useFastPaths: false
  });
  gestures = Ember['default'].merge(gestures, config['default'].gestures);

  exports['default'] = EventDispatcher['default'].extend({
    useCapture: gestures.emberUseCapture,
    removeTracking: gestures.removeTracking,
    useFastPaths: gestures.useFastPaths
  });

});
define('base-method-ember-styleguide/helpers/highlight', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  // app/helpers/highlight.js
  exports['default'] = Ember['default'].Helper.helper(function (params) {
    var newValue = params[0];
    var replaceChar = newValue.substr(params[1], params[2].length);

    newValue = newValue.replace(replaceChar, '<span class="highlight">' + replaceChar + '</span>');

    return new Ember['default'].Handlebars.SafeString(newValue);
  });

});
define('base-method-ember-styleguide/initializers/ember-cli-fastclick', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var EmberCliFastclickInitializer = {
    name: 'fastclick',

    initialize: function initialize() {
      Ember['default'].run.schedule('afterRender', function () {
        FastClick.attach(document.body);
      });
    }
  };

  exports['default'] = EmberCliFastclickInitializer;

});
define('base-method-ember-styleguide/initializers/ember-gestures', ['exports', 'ember-gestures/components/link-component'], function (exports, LinkComponent) {

  'use strict';

  // activate touch action css
  exports['default'] = {

    name: 'ember-gestures',

    initialize: function initialize() {}

  };

});
define('base-method-ember-styleguide/initializers/ember-i18n', ['exports', 'base-method-ember-styleguide/instance-initializers/ember-i18n'], function (exports, instanceInitializer) {

  'use strict';

  exports['default'] = {
    name: instanceInitializer['default'].name,

    initialize: function initialize(registry, application) {
      if (application.instanceInitializer) {
        return;
      }

      instanceInitializer['default'].initialize(application);
    }
  };

});
define('base-method-ember-styleguide/initializers/export-application-global', ['exports', 'ember', 'base-method-ember-styleguide/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('base-method-ember-styleguide/initializers/i18n', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    name: 'i18n',

    after: 'ember-i18n',

    initialize: function initialize(_, app) {
      app.inject('application', 'i18n', 'service:i18n');
      app.inject('model', 'i18n', 'service:i18n');
      app.inject('route', 'i18n', 'service:i18n');
      app.inject('controller', 'i18n', 'service:i18n');
      app.inject('component', 'i18n', 'service:i18n');
    }
  };

});
define('base-method-ember-styleguide/initializers/resize', ['exports', 'ember-resize/services/resize', 'base-method-ember-styleguide/config/environment'], function (exports, ResizeService, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];

    var resizeServiceDefaults = config['default'].resizeServiceDefaults;
    var injectionFactories = resizeServiceDefaults.injectionFactories;

    application.register('config:resize-service', resizeServiceDefaults, { instantiate: false });
    application.register('service:resize', ResizeService['default']);
    application.inject('service:resize', 'resizeServiceDefaults', 'config:resize-service');

    injectionFactories.forEach(function (factory) {
      application.inject(factory, 'resizeService', 'service:resize');
    });
  }

  exports['default'] = {
    name: 'resize',
    initialize: initialize
  };

});
define('base-method-ember-styleguide/initializers/storage-service', ['exports'], function (exports) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    application.inject('route', 'storage', 'service:storage');
    application.inject('component', 'storage', 'service:storage');
  }

  exports['default'] = {
    name: 'storage-service',
    initialize: initialize
  };

});
define('base-method-ember-styleguide/instance-initializers/app-version', ['exports', 'base-method-ember-styleguide/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('base-method-ember-styleguide/instance-initializers/ember-gestures', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    name: 'ember-gestures',

    initialize: function initialize(instance) {
      instance.container.lookup('service:-gestures');
    }

  };

});
define('base-method-ember-styleguide/instance-initializers/ember-i18n', ['exports', 'ember', 'ember-i18n/legacy-helper', 'ember-i18n/helper', 'base-method-ember-styleguide/config/environment'], function (exports, Ember, legacyHelper, Helper, ENV) {

  'use strict';

  exports['default'] = {
    name: 'ember-i18n',

    initialize: function initialize(instance) {
      var defaultLocale = (ENV['default'].i18n || {}).defaultLocale;
      if (defaultLocale === undefined) {
        Ember['default'].warn('ember-i18n did not find a default locale; falling back to "en".');
        defaultLocale = 'en';
      }
      instance.container.lookup('service:i18n').set('locale', defaultLocale);

      if (legacyHelper['default'] != null) {
        Ember['default'].HTMLBars._registerHelper('t', legacyHelper['default']);
      }

      if (Helper['default'] != null) {
        instance.registry.register('helper:t', Helper['default']);
      }
    }
  };

});
define('base-method-ember-styleguide/locales/de-de/config', ['exports'], function (exports) {

  'use strict';

  // Ember-I18n inclues configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports['default'] = {
    // rtl: [true|FALSE],
    //
    // pluralForm: function(count) {
    //   if (count === 0) { return 'zero'; }
    //   if (count === 1) { return 'one'; }
    //   if (count === 2) { return 'two'; }
    //   if (count < 5) { return 'few'; }
    //   if (count >= 5) { return 'many'; }
    //   return 'other';
    // }
  };

});
define('base-method-ember-styleguide/locales/de-de/translations', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "global.navigation.view-less": "Weniger anzeigen",
    "global.navigation.view-more": "Mehr anzeigen",
    "global.navigation.home": "Home",
    "global.navigation.account": "Meine Konten",
    "global.navigation.settings": "Einstellungen",
    "global.navigation.help": "Hilfe",
    "global.navigation.search": "Suchen",
    "global.navigation.brand": "DAZN",
    "global.navigation.menu": "Menu",
    "global.navigation.menu.sub.home": "Home",
    "global.navigation.menu.sub.for-you": "Für Sie",
    "global.navigation.menu.sub.schedule": "Zeitplan",
    "global.navigation.menu.sub.editors-picks": "Redakteurfavoriten",
    "global.navigation.menu.sub.most popular-popular": "Most Popular",
    "global.navigation.menu.sub.all-Sport": "All Sport",
    "global.navigation.menu.search.input.text": "Suchen",
    "global.navigation.menu.search.input.label": "Football",
    "global.navigation.menu.search.popular": "Beliebte Suchanfragen",
    "global.navigation.menu.search.recent": "Letzte Suchen",
    "tile.status.live": "Leben 1h 22mins",
    "tile.status.coming-soon": "Morgen um 15:00 Uhr",
    "tile.status.vod": "Gestern um 10:00",
    "tile.status.related-content": "128mins",
    "tile.status.paused": "Angehalten",
    "tile.status.playing": "spielend",
    "american-football": "American Football",
    "baseball": "Baseball",
    "basketball": "Korbball",
    "boxing": "Boxing",
    "darts": "Darts",
    "equestrian": "Zu Pferde",
    "football": "Football",
    "golf": "Golf spielen",
    "horse-racing": "Pferderennen",
    "ice-hockey": "Eishockey",
    "tennis": "Tennis",
    "volleyball": "Volleyball",
    "wrestling": "Wrestling",
    "description-1": "Lorem ipsum dolor sit amet, te tale timeam qualisque vix, postea labore sea an, ea usu nibh option.",
    "description-2": "Oportere volutpat dissentias cu vel. Ut eros prima facilisis sea. Ridens contentiones mei cu, id eos zril petentium.",
    "description-3": "Ad magna noster vis, cum magna graeco eu. At vim fugit verterem, et eos principes moderatius, cum suas labore at. ",
    "description-4": "Ut eam legere dolorum, cu mei vitae ubique tincidunt, sit ad nihil liberavisse. ",
    "description-5": "Per te vide vivendum, magna iriure cu vim. Detraxit consectetuer id duo. Ne vel bonorum democritum",
    "live-now": "Lebe jetzt",
    "for-you": "Für dich",
    "schedule": "Zeitplan",
    "editors-picks": "Redakteurfavoriten",
    "most-popular": "Am beliebtesten",
    "all-sports": "Alle Sport",
    "following-tennis": "Nach Tennis",
    "following-football": "Nach der Fußball",
    "tournaments": "Turniere",
    "coming-up": "Demnächst",
    "catch-up": "Aufholen",
    "teams": "Teams",
    "related-content": "Verwandte Inhalte",
    "players": "Spieler",
    "home": "Home",
    "arsenal": "Arsenal",
    "aston-villa": "Aston Villa",
    "bournemouth": "Bournemouth",
    "chelsea": "Chelsea",
    "crystal-palace": "Crystal Palace",
    "everton": "Everton",
    "leicester-city": "Leicester City",
    "liverpool": "Liverpool",
    "manchester-city": "Manchester City",
    "manchester-united": "Manchester United",
    "newcastle-united": "Newcastle United",
    "norwich-city": "Norwich City",
    "southampton": "Southampton",
    "stoke-city": "Stoke City",
    "sunderland": "Sunderland",
    "swansea-city": "Swansea City",
    "tottenham-hotspur": "Tottenham Hotspur",
    "watford": "Watford",
    "west-bromwich-albion": "West Bromwich Albion",
    "west-ham-united": "West Ham United",
    "champions-league": "Champions League",
    "europa-league": "Europa League",
    "la-ligue": "La Ligue",
    "ligue-1": "Ligue 1",
    "premier-league": "Premier League",
    "serie-a": "Serie A",
    "bundesliga": "Bundesliga",
    "scottish-league-1": "Scottish League 1",
    "novak-djokovic": "Novak Djokovic",
    "roger-federer": "Roger Federer",
    "andy-murray": "Andy Murray",
    "stan-wawrinka": "Stan Wawrinka",
    "tomas-berdych": "Tomas Berdych",
    "kei-nishikori": "Kei Nishikori",
    "rafael-nadal": "Rafael Nadal",
    "david-ferrer": "David Ferrer",
    "milos-raonic": "Milos Raonic",
    "gilles-simon": "Gilles Simon",
    "serena-williams": "Serena Williams",
    "simona-halep": "Simona Halep",
    "maria-sharapova": "Maria Sharapova",
    "petra-kvitova": "Petra Kvitova",
    "lucie-safarova": "Lucie Safarova",
    "flavia-pennetta": "Flavia Pennetta",
    "agnieszka-radwanska": "Agnieszka Radwanska",
    "garbine-muguruza": "Garbine Muguruza",
    "ana-ivanovic": "Ana Ivanovic",
    "carla-suarez-navarro": "Carla Suarez Navarro",
    "australian-open": "Australian Open",
    "french-open": "French Open",
    "wimbledon": "Wimbledon",
    "us-open": "US Open"
  };

});
define('base-method-ember-styleguide/locales/en-gb/config', ['exports'], function (exports) {

  'use strict';

  // Ember-I18n inclues configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports['default'] = {
    // rtl: [true|FALSE],
    //
    // pluralForm: function(count) {
    //   if (count === 0) { return 'zero'; }
    //   if (count === 1) { return 'one'; }
    //   if (count === 2) { return 'two'; }
    //   if (count < 5) { return 'few'; }
    //   if (count >= 5) { return 'many'; }
    //   return 'other';
    // }
  };

});
define('base-method-ember-styleguide/locales/en-gb/translations', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "global.navigation.view-less": "View less",
    "global.navigation.view-more": "View more",
    "global.navigation.home": "Search",
    "global.navigation.account": "My Account",
    "global.navigation.settings": "My Settings",
    "global.navigation.help": "Help",
    "global.navigation.brand": "DAZN",
    "global.navigation.menu": "Menu",
    "global.navigation.menu.sub.home": "Home",
    "global.navigation.menu.sub.for-you": "For you",
    "global.navigation.menu.sub.schedule": "Schedule",
    "global.navigation.menu.sub.editors-picks": "Editor's Picks",
    "global.navigation.menu.sub.most-popular": "Most Popular",
    "global.navigation.menu.sub.all-sports": "All sport",
    "global.navigation.menu.search.input.text": "Search",
    "global.navigation.menu.search.input.label": "Football",
    "global.navigation.menu.search.popular": "Popular searches",
    "global.navigation.menu.search.recent": "Recent searches",
    "tile.status.live": "Live 1h 22mins",
    "tile.status.coming-soon": "Tomorrow at 15:",
    "tile.status.vod": "Yesterday at 10:00",
    "tile.status.related-content": "128mins",
    "tile.status.paused": "Paused",
    "tile.status.playing": "Playing",
    "american-football": "American Football",
    "baseball": "Baseball",
    "basketball": "Basketball",
    "boxing": "Boxing",
    "darts": "Darts",
    "equestrian": "Equestrian",
    "football": "Football",
    "golf": "Golf",
    "horse-racing": "Horse Racing",
    "ice-hockey": "Ice Hockey",
    "tennis": "Tennis",
    "volleyball": "Volleyball",
    "wrestling": "Wrestling",
    "description-1": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi diam nunc.",
    "description-2": "Nunc rhoncus tristique lectus ac gravida.",
    "description-3": "Quisque venenatis sollicitudin est ac vulputate.",
    "description-4": "Cras sit amet tortor at neque semper euismod",
    "description-5": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
    "live-now": "Live now",
    "for-you": "For You",
    "schedule": "Schedule",
    "editors-picks": "Editor's Picks",
    "most-popular": "Most Popular",
    "all-sports": "All Sports",
    "following-tennis": "Following Tennis",
    "following-football": "Following Football",
    "tournaments": "Tournaments",
    "coming-up": "Coming up",
    "catch-up": "Catch up",
    "teams": "Teams",
    "related-content": "Related content",
    "players": "Players",
    "home": "Home",
    "arsenal": "Arsenal",
    "aston-villa": "Aston Villa",
    "bournemouth": "Bournemouth",
    "chelsea": "Chelsea",
    "crystal-palace": "Crystal Palace",
    "everton": "Everton",
    "leicester-city": "Leicester City",
    "liverpool": "Liverpool",
    "manchester-city": "Manchester City",
    "manchester-united": "Manchester United",
    "newcastle-united": "Newcastle United",
    "norwich-city": "Norwich City",
    "southampton": "Southampton",
    "stoke-city": "Stoke City",
    "sunderland": "Sunderland",
    "swansea-city": "Swansea City",
    "tottenham-hotspur": "Tottenham Hotspur",
    "watford": "Watford",
    "west-bromwich-albion": "West Bromwich Albion",
    "west-ham-united": "West Ham United",
    "champions-league": "Champions League",
    "europa-league": "Europa League",
    "la-ligue": "La Ligue",
    "ligue-1": "Ligue 1",
    "premier-league": "Premier League",
    "serie-a": "Serie A",
    "bundesliga": "Bundesliga",
    "scottish-league-1": "Scottish League 1",
    "novak-djokovic": "Novak Djokovic",
    "roger-federer": "Roger Federer",
    "andy-murray": "Andy Murray",
    "stan-wawrinka": "Stan Wawrinka",
    "tomas-berdych": "Tomas Berdych",
    "kei-nishikori": "Kei Nishikori",
    "rafael-nadal": "Rafael Nadal",
    "david-ferrer": "David Ferrer",
    "milos-raonic": "Milos Raonic",
    "gilles-simon": "Gilles Simon",
    "serena-williams": "Serena Williams",
    "simona-halep": "Simona Halep",
    "maria-sharapova": "Maria Sharapova",
    "petra-kvitova": "Petra Kvitova",
    "lucie-safarova": "Lucie Safarova",
    "flavia-pennetta": "Flavia Pennetta",
    "agnieszka-radwanska": "Agnieszka Radwanska",
    "garbine-muguruza": "Garbine Muguruza",
    "ana-ivanovic": "Ana Ivanovic",
    "carla-suarez-navarro": "Carla Suarez Navarro",
    "australian-open": "Australian Open",
    "french-open": "French Open",
    "wimbledon": "Wimbledon",
    "us-open": "US Open"
  };

});
define('base-method-ember-styleguide/locales/ja-jp/config', ['exports'], function (exports) {

  'use strict';

  // Ember-I18n inclues configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports['default'] = {
    // rtl: [true|FALSE],
    //
    // pluralForm: function(count) {
    //   if (count === 0) { return 'zero'; }
    //   if (count === 1) { return 'one'; }
    //   if (count === 2) { return 'two'; }
    //   if (count < 5) { return 'few'; }
    //   if (count >= 5) { return 'many'; }
    //   return 'other';
    // }
  };

});
define('base-method-ember-styleguide/locales/ja-jp/translations', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "global.navigation.view-less": "あまり見ます",
    "global.navigation.view-more": "もっと見る",
    "global.navigation.home": "ホーム",
    "global.navigation.account": "マイアカウント",
    "global.navigation.settings": "設定",
    "global.navigation.help": "助けて",
    "global.navigation.search": "検索",
    "global.navigation.brand": "DAZN",
    "global.navigation.menu": "メニュー",
    "global.navigation.menu.sub.home": "ホーム",
    "global.navigation.menu.sub.for-you": "あなたのために",
    "global.navigation.menu.sub.schedule": "スケジュール",
    "global.navigation.menu.sub.editors-picks": "エディターのお勧め",
    "global.navigation.menu.sub.most-popular": "Mもっとも人気のある",
    "global.navigation.menu.sub.all-sports": "すべてのスポーツ",
    "global.navigation.menu.search.input.text": "検索",
    "global.navigation.menu.search.input.label": "アメリカンフットボール",
    "global.navigation.menu.search.popular": "人気の検索",
    "global.navigation.menu.search.recent": "最近の検索",
    "tile.status.live": "1時間22minsライブ",
    "tile.status.coming-soon": "15:00明日",
    "tile.status.vod": "10:00昨日",
    "tile.status.related-content": "128mins",
    "tile.status.paused": "一時停止",
    "tile.status.playing": "遊びます",
    "american-football": "アメリカン・フットボール",
    "baseball": "ベースボール",
    "basketball": "バスケットボール",
    "boxing": "ボクシング",
    "darts": "ダーツ",
    "equestrian": "馬術",
    "football": "アメリカンフットボール",
    "golf": "ゴルフ",
    "horse-racing": "競馬",
    "ice-hockey": "アイスホッケー",
    "tennis": "テニス",
    "volleyball": "バレーボール",
    "wrestling": "レスリング",
    "description-1": "付ハワ答別ろっざ禁擬細ほぎン像応割ムヘキタ球説が共団でがどひ本6姿つンど展見懸ン際事エヌネ権31北セノツレ子",
    "description-2": "環6紛ス側字ぶうこド詳買ナ稿索マ児国をろ懸浜図マ護安ヲワ放営ロモ月秋ばぴドわ料体論クん。及ルわろ",
    "description-3": "慣れむル写北トキ水殖むわ今浪ーや視市井づおび性事9真やルよる漬容ルヌコホ派祠モテアシ集難う科久圏ドう。",
    "description-4": "及ルわろさ施王つルにと米球ゃので芸去ツヨメ市長ぼぐる漬容ルヌコホ派祠モテアシ集難う科久圏ドう。",
    "description-5": "ヘキタ球説が共団でがどひ本6姿つンど展見懸ン際よる漬容ルヌコホ派祠モテアシ集難う科久圏ドう。",
    "live-now": "今ライブ",
    "for-you": "あなたのために",
    "schedule": "スケジュール",
    "editors-picks": "エディターのお勧め",
    "most-popular": "もっとも人気のある",
    "all-sports": "すべてのスポーツ",
    "following-tennis": "テニスの後",
    "following-football": "続いてサッカー",
    "tournaments": "トーナメント",
    "coming-up": "考え出します",
    "catch-up": "追いつく",
    "teams": "チーム",
    "related-content": "関連コンテンツ",
    "players": "プレーヤー",
    "home": "ホーム",
    "arsenal": "Arsenal",
    "aston-villa": "Aston Villa",
    "bournemouth": "Bournemouth",
    "chelsea": "Chelsea",
    "crystal-palace": "Crystal Palace",
    "everton": "Everton",
    "leicester-city": "Leicester City",
    "liverpool": "Liverpool",
    "manchester-city": "Manchester City",
    "manchester-united": "Manchester United",
    "newcastle-united": "Newcastle United",
    "norwich-city": "Norwich City",
    "southampton": "Southampton",
    "stoke-city": "Stoke City",
    "sunderland": "Sunderland",
    "swansea-city": "Swansea City",
    "tottenham-hotspur": "Tottenham Hotspur",
    "watford": "Watford",
    "west-bromwich-albion": "West Bromwich Albion",
    "west-ham-united": "West Ham United",
    "champions-league": "Champions League",
    "europa-league": "Europa League",
    "la-ligue": "La Ligue",
    "ligue-1": "Ligue 1",
    "premier-league": "Premier League",
    "serie-a": "Serie A",
    "bundesliga": "Bundesliga",
    "scottish-league-1": "Scottish League 1",
    "novak-djokovic": "Novak Djokovic",
    "roger-federer": "Roger Federer",
    "andy-murray": "Andy Murray",
    "stan-wawrinka": "Stan Wawrinka",
    "tomas-berdych": "Tomas Berdych",
    "kei-nishikori": "Kei Nishikori",
    "rafael-nadal": "Rafael Nadal",
    "david-ferrer": "David Ferrer",
    "milos-raonic": "Milos Raonic",
    "gilles-simon": "Gilles Simon",
    "serena-williams": "Serena Williams",
    "simona-halep": "Simona Halep",
    "maria-sharapova": "Maria Sharapova",
    "petra-kvitova": "Petra Kvitova",
    "lucie-safarova": "Lucie Safarova",
    "flavia-pennetta": "Flavia Pennetta",
    "agnieszka-radwanska": "Agnieszka Radwanska",
    "garbine-muguruza": "Garbine Muguruza",
    "ana-ivanovic": "Ana Ivanovic",
    "carla-suarez-navarro": "Carla Suarez Navarro",
    "australian-open": "Australian Open",
    "french-open": "French Open",
    "wimbledon": "Wimbledon",
    "us-open": "US Open"
  };

});
define('base-method-ember-styleguide/mixins/resize-aware', ['exports', 'ember-resize/mixins/resize-aware'], function (exports, resize_aware) {

	'use strict';



	exports['default'] = resize_aware['default'];

});
define('base-method-ember-styleguide/mixins/scroll-event', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    bindScrolling: function bindScrolling() {
      var onScroll,
          self = this;

      var scrollFunc = function scrollFunc(e) {
        return self.scrolled(e);
      };

      onScroll = function (e) {
        Ember['default'].run.debounce(self, scrollFunc, e, 10);
      };

      Ember['default'].$(document).bind('touchmove', onScroll);
      Ember['default'].$(window).bind('scroll', onScroll);
    },

    unbindScrolling: function unbindScrolling() {
      Ember['default'].$(window).unbind('scroll');
      Ember['default'].$(document).unbind('touchmove');
    }

  });

});
define('base-method-ember-styleguide/pods/application/adapter', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].FixtureAdapter.extend({
    defaultSerializer: "-default",

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    },

    queryFixtures: function queryFixtures(fixtures, query) {
      var properties;

      properties = Object.keys(query);

      return fixtures;
    }
  });

});
define('base-method-ember-styleguide/pods/application/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/application/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/account/cancel-subscription/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['selected']
  });

});
define('base-method-ember-styleguide/pods/components/account/cancel-subscription/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/cancel-subscription/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("We recommend having a look at our ,");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("Help page");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(", it has a lot of useful information to fix technical issues, you can even chat online to Customer Service.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("If you have tried already, please ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("get in contact");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" and let us know the problem in more detail, we would love to help!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","link-box-inner");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("Go to Help");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("Contact us");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/cancel-subscription/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("We recommend checking the Membership section of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("My Account");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(", you can change your your payment method there. ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("If you have tried already, please ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("get in contact");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" and let us know the problem in more detail, we would love to help!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","link-box-inner");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("Go to My Account");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("Contact us");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 80
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/cancel-subscription/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Back to My Account");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 82,
            "column": 9
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/account/cancel-subscription/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Cancel Membership");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","header-description");
        var el2 = dom.createTextNode("We are sorry to hear you want to cancel your Membership. If you let us know why below, we may be able to help with any issues: ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","link-box");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","#");
        dom.setAttribute(el2,"class","small-btn main");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("NEXT");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [6]),3,3);
        return morphs;
      },
      statements: [
        ["block","account/check-box-cancel",[],["title","Technical issues","hasContent","hasContent"],0,null,["loc",[null,[5,4],[12,33]]]],
        ["inline","account/check-box-cancel",[],["title","The service doesn't have the sports/games I am interested in"],["loc",[null,[15,4],[15,101]]]],
        ["block","account/check-box-cancel",[],["title","I want to change payment methods","hasContent","hasContent"],1,null,["loc",[null,[18,4],[25,33]]]],
        ["inline","account/check-box-cancel",[],["title","I don't watch enough games to pay for Livesport"],["loc",[null,[28,4],[28,88]]]],
        ["inline","account/check-box-cancel",[],["title","I am moving abroad"],["loc",[null,[31,4],[31,59]]]],
        ["inline","account/check-box-cancel",[],["title","Other reasons"],["loc",[null,[34,4],[34,54]]]],
        ["block","link-to",["styleguide.account.my-account"],["class","small-btn"],2,null,["loc",[null,[39,0],[39,92]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/account/check-box-cancel/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['selected', 'hasContent'],
    actions: {
      actionStatus: function actionStatus(evt) {
        if (evt) {
          this.set('selected', true);
        } else {
          this.set('selected', false);
        }
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/account/check-box-cancel/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/check-box-cancel/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","title",["loc",[null,[2,2],[2,11]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/account/check-box-cancel/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","description");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","form-fields/check-box",[],["actionStatus","actionStatus"],0,null,["loc",[null,[1,0],[3,26]]]],
        ["content","yield",["loc",[null,[5,2],[5,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/account/my-details/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/account/my-details/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/account/my-details/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","bp1-col-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","bp1-col-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","bp1-col-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);
        return morphs;
      },
      statements: [
        ["inline","form-fields/inline-editing",[],["label","NAME","label1","FIRST NAME","label2","LAST NAME","type","text","initialText1","James","initialText2","Patterson","inputType","text","doubleInput",true],["loc",[null,[3,2],[3,176]]]],
        ["inline","form-fields/inline-editing",[],["label","EMAIL","type","text","initialText","jpatterson@hotmail.com","inputType","email","singleInput",true],["loc",[null,[6,2],[6,130]]]],
        ["inline","form-fields/inline-editing",[],["label","PASSWORD","type","passord","initialText","xxxx","inputType","password","password",true],["loc",[null,[9,2],[9,118]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/account/my-devices/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['showMore:show-more', 'showDevices:show-more-signout'],
    devices: [{
      'name': 'iPhone 6',
      'info': 'Registered: 02/10/15'
    }, {
      'name': 'Macbook Pro',
      'info': 'Registered: 02/10/15'
    }, {
      'name': 'TV',
      'info': 'Registered: 02/10/15'
    }],
    devicesExtra: [{
      'name': 'Ipad Air',
      'info': 'Registered: 02/10/15'
    }, {
      'name': 'TV',
      'info': 'Registered: 02/10/15'
    }],
    actions: {
      showAll: function showAll() {
        this.toggleProperty('showMore');
      },
      showAllDevices: function showAllDevices() {
        this.toggleProperty('showDevices');
        var currentScrollPos = window.pageYOffset;
        // Ember.run.later(function(){
        Ember['default'].$("html, body").animate({ scrollTop: currentScrollPos + 300 }, 200);
        // }, 300);
      },
      cancel: function cancel() {
        this.set('showDevices', false);
        var currentScrollPos = window.pageYOffset;
        // Ember.run.later(function(){
        Ember['default'].$("html, body").animate({ scrollTop: currentScrollPos - 300 }, 200);
        // }, 300);
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/account/my-devices/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/my-devices/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","device.name",["loc",[null,[2,6],[2,21]]]],
          ["content","device.info",["loc",[null,[3,6],[3,21]]]]
        ],
        locals: ["device"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/my-devices/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","device.name",["loc",[null,[7,8],[7,23]]]],
          ["content","device.info",["loc",[null,[8,8],[8,23]]]]
        ],
        locals: ["device"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 27
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/account/my-devices/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","show-more-devices");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"href","#");
        dom.setAttribute(el1,"class","showMore");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el2 = dom.createTextNode("Show All Devices");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"href","#");
        dom.setAttribute(el1,"class","showLess");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el2 = dom.createTextNode("Hide Devices");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","signout-all");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createTextNode("Sign out all devices");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("If you sign out of all devices, then you will need to sign in again on each device, including this device.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Are you sure you want to sign out of all devices?");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","btn-box");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","smallBtn");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("Confirm and sign out");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","#");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("Cancel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"class","smallBtn showMoreBtn");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el2 = dom.createTextNode("Sign out all devices");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","overlay");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3]);
        var element1 = dom.childAt(fragment, [5]);
        var element2 = dom.childAt(fragment, [7, 7, 3]);
        var element3 = dom.childAt(fragment, [9]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        morphs[2] = dom.createElementMorph(element0);
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createElementMorph(element2);
        morphs[5] = dom.createElementMorph(element3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","devices",["loc",[null,[1,8],[1,15]]]]],[],0,null,["loc",[null,[1,0],[4,9]]]],
        ["block","each",[["get","devicesExtra",["loc",[null,[6,10],[6,22]]]]],[],1,null,["loc",[null,[6,2],[9,11]]]],
        ["element","action",["showAll"],[],["loc",[null,[11,12],[11,32]]]],
        ["element","action",["showAll"],[],["loc",[null,[12,12],[12,32]]]],
        ["element","action",["cancel"],[],["loc",[null,[20,16],[20,35]]]],
        ["element","action",["showAllDevices"],[],["loc",[null,[23,37],[23,64]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/account/my-subscription/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/account/my-subscription/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/account/my-subscription/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel Subscription");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 84
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/account/my-subscription/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["styleguide.account.cancel-subscription"],[],0,null,["loc",[null,[1,0],[1,84]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/item-video/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['item-video'],
    classNameBindings: ['active:active', 'isSetting:is-setting', 'isSearch:is-search'],

    bgImg: Ember['default'].computed('model', function () {
      if (this.get('model.thumbnail')) {
        return this.get('model.thumbnail');
      }
    }),

    isSetting: Ember['default'].computed('model', function () {
      if (this.get('model.isSetting')) {
        this.sendAction('setSetting', true);
      }
    }),

    isSearch: Ember['default'].computed('model', function () {
      if (this.get('model.isSearch')) {
        this.sendAction('setSearch', true);
      }
    }),

    initFunction: function initFunction() {
      var self = this;
      self.$('.img').css({
        backgroundImage: 'url(images/thumbnails/' + this.get('bgImg') + ')'
      });
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }
  });

});
define('base-method-ember-styleguide/pods/components/content/item-video/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","search-block");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-search");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","img");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","tile-title");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["content","model.title",["loc",[null,[4,2],[4,17]]]],
          ["block","if",[["get","model.isIcon",["loc",[null,[5,8],[5,20]]]]],[],0,1,["loc",[null,[5,2],[11,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","tile-title");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","search-block");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [
          ["content","model.title",["loc",[null,[17,2],[17,17]]]],
          ["attribute","class",["get","model.icon",["loc",[null,[19,17],[19,27]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 4
              },
              "end": {
                "line": 30,
                "column": 4
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","label");
            var el2 = dom.createTextNode("LIVE");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 33,
                "column": 4
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","label coming");
            var el2 = dom.createTextNode("SEP ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["content","model.randDate",["loc",[null,[32,36],[32,54]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 4
              },
              "end": {
                "line": 36,
                "column": 4
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","label coming");
            var el2 = dom.createTextNode("OCT ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["content","model.randDate",["loc",[null,[35,36],[35,54]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","tile-title");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","img");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          morphs[1] = dom.createMorphAt(element0,1,1);
          morphs[2] = dom.createMorphAt(element0,2,2);
          morphs[3] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["content","model.title",["loc",[null,[26,2],[26,17]]]],
          ["block","if",[["get","model.isLive",["loc",[null,[28,10],[28,22]]]]],[],0,null,["loc",[null,[28,4],[30,11]]]],
          ["block","if",[["get","model.isComing",["loc",[null,[31,10],[31,24]]]]],[],1,null,["loc",[null,[31,4],[33,11]]]],
          ["block","if",[["get","model.isComing2",["loc",[null,[34,10],[34,25]]]]],[],2,null,["loc",[null,[34,4],[36,11]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 7
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/item-video/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.isSearch",["loc",[null,[1,6],[1,20]]]]],[],0,null,["loc",[null,[1,0],[12,7]]]],
        ["block","if",[["get","model.isSetting",["loc",[null,[14,6],[14,21]]]]],[],1,null,["loc",[null,[14,0],[21,7]]]],
        ["block","if",[["get","model.videoSrc",["loc",[null,[23,6],[23,20]]]]],[],2,null,["loc",[null,[23,0],[38,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/more-info/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: 'more-info-panel',

    videoData2: Ember['default'].observer('videoModel', function () {
      this.set('thisTitle', this.get('videoModel.title'));
      this.set('thisDescription', this.get('videoModel.description'));
    })
  });

});
define('base-method-ember-styleguide/pods/components/content/more-info/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/more-info/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1,"src","images/panel-04.png");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/rail-category/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: 'category-list',
    actions: {
      isLoaded: function isLoaded(item) {
        if (item === true) {
          this.sendAction('isLoaded', true);
        }
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/content/rail-category/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/content/rail-category/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","content/rail-video",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[3,31],[3,36]]]]],[],[]],"isLoaded","isLoaded"],["loc",[null,[3,4],[3,58]]]]
        ],
        locals: ["model"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/rail-category/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","category-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[2,10],[2,15]]]]],["key","@index"],0,null,["loc",[null,[2,2],[4,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/rail-video/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['rail-video'],
    classNameBindings: ['isSetting:is-setting', 'isSearch:is-search'],

    actions: {
      setSetting: function setSetting(item) {
        if (item === true) {
          this.set('isSetting', true);
        }
      },
      setSearch: function setSearch(item) {
        if (item === true) {
          this.set('isSearch', true);
        }
      }
    },

    initFunction: function initFunction() {

      if (this.get('childViews') !== undefined) {
        var arr = this.get('childViews');
        if (arr.length > 2) {
          this.sendAction('isLoaded', true);
        }
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/content/rail-video/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 14
            },
            "end": {
              "line": 7,
              "column": 14
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/content/rail-video/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","content/item-video",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[6,43],[6,48]]]]],[],[]],"isLoaded","isLoaded"],["loc",[null,[6,16],[6,70]]]]
        ],
        locals: ["model"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 12
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/rail-video/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","rail-title");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","slider");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("          ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1, 1]),1,1);
        return morphs;
      },
      statements: [
        ["content","model.railTitle",["loc",[null,[1,25],[1,44]]]],
        ["block","each",[["get","model",["loc",[null,[5,22],[5,27]]]]],["key","@index"],0,null,["loc",[null,[5,14],[7,23]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/video-control/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: 'video-control-component'
  });

});
define('base-method-ember-styleguide/pods/components/content/video-control/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 5
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/video-control/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","video-controls");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","comment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_Subs.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","30sback");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_rew_30.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","step-back");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_back.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","pause");
        dom.setAttribute(el2,"class","active");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_pause.png");
        dom.setAttribute(el4,"class","pause");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/icon_play.png");
        dom.setAttribute(el4,"class","play");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","step-forward");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_forward.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","live");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_live.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2,"id","info");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/Icon_info.png");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/video-player/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['video-player']
  });

});
define('base-method-ember-styleguide/pods/components/content/video-player/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 8
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/video-player/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","timer hide");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("min behind live");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("video");
        dom.setAttribute(el1,"id","ls-video");
        dom.setAttribute(el1,"autoplay","");
        dom.setAttribute(el1,"height","100%");
        dom.setAttribute(el1,"width","100%");
        dom.setAttribute(el1,"autobuffer","");
        dom.setAttribute(el1,"preload","");
        dom.setAttribute(el1,"loop","");
        dom.setAttribute(el1,"class","video-tag");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("source");
        dom.setAttribute(el2,"type","video/mp4");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  Your browser does not support the video tag.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]),0,0);
        morphs[4] = dom.createAttrMorph(element0, 'src');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","content/more-info",["loc",[null,[1,0],[1,21]]]],
        ["content","content/video-scrub",["loc",[null,[3,0],[3,23]]]],
        ["content","content/video-control",["loc",[null,[5,0],[5,25]]]],
        ["content","elapsedTime",["loc",[null,[8,24],[8,39]]]],
        ["attribute","src",["get","newVideoSrc",["loc",[null,[10,16],[10,27]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/content/video-scrub/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: 'video-scrub',

    initFunction: function initFunction() {

      if (Ember['default'].$('#ls-video')[0] !== undefined) {
        var video = Ember['default'].$('#ls-video')[0];
        video.addEventListener('timeupdate', function () {
          var percent = Math.floor(100 / video.duration * video.currentTime);
          Ember['default'].$('.scrub-progress').css('width', percent + '%');
        }, false);
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/content/video-scrub/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 5
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/content/video-scrub/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","scrub-bar");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","scrub-progress");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dot dot-1");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dot dot-2");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dot dot-3");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dot dot-4");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dot dot-5");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","scrub-actions");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/check-box/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'div',
    classNameBindings: ['checkboxStatus:selected', 'paragraph:paragraph'],
    change: function change() {
      this.toggleProperty('checkboxStatus');
      this.sendAction('actionStatus', this.get('checkboxStatus'));
    },
    inputId: Ember['default'].computed(function () {
      return 'cb-' + Ember['default'].guidFor(this);
    })

  });

});
define('base-method-ember-styleguide/pods/components/form-fields/check-box/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 8
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/check-box/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1,"type","checkbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","checkbox-layer-1");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","checkbox-layer-2");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) { dom.repairClonedNode(element0,[],true); }
        var element1 = dom.childAt(fragment, [6]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'id');
        morphs[1] = dom.createAttrMorph(element0, 'checked');
        morphs[2] = dom.createAttrMorph(element1, 'for');
        morphs[3] = dom.createMorphAt(element1,1,1);
        return morphs;
      },
      statements: [
        ["attribute","id",["concat",[["get","inputId",["loc",[null,[1,13],[1,20]]]]]]],
        ["attribute","checked",["get","checkboxStatus",["loc",[null,[1,50],[1,64]]]]],
        ["attribute","for",["concat",[["get","inputId",["loc",[null,[4,14],[4,21]]]]]]],
        ["content","yield",["loc",[null,[5,2],[5,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // tagName: 'div',
    firstRun: true,
    inputId: Ember['default'].computed(function () {
      return 'rb-' + Ember['default'].guidFor(this);
    }),
    classNameBindings: ['isOpen:active', 'isSelected:selected', 'mouseOver:mouse-over'],

    dropDownTitle: 'DROPDOWN TITLE',
    isOpen: false,
    selectedIndex: 0,
    selectedItem: Ember['default'].computed('options.[]', 'selectedIndex', function () {
      return this.get('options')[this.get('selectedIndex')];
    }),
    dropLabel: Ember['default'].computed.alias('selectedItem.value'),
    actions: {
      selectDropdown: function selectDropdown(option) {
        this.set('selectedIndex', this.get('options').indexOf(option));
        this.set('isSelected', true);
      },
      openDropdown: function openDropdown() {
        var self = this;
        var thisParent = this.get('parentView');
        var thisSibblings = thisParent.get('childViews');
        thisSibblings.forEach(function (item) {
          if (item !== self) {
            item.set('isOpen', false);
          }
        });

        self.toggleProperty('isOpen');
        self.$('.option-list > li:first-child').addClass('selected-item');
        // self.$('input').focus();
      }
    },

    // updateKey: function(keyCode){
    //   console.log(keyCode);

    //   switch (keyCode) {
    //     case 40:
    //       console.log('down');
    //       break;

    //     case 38:
    //       console.log('up');
    //       break;
    //   }
    // }

    options: [{
      'value': 'option 1'
    }, {
      'value': 'option 2'
    }, {
      'value': 'option 3'
    }],

    initFunction: function initFunction() {
      this._super();
      var self = this;
      if (self.get('firstRun')) {
        self.set('firstRun', false);
        var bodyClick = function bodyClick(e) {
          var container = self.$();
          if (!container.is(e.target) && container.has(e.target).length === 0) {
            self.set('isOpen', false);
          }
        };
        self.set('bodyClick', bodyClick);
        Ember['default'].$('html, body').bind('click', self.get('bodyClick'));

        var focusState = function focusState() {
          var thisParent = self.get('parentView');
          var thisSibblings = thisParent.get('childViews');
          thisSibblings.forEach(function (item) {
            if (item !== self) {
              item.set('isOpen', false);
            }
          });
          self.set('isOpen', true);
        };
        self.set('focusState', focusState);
        self.$('input').bind('focus', self.get('focusState'));

        var selectState = function selectState() {
          self.set('isSelected', true);
        };
        self.set('selectState', selectState);
        self.$('select').bind('change', self.get('selectState'));

        // var mouseOver = function(){
        //   self.set('mouseOver', true);
        // };
        // self.set('mouseOver', mouseOver);
        // self.$().bind('mouseover', self.get('mouseOver'));

        // var mouseOut = function(){
        //   self.set('mouseOver', false);
        // };
        // self.set('mouseOut', mouseOut);
        // self.$().bind('mouseout', self.get('mouseOut'));
      }
    },
    // keyDown: function(e) {
    //   this.get('controller').send('updateKey', e.keyCode);
    // },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },
    willDestroyElement: function willDestroyElement() {
      var self = this;
      Ember['default'].$('html, body').unbind('click', self.get('bodyClick'));
      self.$('input').unbind('focus', self.get('focusState'));
      self.$('select').unbind('change', self.get('selectState'));
      // self.$().unbind('mouseover', mouseOver);
      // self.$().unbind('mouseout', mouseOut);
      // self.$('input').unbind('blur', self.get('blurState'));
    }
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          var el2 = dom.createTextNode("Default Dropdown");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1,"class","option");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","option.value",["loc",[null,[9,29],[9,45]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","dropdown-option");
            dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el2 = dom.createElement("div");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
            return morphs;
          },
          statements: [
            ["element","action",["selectDropdown",["get","option",["loc",[null,[24,34],[24,40]]]]],[],["loc",[null,[24,8],[24,42]]]],
            ["content","option.value",["loc",[null,[24,72],[24,88]]]]
          ],
          locals: ["option"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          var el2 = dom.createTextNode("Custom Dropdown");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","custom-dropdown");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","iconfont iconfont-ls_icon_arrow_small");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","label-title");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","label-text");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","dropdown-menu");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","option-list");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [2]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [5]);
          var element4 = dom.childAt(element1, [7]);
          var morphs = new Array(6);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
          morphs[2] = dom.createElementMorph(element3);
          morphs[3] = dom.createMorphAt(element3,0,0);
          morphs[4] = dom.createElementMorph(element4);
          morphs[5] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["openDropdown"],[],["loc",[null,[17,49],[17,74]]]],
          ["content","dropDownTitle",["loc",[null,[18,26],[18,43]]]],
          ["element","action",["openDropdown"],[],["loc",[null,[19,25],[19,50]]]],
          ["content","dropLabel",["loc",[null,[19,51],[19,64]]]],
          ["element","action",["openDropdown"],[],["loc",[null,[21,27],[21,52]]]],
          ["block","each",[["get","options",["loc",[null,[23,10],[23,17]]]]],[],0,null,["loc",[null,[23,2],[25,11]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 7
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/dropdown-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","label-title");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","dropdown-menu2");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("select");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("option");
        dom.setAttribute(el3,"class","option");
        var el4 = dom.createTextNode("Select");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),3,3);
        morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","ShowBoth",["loc",[null,[1,6],[1,14]]]]],[],0,null,["loc",[null,[1,0],[3,7]]]],
        ["content","dropDownTitle",["loc",[null,[4,26],[4,43]]]],
        ["block","each",[["get","options",["loc",[null,[8,12],[8,19]]]]],[],1,null,["loc",[null,[8,4],[10,13]]]],
        ["block","if",[["get","ShowBoth",["loc",[null,[14,6],[14,14]]]]],[],2,null,["loc",[null,[14,0],[30,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/form-button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['leftBtn:left-btn', 'rightBtn:right-btn', 'centerBtn:center-btn', 'disabled:disabled:enabled', 'loading:loading', 'primary:primary'],
    tagName: 'button',

    click: function click() {
      var self = this;

      if (this.get('btnState') !== 'disabled') {
        self.sendAction('clickButton');

        self.toggleProperty('loading');

        var thisParent = this.get('parentView');
        var thisSibbling = thisParent.get('childViews');

        thisSibbling.forEach(function (item) {

          if (item.get('compoName') === 'error') {

            item.set('open', true);
            Ember['default'].$('.payment-information').stop().animate({
              scrollTop: 0
            }, 300, function () {});
          }
        });
      }
    },

    initFunction: function initFunction() {

      if (this.get('position') === 'left') {
        this.set('leftBtn', true);
      }
      if (this.get('position') === 'center') {
        this.set('centerBtn', true);
      }
      if (this.get('position') === 'right') {
        this.set('rightBtn', true);
      }
      if (this.get('btnState') === 'disabled') {
        this.set('disabled', true);
      }
      if (this.get('btnState') === 'loading') {
        this.set('loading', true);
      }
      if (this.get('butVariation') === 'push') {
        this.set('pushType', true);
      }
      if (this.get('btnType') === 'primary') {
        this.set('primary', true);
      }
      if (this.get('btnType') === 'secondary') {
        this.set('secondary', true);
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/form-fields/form-button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/form-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","wrapper");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","loader");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","btn-text");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        return morphs;
      },
      statements: [
        ["content","form-fields/loading-spinner",["loc",[null,[3,2],[3,33]]]],
        ["content","title",["loc",[null,[6,2],[6,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/inline-editing/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: 'editMode:edit-mode:non-edit',
    isInlineEditing: true,
    editMode: false,
    initialText: Ember['default'].computed('doubleInput', function () {
      if (this.get('doubleInput')) {
        var text1 = this.get('initialText1');
        var text2 = this.get('initialText2');

        return text1 + ' ' + text2;
      }
    }),
    editModeObserve: Ember['default'].observer('editMode', function () {
      if (!this.get('editMode')) {
        this.$('input').blur();
      }
    }),
    actions: {

      editMode: function editMode() {

        var self = this,
            firstInput = self.$('input')[0],
            secondInput = self.$('input')[1],
            thisParent = self.get('parentView'),
            thisSibblings = thisParent.get('childViews'),
            firstChild = self.get('childViews')[0],
            firstChildId = firstChild.get('inputId');

        thisSibblings.forEach(function (inline) {
          if (inline.get('isInlineEditing') && self.get('elementId') !== inline.get('elementId')) {
            inline.set('editMode', false);
          }
        });

        Ember['default'].run.later(function () {
          self.set('editMode', true);
          firstChild.set('isPassive', false);
          firstChild.set('isPassiveContent', false);
          firstChild.set('isFocus', true);
          Ember['default'].run.later(function () {
            self.$('#' + firstChildId).focus();
          }, 10);
        }, 100);

        if (self.get('doubleInput')) {
          var secondChild = self.get('childViews')[1];
          firstInput.value = self.get('initialText1');
          secondInput.value = self.get('initialText2');
          secondChild.set('isPassiveContent', true);
        }
        if (self.get('singleInput')) {
          firstInput.value = self.get('initialText');
        }
      },

      cancel: function cancel() {
        var self = this;
        self.set('editMode', false);
      },

      save: function save() {
        var content = this.$('input')[0].value;
        var self = this;
        self.set('editMode', false);
        self.set('initialText', content);
      }
    },

    initFunction: function initFunction() {
      var self = this;
      Ember['default'].$(document).bind('click', function () {
        self.set('editMode', false);
      });
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroyElement: function willDestroyElement() {
      var self = this,
          firstChild = self.get('childViews')[0],
          firstChildId = firstChild.get('inputId');

      self.$('#' + firstChildId).blur();
      Ember['default'].$(document).unbind('click');
    }
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/inline-editing/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/inline-editing/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input-half");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input-half");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText1",["loc",[null,[9,59],[9,71]]]]],[],[]],"label",["subexpr","@mut",[["get","label1",["loc",[null,[9,78],[9,84]]]]],[],[]],"inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[9,95],[9,104]]]]],[],[]],"autofocus","autofocus","tabIndex",1],["loc",[null,[9,28],[9,139]]]],
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText2",["loc",[null,[10,59],[10,71]]]]],[],[]],"label",["subexpr","@mut",[["get","label2",["loc",[null,[10,78],[10,84]]]]],[],[]],"inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[10,95],[10,104]]]]],[],[]],"tabIndex",2],["loc",[null,[10,28],[10,117]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/inline-editing/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText",["loc",[null,[13,54],[13,65]]]]],[],[]],"label",["subexpr","@mut",[["get","label",["loc",[null,[13,72],[13,77]]]]],[],[]],"inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[13,88],[13,97]]]]],[],[]],"autofocus","autofocus","tabIndex",3],["loc",[null,[13,23],[13,132]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/form-fields/inline-editing/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
          return morphs;
        },
        statements: [
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText",["loc",[null,[16,54],[16,65]]]]],[],[]],"placeholder","Old Password","inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[16,103],[16,112]]]]],[],[]],"autofocus","autofocus","tabIndex",4],["loc",[null,[16,23],[16,147]]]],
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText",["loc",[null,[17,54],[17,65]]]]],[],[]],"placeholder","New Password","inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[17,103],[17,112]]]]],[],[]],"tabIndex",5],["loc",[null,[17,23],[17,125]]]],
          ["inline","form-fields/text-input",[],["value",["subexpr","@mut",[["get","initialText",["loc",[null,[18,54],[18,65]]]]],[],[]],"placeholder","Repeat Password","inputType",["subexpr","@mut",[["get","inputType",["loc",[null,[18,106],[18,115]]]]],[],[]],"tabIndex",6],["loc",[null,[18,23],[18,128]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/inline-editing/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","non-edit");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","label");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","edit-button link-unique");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("EDIT");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","text");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","edit");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","btn-box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","cancel link-unique");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("Cancel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [5]);
        var element5 = dom.childAt(element4, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createMorphAt(element2,0,0);
        morphs[4] = dom.createMorphAt(element3,1,1);
        morphs[5] = dom.createMorphAt(element3,2,2);
        morphs[6] = dom.createMorphAt(element3,3,3);
        morphs[7] = dom.createElementMorph(element5);
        morphs[8] = dom.createMorphAt(element4,3,3);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[2,21],[2,30]]]],
        ["element","action",["editMode"],[],["loc",[null,[4,39],[4,60]]]],
        ["element","action",["editMode"],[],["loc",[null,[5,20],[5,41]]]],
        ["content","initialText",["loc",[null,[5,42],[5,57]]]],
        ["block","if",[["get","doubleInput",["loc",[null,[8,8],[8,19]]]]],[],0,null,["loc",[null,[8,2],[11,9]]]],
        ["block","if",[["get","singleInput",["loc",[null,[12,8],[12,19]]]]],[],1,null,["loc",[null,[12,2],[14,9]]]],
        ["block","if",[["get","password",["loc",[null,[15,8],[15,16]]]]],[],2,null,["loc",[null,[15,2],[19,9]]]],
        ["element","action",["cancel"],[],["loc",[null,[21,34],[21,53]]]],
        ["inline","form-fields/form-button",[],["title","Save","position","left","btnType","primary"],["loc",[null,[22,4],[22,78]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/loading-spinner/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['big:big:small']
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/loading-spinner/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/loading-spinner/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","rotate");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/radio-button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var groups = {};

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: 'isSelected:selected',
    change: function change() {
      var currentlySelected = groups[this.get('group')];
      if (currentlySelected) {
        currentlySelected.set('isSelected', false);
      }
      this.set('isSelected', true);
      groups[this.get('group')] = this;
    },
    initialiseSelected: Ember['default'].on('init', function () {
      if (this.get('isSelected')) {
        groups[this.get('group')] = this;
      }
    }),
    isSelected: Ember['default'].computed.oneWay('selected'),
    inputId: Ember['default'].computed(function () {
      return 'rb-' + Ember['default'].guidFor(this);
    })
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/radio-button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 8
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/radio-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1,"type","radio");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","radio-selector-wrapper");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","radio-selector");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) { dom.repairClonedNode(element0,[],true); }
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'id');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element1, 'for');
        morphs[4] = dom.createMorphAt(element1,3,3);
        return morphs;
      },
      statements: [
        ["attribute","id",["get","inputId",["loc",[null,[1,12],[1,19]]]]],
        ["attribute","name",["get","group",["loc",[null,[1,42],[1,47]]]]],
        ["attribute","checked",["get","isSelected",["loc",[null,[1,60],[1,70]]]]],
        ["attribute","for",["get","inputId",["loc",[null,[2,13],[2,20]]]]],
        ["content","yield",["loc",[null,[6,2],[6,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/switch-button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: 'checkboxStatus:selected',
    change: function change() {
      this.toggleProperty('checkboxStatus');
    }
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/switch-button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 8
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/switch-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","label-left");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2,"type","checkbox");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","switch");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","label-right");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [7]),0,0);
        return morphs;
      },
      statements: [
        ["content","label-left",["loc",[null,[2,27],[2,41]]]],
        ["content","label-right",["loc",[null,[5,28],[5,43]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/text-area/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    classNameBindings: ['isPassive:is-passive', 'isFocus:is-focus', 'isError:is-error', 'isSuccess:is-success', 'isPassiveContent:is-passive-content', 'isDisabled:is-disabled', 'isFocusOut:focus-out'],
    firstRun: true,
    isPassive: true,
    isFocus: false,
    disabled: Ember['default'].computed('isDisabled', function () {
      if (this.get('isDisabled')) {
        return 'disabled';
      }
    }),
    // inputId: Ember.computed(function() {
    //   return 'rb-' + Ember.guidFor(this);
    // }),

    initFunction: function initFunction() {
      this._super();
      var self = this;

      if (this.get('firstRun') && !this.get('isDisabled')) {
        this.set('firstRun', false);

        var focusAction = function focusAction() {
          self.set('isFocusOut', false);
          self.set('isFocus', true);
          self.set('isPassive', false);
          self.set('isPassiveContent', false);
        };

        self.set('focusAction', focusAction);

        self.$('textarea').bind('focus', self.get('focusAction'));

        var blurAction = function blurAction() {
          self.set('isFocus', false);
          self.set('isFocusOut', true);
          if (self.$('textarea')[0].value) {
            self.set('isPassive', false);
            self.set('isPassiveContent', true);
            if (self.$('textarea')[0].value === 'success') {
              self.set('isSuccess', true);
            }

            if (self.$('textarea')[0].value === 'error') {
              self.set('isError', true);
            }
          } else {
            self.set('isPassiveContent', false);
            self.set('isPassive', true);
            self.set('isError', false);
            self.set('isSuccess', false);
          }
        };

        self.set('blurAction', blurAction);

        self.$('textarea').bind('blur', self.get('blurAction'));

        if (self.$('textarea')[0].value) {
          self.set('isPassiveContent', true);
        }
      }
    },
    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },
    willDestroyElement: function willDestroyElement() {
      this.$('input').unbind('focus', this.get('focusAction'));
      this.$('input').unbind('blur', this.get('blurAction'));
    }

  });

});
define('base-method-ember-styleguide/pods/components/form-fields/text-area/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/text-area/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        dom.setAttribute(el1,"class","label");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","label-text");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","error-message");
        var el3 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","textarea-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","textarea-outline");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("textarea");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createAttrMorph(element0, 'rows');
        morphs[2] = dom.createMorphAt(element0,0,0);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[1,46],[1,55]]]],
        ["attribute","rows",["get","col",["loc",[null,[4,19],[4,22]]]]],
        ["content","yield",["loc",[null,[4,25],[4,34]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/form-fields/text-input/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['isPassive:is-passive', 'isFocus:is-focus', 'isError:is-error', 'isSuccess:is-success', 'isPassiveContent:is-passive-content', 'isDisabled:is-disabled', 'isFocusOut:focus-out'],
    firstRun: true,
    isPassive: true,
    isFocus: false,
    disabled: Ember['default'].computed('isDisabled', function () {
      if (this.get('isDisabled')) {
        return 'disabled';
      }
    }),
    inputId: Ember['default'].computed(function () {
      return 'rb-' + Ember['default'].guidFor(this);
    }),

    initFunction: function initFunction() {
      this._super();
      var self = this;

      if (this.get('firstRun') && !this.get('isDisabled')) {
        this.set('firstRun', false);

        var focusAction = function focusAction() {
          self.set('isFocusOut', false);
          self.set('isFocus', true);
          self.set('isPassive', false);
          self.set('isPassiveContent', false);
        };

        self.set('focusAction', focusAction);

        self.$('input').bind('focus', self.get('focusAction'));

        var blurAction = function blurAction() {
          self.set('isFocus', false);
          self.set('isFocusOut', true);
          if (self.$('input')[0].value) {
            self.set('isPassive', false);
            self.set('isPassiveContent', true);
            if (self.$('input')[0].value === 'success') {
              self.set('isSuccess', true);
            }

            if (self.$('input')[0].value === 'error') {
              self.set('isError', true);
            }
          } else {
            self.set('isPassiveContent', false);
            self.set('isPassive', true);
            self.set('isError', false);
            self.set('isSuccess', false);
          }
        };

        self.set('blurAction', blurAction);

        self.$('input').bind('blur', self.get('blurAction'));

        if (self.$('input')[0].value) {
          self.set('isPassiveContent', true);
        }
      }
    },
    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },
    willDestroyElement: function willDestroyElement() {
      this.$('input').unbind('focus', this.get('focusAction'));
      this.$('input').unbind('blur', this.get('blurAction'));
    }
  });

});
define('base-method-ember-styleguide/pods/components/form-fields/text-input/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 180
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/form-fields/text-input/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        dom.setAttribute(el1,"class","label");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","label-text");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","error-message");
        var el3 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","input-wrapper");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1,"type","text");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'id');
        morphs[3] = dom.createAttrMorph(element0, 'placeholder');
        morphs[4] = dom.createAttrMorph(element0, 'type');
        morphs[5] = dom.createAttrMorph(element0, 'autofocus');
        morphs[6] = dom.createAttrMorph(element0, 'tab-index');
        morphs[7] = dom.createAttrMorph(element0, 'value');
        morphs[8] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[1,46],[1,55]]]],
        ["attribute","name",["get","inputId",["loc",[null,[3,26],[3,33]]]]],
        ["attribute","id",["get","inputId",["loc",[null,[3,41],[3,48]]]]],
        ["attribute","placeholder",["get","placeholder",["loc",[null,[3,65],[3,76]]]]],
        ["attribute","type",["get","inputType",["loc",[null,[3,86],[3,95]]]]],
        ["attribute","autofocus",["get","autofocus",["loc",[null,[3,110],[3,119]]]]],
        ["attribute","tab-index",["get","tabIndex",["loc",[null,[3,134],[3,142]]]]],
        ["attribute","value",["get","inputValue",["loc",[null,[3,154],[3,164]]]]],
        ["element","disabled",[],[],["loc",[null,[3,167],[3,179]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/category-page/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    actions: {
      updateKey: function updateKey(keyCode) {
        var self = this;
        self.set('shortcutKey', keyCode);
        switch (keyCode) {
          case 13:
            self.sendAction('goHome', true);
            break;
        }
      }
    },

    keyDown: function keyDown(e) {
      this.get('controller').send('updateKey', e.keyCode);
    },

    initFunction: function initFunction() {
      if (this.$()) {
        this.$().attr({ tabindex: 1 });
        this.$().focus();
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }
  });

});
define('base-method-ember-styleguide/pods/components/global/category-page/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/category-page/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/intro-animation/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    initFunction: function initFunction() {

      var self = this;

      function whichAnimationEvent() {
        var a,
            el = document.createElement("fakeelement");

        var animations = {
          "animation": "animationend",
          "OAnimation": "oAnimationEnd",
          "MozAnimation": "animationend",
          "WebkitAnimation": "webkitAnimationEnd"
        };

        for (a in animations) {
          if (el.style[a] !== undefined) {
            return animations[a];
          }
        }
      }

      var animationEvent = whichAnimationEvent();

      self.$('.logo').one(animationEvent, function () {
        self.sendAction('goToHome');
      });
    }

  });

});
define('base-method-ember-styleguide/pods/components/global/intro-animation/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/intro-animation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/keypress-component/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var timer,
      winHeightPos = window.innerHeight,
      rail2Pos = winHeightPos - 50;
  var totalUpKeyPresses = 0;

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['hideBrowseMode:hide-browse-mode', 'hideControlMode:hide-control-mode', 'hideScrubMode:hide-scrub-mode', 'moreInfoMode:show-more-info', 'paused:paused', 'scrubMode:expand-scrub-mode', 'animateDown:animate-down', 'animateUp:animate-up', 'animateLeft:animate-left', 'animateRight:animate-right', 'hideSpinner:hide-spinner', 'firstLoad:first-load', 'hideVideo:hide-video', 'overviewMode:show-overview'],

    ///////////////////////////////////////
    // set rails

    isForYou: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isForYou')) {
        return item;
      }
    }),

    isTrending: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isTrending')) {
        return item;
      }
    }),

    isStaffPick: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isStaffPick')) {
        return item;
      }
    }),

    isMostPopular: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isMostPopular')) {
        return item;
      }
    }),

    isFootball: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isFootball')) {
        return item;
      }
    }),

    isWimbledon: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isWimbledon')) {
        return item;
      }
    }),
    isBaseball: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isBaseball')) {
        return item;
      }
    }),

    isNfl: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isNfl')) {
        return item;
      }
    }),

    isSearch: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isSearch')) {
        return item;
      }
    }),

    isSetting: Ember['default'].computed.filter('model', function (item) {
      if (item.get('isSetting')) {
        return item;
      }
    }),

    rails: Ember['default'].computed('search', 'isForYou', 'isTrending', 'isStaffPick', 'isMostPopular', 'isFootball', 'isWimbledon', 'isBaseball', 'isNfl', 'settings', function () {
      var arr = [];

      var setting = this.get('isSetting');
      setting.set('railTitle', 'Settings');
      setting.sort('id');
      arr.push(setting);

      var search = this.get('isSearch');
      search.set('railTitle', 'Discover');
      search.sort('id');
      arr.push(search);

      var forYou = this.get('isForYou');
      forYou.set('railTitle', 'For You');
      forYou.sort('id');
      arr.push(forYou);

      var trending = this.get('isTrending');
      trending.set('railTitle', 'Trending');
      trending.sort('id');
      arr.push(trending);

      var staffPick = this.get('isStaffPick');
      staffPick.set('railTitle', 'Staff Pick');
      staffPick.sort('id');
      arr.push(staffPick);

      var mostPop = this.get('isMostPopular');
      mostPop.set('railTitle', 'Most Popular');
      mostPop.sort('id');
      arr.push(mostPop);

      var wimbledon = this.get('isWimbledon');
      wimbledon.set('railTitle', 'Wimbledon');
      wimbledon.sort('id');
      arr.push(wimbledon);

      var baseball = this.get('isBaseball');
      baseball.set('railTitle', 'Baseball');
      baseball.sort('id');
      arr.push(baseball);

      var NFL = this.get('isNfl');
      NFL.set('railTitle', 'NFL');
      NFL.sort('id');
      arr.push(NFL);

      var football = this.get('isFootball');
      football.set('railTitle', 'Football');
      football.sort('id');
      arr.push(football);

      return arr;
    }),

    ///////////////////////////////////////
    // No timer on first load
    // No timer on more info mode
    // Always timer
    timer: false,
    controleTimer: Ember['default'].observer('timer', function () {
      var self = this;
      if (self.get('timer')) {
        timer = window.setTimeout(function () {
          self.set('playbackMode', true);
        }, 7000);
      } else {
        window.clearTimeout(timer);
      }
    }),
    ///////////////////////////////////////
    // Browse Mode
    // Up and Down : Rails
    // Left and Right : Videos
    // Enter : Either control mode (same content) or load video playback mode
    // - no timer first time
    // browseMode: true,
    hideBrowseMode: false,
    browseModeObserve: Ember['default'].observer('browseMode', 'firstLoad', function () {
      var self = this,
          railHeight = 240;
      if (self.get('browseMode')) {
        console.log('browseMode');
        if (self.get('firstLoad')) {
          var arr = this.get('rails');
          var last = arr.get('lastObject');
          arr.removeObject(last);
          arr.unshiftObject(last);
          self.set('hideVideo', true);
          window.setTimeout(function () {
            for (var i = 0; i < 10; i++) {
              Ember['default'].$('.rail-video:nth-child(' + i + ')').css({
                'transform': 'translate3d(0, -' + Math.round(winHeightPos - railHeight * i) + 'px, 0)'
              });
            }
            window.setTimeout(function () {
              Ember['default'].$('.rail-video').css('transform', '');
              Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + rail2Pos + 'px, 0)');
              Ember['default'].$('.rail-video:nth-child(1)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
              window.setTimeout(function () {
                self.set('firstLoad', false);
              }, 500);
            }, 1500);
          }, 500);
        } else {
          Ember['default'].$('.rail-video').css('transform', '');
          Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + rail2Pos + 'px, 0)');
          Ember['default'].$('.rail-video:nth-child(1)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
        }
        this.set('overviewMode', false);
        this.set('hideBrowseMode', false);
        this.set('hideControlMode', true);
        this.set('controlMode', false);
        this.set('hideScrubMode', true);
        this.set('scrubMode', false);
        this.set('moreInfoMode', false);
        this.set('playbackMode', false);
      }
    }),

    ///////////////////////////////////////
    // Overview Mode
    // Left right up and down navigate buttons
    // Enter go to video in playback mode
    overviewMode: false,
    overviewModeObserve: Ember['default'].observer('overviewMode', function () {
      if (this.get('overviewMode')) {
        console.log('overviewMode');
        this.set('timer', false);
        this.set('controlMode', false);
        this.set('hideControlMode', true);
        this.set('hideBrowseMode', true);
        this.set('browseMode', false);
        this.set('hideScrubMode', true);
        this.set('scrubMode', false);
        this.set('moreInfoMode', false);
        this.set('playbackMode', false);
      }
    }),

    ///////////////////////////////////////
    // Control Mode
    // Left right navigate buttons
    // Enter button action
    // Up Scrub Mode
    // Down Browse mode
    controlMode: false,
    hideControlMode: true,
    controlModeObserve: Ember['default'].observer('controlMode', function () {
      if (this.get('controlMode')) {
        console.log('controlMode');
        Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
        this.set('overviewMode', false);
        this.set('timer', true);
        this.set('hideControlMode', false);
        this.set('hideBrowseMode', true);
        this.set('browseMode', false);
        this.set('hideScrubMode', false);
        this.set('scrubMode', false);
        this.set('moreInfoMode', false);
        this.set('playbackMode', false);
      }
    }),

    ///////////////////////////////////////
    // Scrub Mode
    // Left right nothing
    // Down Control Mode
    // Up Playback Mode
    // Enter Playback Mode
    scrubMode: false,
    hideScrubMode: true,
    srubModeObserve: Ember['default'].observer('scrubMode', function () {
      if (this.get('scrubMode')) {
        console.log('scrubMode');
        Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
        this.set('timer', true);
        this.set('overviewMode', false);
        this.set('hideScrubMode', false);
        this.set('hideControlMode', false);
        this.set('controlMode', false);
        this.set('hideBrowseMode', true);
        this.set('browseMode', false);
        this.set('moreInfoMode', false);
        this.set('playbackMode', false);
      }
    }),

    ///////////////////////////////////////
    // More Info mode
    // Left + up + down = nothing
    // Right Close
    // Enter go to category page
    // No timer
    moreInfoMode: false,
    moreInfoObserve: Ember['default'].observer('moreInfoMode', function () {
      if (this.get('moreInfoMode')) {
        this.set('timer', false);
        this.set('overviewMode', false);
        this.set('hideControlMode', true);
        this.set('controlMode', false);
        this.set('hideBrowseMode', true);
        this.set('browseMode', false);
        this.set('hideScrubMode', true);
        this.set('scrubMode', false);
        this.set('playbackMode', false);
      }
    }),

    ///////////////////////////////////////
    // Playback Mode
    // Up Down launches browse mode
    // Left and right nothing
    // Enter launches control mode
    playbackMode: false,
    playbackModeObserve: Ember['default'].observer('playbackMode', function () {
      if (this.get('playbackMode')) {
        console.log('playbackMode');
        Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
        this.set('timer', false);
        this.set('hideControlMode', true);
        this.set('overviewMode', false);
        this.set('controlMode', false);
        this.set('hideBrowseMode', true);
        this.set('browseMode', false);
        this.set('hideScrubMode', true);
        this.set('scrubMode', false);
        this.set('moreInfoMode', false);
      }
    }),

    ready: true,

    isAnimated: false,

    newVideoSrc: Ember['default'].computed(function () {
      return 'videos/football1.mp4';
    }),

    height: Ember['default'].computed(function () {
      return window.innerHeight;
    }),

    width: Ember['default'].computed(function () {
      return window.innerWidth;
    }),

    elapsedTime: Ember['default'].computed(function () {
      return Math.floor(Math.random() * 60);
    }),

    firstPass: true,

    firstLoad: false,

    isFirstTime: Ember['default'].observer('model', function () {
      if (this.get('model.firstTime')) {
        this.set('firstLoad', true);
        this.set('model.firstTime', false);
      }
    }),

    actions: {
      isLoaded: function isLoaded(key) {
        if (key === true) {
          this.set('hideSpinner', true);
        }
      },

      updateKey: function updateKey(keyCode) {
        this.set('shortcutKey', keyCode);
        var arr = this.get('rails');
        var first = arr.get('firstObject');
        var last = arr.get('lastObject');
        var arr2 = arr[2];
        var first2 = arr2.get('firstObject');
        var last2 = arr2.get('lastObject');
        var selected = arr2[2];
        var video = Ember['default'].$('#ls-video')[0];
        var self = this;

        function upDown(direction) {

          resetRail(0);
          resetRail(4);
          console.log(totalUpKeyPresses);
          if (totalUpKeyPresses > 5) {
            self.set('overviewMode', true);
          } else {
            self.set('isAnimated', true);
            self.set('timer', false);
            if (direction === 'down') {
              self.set('animateDown', true);
              Ember['default'].$('.rail-video:nth-child(2)').css('transform', '');
              Ember['default'].$('.rail-video:nth-child(1)').css('transform', 'translate3d(0, -' + rail2Pos + 'px, 0)');
            }
            if (direction === 'up') {
              self.set('animateUp', true);
              Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
              Ember['default'].$('.rail-video:nth-child(3)').css('transform', 'translate3d(0, -' + rail2Pos + 'px, 0)');
            }
            window.setTimeout(function () {
              if (direction === 'down') {
                self.set('animateDown', false);
                arr.removeObject(last);
                arr.unshiftObject(last);
              }
              if (direction === 'up') {
                self.set('animateUp', false);
                arr.removeObject(first);
                arr.pushObject(first);
              }
              totalUpKeyPresses++;
              Ember['default'].$('.rail-video').css('transform', '');
              Ember['default'].$('.rail-video:nth-child(2)').css('transform', 'translate3d(0, -' + rail2Pos + 'px, 0)');
              Ember['default'].$('.rail-video:nth-child(1)').css('transform', 'translate3d(0, -' + winHeightPos + 'px, 0)');
              if (!self.get('firstPass')) {
                self.set('timer', true);
              }
              self.set('isAnimated', false);
            }, 600);
          }
        }

        function leftRight(direction) {
          totalUpKeyPresses = 0;
          if (arr2.length > 4) {
            self.set('isAnimated', true);
            self.set('timer', false);
            if (direction === 'left') {
              self.set('animateLeft', true);
            }
            if (direction === 'right') {
              self.set('animateRight', true);
            }
            window.setTimeout(function () {
              self.set('animateLeft', false);
              self.set('animateRight', false);

              if (direction === 'left' && !self.get('animateLeft')) {
                arr2.removeObject(first2);
                arr2.pushObject(first2);
              }
              if (direction === 'right' && !self.get('animateRight')) {
                arr2.removeObject(last2);
                arr2.unshiftObject(last2);
              }
              if (!self.get('firstPass')) {
                self.set('timer', true);
              }
              self.set('isAnimated', false);
            }, 500);
          }
        }

        function leftRightPlayback(direction) {
          self.set('browseMode', true);
          window.setTimeout(function () {
            leftRight(direction);
            window.setTimeout(function () {
              var selected2 = arr2[2];
              self.set('newVideoSrc', 'videos/' + selected2.get('videoSrc'));
              window.setTimeout(function () {
                Ember['default'].$('#ls-video').load();
                window.setTimeout(function () {
                  self.set('playbackMode', true);
                }, 50);
              }, 300);
            }, 500);
          }, 500);
        }

        function resetRail(position) {
          var newArr = arr[position];
          newArr.sort('id');
          return newArr;
        }

        switch (keyCode) {
          case 40:
            // down
            ////////////////////
            // browse mode
            if (self.get('browseMode') && !self.get('isAnimated')) {
              upDown('down');
            }
            ////////////////////
            // control mode
            if (self.get('controlMode')) {
              self.set('timer', false);
              setTimeout(function () {
                self.set('scrubMode', true);
                self.set('timer', true);
              }, 50);
            }
            ////////////////////
            // more info mode
            if (self.get('moreInfoMode')) {
              return false;
            }
            ////////////////////
            // playback mode
            if (self.get('playbackMode')) {
              self.set('timer', false);
              setTimeout(function () {
                self.set('browseMode', true);
                self.set('timer', true);
              }, 50);
            }
            ////////////////////
            // scrubMode mode
            if (self.get('scrubMode')) {
              self.set('timer', false);
              setTimeout(function () {
                self.set('controlMode', true);
              }, 50);
              self.set('timer', true);
            }
            break;
          case 38:
            // up
            ////////////////////
            // browse mode
            if (self.get('browseMode') && !self.get('isAnimated')) {
              upDown('up');
            }

            ////////////////////
            // control mode
            if (self.get('controlMode')) {
              self.set('timer', false);
              self.set('hideControlMode', true);
              setTimeout(function () {
                self.set('browseMode', true);
              }, 500);
            }
            ////////////////////
            // more info mode
            if (self.get('moreInfoMode')) {
              return false;
            }
            ////////////////////
            // playback mode
            if (self.get('playbackMode')) {

              self.set('timer', false);
              setTimeout(function () {
                self.set('browseMode', true);
                self.set('timer', true);
              }, 50);
            }
            ////////////////////
            // scrubMode mode
            if (self.get('scrubMode')) {
              self.set('timer', false);
              setTimeout(function () {
                self.set('controlMode', true);
                self.set('timer', true);
              }, 50);
            }
            break;
          case 37:
            // left
            ////////////////////
            // browse mode
            if (self.get('browseMode') && !self.get('isAnimated') && !selected.get('isSetting')) {
              leftRight('left');
            }
            ////////////////////
            // control mode
            if (self.get('controlMode')) {
              self.set('timer', false);
              if (!Ember['default'].$('.video-controls > li:first-child').hasClass('active')) {
                Ember['default'].$('.video-controls > li.active').removeClass('active').prev().addClass('active');
              }
              self.set('timer', true);
            }
            ////////////////////
            // more info mode
            if (self.get('moreInfoMode')) {
              return false;
            }
            ////////////////////
            // playback mode
            if (self.get('playbackMode')) {
              leftRightPlayback('left');
            }
            ////////////////////
            // scrubMode mode
            if (self.get('scrubMode')) {
              return false;
            }
            break;
          case 39:
            // right
            ////////////////////
            // browse mode
            if (self.get('browseMode') && !self.get('isAnimated') && !selected.get('isSetting')) {
              leftRight('right');
            }
            ////////////////////
            // control mode
            if (self.get('controlMode')) {
              self.set('timer', false);
              if (!Ember['default'].$('.video-controls > li:last-child').hasClass('active')) {
                Ember['default'].$('.video-controls > li.active').removeClass('active').next().addClass('active');
              }
              self.set('timer', true);
            }
            ////////////////////
            // more info mode
            if (self.get('moreInfoMode')) {
              self.set('timer', false);
              setTimeout(function () {
                self.set('playbackMode', true);
              }, 50);
            }
            ////////////////////
            // playback mode
            if (self.get('playbackMode')) {
              leftRightPlayback('right');
            }
            ////////////////////
            // scrubMode mode
            if (this.get('scrubMode')) {
              return false;
            }
            break;
          case 13:
            // enter
            totalUpKeyPresses = 0;
            ////////////////////
            // overview mode

            ////////////////////
            // browse mode
            window.setTimeout(function () {
              self.set('hideVideo', false);
            }, 500);

            if (this.get('browseMode') || this.get('overviewMode')) {
              if (selected.get('isSearch')) {
                if (selected.get('isIcon')) {
                  window.setTimeout(function () {
                    self.sendAction('goSearch');
                  }, 50);
                } else {
                  window.setTimeout(function () {
                    self.sendAction('goCategory');
                  }, 50);
                }
              } else if (selected.get('isSetting')) {
                return false;
              } else {
                self.set('timer', false);
                self.set('firstPass', false);
                var currentSource = Ember['default'].$('#ls-video source').attr('src');
                var newSource = 'videos/' + selected.get('videoSrc');
                if (currentSource === newSource) {
                  window.setTimeout(function () {
                    self.set('playbackMode', true);
                  }, 50);
                } else {
                  self.set('newVideoSrc', 'videos/' + selected.get('videoSrc'));
                  window.setTimeout(function () {
                    Ember['default'].$('#ls-video').load();
                  }, 1);
                  window.setTimeout(function () {
                    self.set('playbackMode', true);
                  }, 50);
                }
                self.set('timer', true);
              }
            }
            ////////////////////
            // control mode
            if (this.get('controlMode')) {
              if (Ember['default'].$('#step-back').hasClass('active')) {
                self.set('timer', false);
                if (video.currentTime > 10) {
                  video.currentTime = video.currentTime - 10;
                } else {
                  video.currentTime = 0;
                }
                self.set('timer', true);
              }
              if (Ember['default'].$('#pause').hasClass('active')) {
                self.set('timer', false);
                if (self.get('paused')) {
                  self.set('paused', false);
                  video.play();
                } else {
                  self.set('paused', true);
                  video.pause();
                }
                self.set('timer', true);
              }
              if (Ember['default'].$('#step-forward').hasClass('active')) {
                self.set('timer', false);
                if (video.readyState > 1) {
                  if (video.currentTime + 20 < video.duration) {
                    var increase = Math.round(video.currentTime + 20);
                    return video.currentTime = increase;
                  }
                }
                self.set('timer', true);
              }
              if (Ember['default'].$('#info').hasClass('active')) {
                window.setTimeout(function () {
                  self.set('moreInfoMode', true);
                }, 50);
              }
            }
            ////////////////////
            // more info mode
            if (self.get('moreInfoMode')) {
              window.setTimeout(function () {
                self.sendAction('goCategory', selected);
              }, 50);
            }
            ////////////////////
            // playback mode
            if (self.get('playbackMode')) {
              self.set('timer', false);
              window.setTimeout(function () {
                self.set('controlMode', true);
              }, 50);
              self.set('timer', true);
            }
            ////////////////////
            // scrubMode mode
            if (self.get('scrubMode')) {}
            break;
          case 80:
            self.sendAction('resetApp');
            break;
        }
      },
      shortcutKey: null
    },

    keyDown: function keyDown(e) {
      this.get('controller').send('updateKey', e.keyCode);
    },

    initFunction: function initFunction() {
      var self = this,
          video = Ember['default'].$('#ls-video')[0];
      video.volume = 0;
      self.set('browseMode', true);
      return self.$().attr({ tabindex: 1 }), self.$().focus();
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroyElement: function willDestroyElement() {
      clearTimeout(window);
    }
  });

});
define('base-method-ember-styleguide/pods/components/global/keypress-component/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/keypress-component/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","loading");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-spinner fa-pulse");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","static-background");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,6,6,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,8,8,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","firstTime",["loc",[null,[1,0],[1,13]]]],
        ["inline","content/video-player",[],["newVideoSrc",["subexpr","@mut",[["get","newVideoSrc",["loc",[null,[6,35],[6,46]]]]],[],[]]],["loc",[null,[6,0],[6,48]]]],
        ["inline","content/rail-category",[],["model",["subexpr","@mut",[["get","rails",["loc",[null,[8,30],[8,35]]]]],[],[]],"isLoaded","isLoaded"],["loc",[null,[8,0],[8,57]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/landing-page/component', ['exports', 'ember', 'base-method-ember-styleguide/mixins/scroll-event'], function (exports, Ember, scrollEvent) {

  'use strict';

  var lastScrollTop = 0;
  var letScroll = true;

  exports['default'] = Ember['default'].Component.extend(scrollEvent['default'], {
    classNameBindings: ['shownav:show-nav', 'animateGrid:animate-grid', 'animateBigGame:animate-big-game', 'animateallSports:animate-all-sports', 'animateCarousel:animate-carousel', 'showMore:show-more'],
    // Set data for Big Game
    games: [{
      tiles: [{
        title: 'BUNDESLIGA',
        img: 'background-image: url(images/landing/bundesliga.png)',
        category: true
      }, {
        team1: 'KOLN',
        team2: 'DORTMUND',
        img: 'background-image: url(images/landing/content2.jpg)'
      }, {
        team1: 'INGLESTADT',
        team2: 'DORTMUND',
        img: 'background-image: url(images/landing/content3.jpg)'
      }, {
        team1: 'BAYERN MUNICH',
        team2: 'SCHALKE 04',
        img: 'background-image: url(images/landing/content4.jpg)'
      }]
    }, {
      tiles: [{
        team1: 'CLIPPERS',
        team2: 'NUGGETS',
        img: 'background-image: url(images/landing/content5.jpg)'
      }, {
        team1: 'PISTONS',
        team2: 'HORNETS',
        img: 'background-image: url(images/landing/content6.jpg)'
      }, {
        team1: 'HAWKS',
        team2: 'CAVALIERS',
        img: 'background-image: url(images/landing/content7.jpg)'
      }, {
        title: 'NBA',
        img: 'background-image: url(images/landing/nba.png)',
        category: true
      }]
    }],

    // Set data for all sports
    sports: [{ title: 'AMERICAN FOOTBALL' }, { title: 'ATHLETICS & GYMNASTICS' }, { title: 'BASEBALL' }, { title: 'BASKETBALL' }, { title: 'COLLEGE SPORTS' }, { title: 'DARTS' }, { title: 'EQUESTRIAN' }, { title: 'FIGHT SPORTS' }, { title: 'FOOTBALL' }, { title: 'GOLF' }, { title: 'HANDBALL' }, { title: 'HORSE RACING' }, { title: 'ICE HOCKEY' }, { title: 'KICK BOXING' }, { title: 'MOTOR RACING' }, { title: 'POOL' }, { title: 'RUGBY' }, { title: 'SNOOKER' }, { title: 'SUMO WRESTLING' }, { title: 'TENNIS' }, { title: 'VOLLEYBALL' }, { title: 'WINTER SPORTS' }],
    //Set Data for footer
    footerItems: [{ title: 'TERMS AND CONDITIONS' }, { title: 'FREQUENTLY ASKED QUESTIONS' }, { title: 'HELP' }, { title: 'PRIVACY POLICY' }],
    // Set data for carousel
    carousel: [{
      text: 'RICHARD SYNAK WATCHING THE BUNDESLIGA FINAL ON HIS WAY HOME.',
      img: 'background-image: url(images/landing/carousel1.jpg)'
    }, {
      text: 'JOHN DIGWEED WATCHING THE NFL WITH HIS FRIENDS.',
      img: 'background-image: url(images/landing/carousel2.jpg)'
    }, {
      text: 'MICHAEL MOORE FOLLOWING HIS FAVORITE TEAM.',
      img: 'background-image: url(images/landing/carousel3.jpg)'
    }],
    //Carousel function
    startCarousel: function startCarousel() {
      var self = this,
          slides = 3,
          currentSlide = 1;
      window.setInterval(function () {
        if (currentSlide === slides) {
          currentSlide = 1;
        } else {
          currentSlide++;
        }
        self.$('.slider').css({ 'transform': 'translate3d(-' + (currentSlide - 1) * (100 / 3) + '%, 0, 0)' });
        self.$('.carousel-counter > span').removeClass('active');
        self.$('.carousel-counter > span:nth-child(' + currentSlide + ')').addClass('active');
      }, 4000);
    },
    // Prevent double scrolling
    letScroll: true,
    // Prevent scroll while animating
    observeLetScroll: Ember['default'].observer('letScroll', function () {
      if (this.get('letScroll')) {
        Ember['default'].$('html, body').css({ 'overflow': 'visible' });
      } else {
        Ember['default'].$('html, body').css({ 'overflow': 'hidden' });
      }
    }),

    //Snap scroll function
    snapScroll: function snapScroll(event, position) {
      var self = this;
      self.set('showMore', false);
      if (self.get('letScroll')) {
        self.set('letScroll', false);
        Ember['default'].$({ myScrollTop: window.pageYOffset }).animate({ myScrollTop: position - 130 }, {
          duration: 200,
          easing: 'linear',
          step: function step(val) {
            window.scrollTo(0, val);
          }
        }).promise().done(function () {
          window.setTimeout(function () {
            event.stopPropagation();
            event.preventDefault();
            event.returnValue = false;
            return false;
          }, 100);
          window.setTimeout(function () {
            self.set('letScroll', true);
            if (position !== self.$('#carousel').offset().top) {
              var winHeight = Math.round(window.innerHeight - 100);
              var thisSectionHeight;
              if (position === self.$('#big-game').offset().top) {
                thisSectionHeight = self.$('#big-game').height();
              }
              if (position === self.$('#sport-list').offset().top) {
                thisSectionHeight = self.$('#sport-list').height();
              }
              if (winHeight > thisSectionHeight) {
                self.set('showMore', true);
              }
            }
          }, 1000);
        });
      }
    },
    // Scroll function
    scrolled: function scrolled(e) {

      var self = this,
          topPosition = Ember['default'].$(window).scrollTop(),
          headerHeight = self.$('.main-header').height(),
          bigGames = self.$('#big-game').offset().top,
          allSports = self.$('#sport-list').offset().top,
          thisCarousel = self.$('#carousel').offset().top,
          differenceMin = window.innerHeight - 100,
          differenceMax = window.innerHeight - 200,
          minBigGame = bigGames - differenceMin,
          maxBigGame = bigGames - differenceMax,
          minAllSports = allSports - differenceMin,
          maxAllSports = allSports - differenceMax,
          minCarousel = thisCarousel - differenceMin,
          maxCarousel = thisCarousel - differenceMax;

      // Show hide navigation
      if (topPosition < headerHeight - 40) {
        self.set('shownav', false);
        self.set('animateBigGame', false);
        self.set('animateallSports', false);
        self.set('animateCarousel', false);
      } else {
        self.set('shownav', true);
      }
      // Start animation on big game
      if (topPosition >= bigGames - window.innerHeight) {
        self.set('animateBigGame', true);
      }
      // start animation on all sports
      if (topPosition >= allSports - window.innerHeight) {
        self.set('animateallSports', true);
      }
      // Start animation on carousel
      if (topPosition >= thisCarousel - window.innerHeight) {
        self.set('animateCarousel', true);
      }
      // Snap to position on scroll only on desktop
      if (self.get('desktop')) {

        // Only snap on scroll down
        if (topPosition > lastScrollTop) {
          // Snap to position for big game
          if (topPosition > minBigGame && topPosition < maxBigGame) {
            self.snapScroll(e, bigGames);
          }
          // Snap to position for all sports
          if (topPosition > minAllSports && topPosition < maxAllSports) {
            self.snapScroll(e, allSports);
          }
          // Snap to position for carousel
          if (topPosition > minCarousel && topPosition < maxCarousel) {
            self.snapScroll(e, thisCarousel);
          }
        }
        lastScrollTop = topPosition;
      }
    },

    sectionHeight: Ember['default'].computed(function () {
      if (window.innerWidth > 760) {
        var height = window.innerHeight - 120;
        return Ember['default'].String.htmlSafe('min-height: ' + height + 'px');
      } else {
        return Ember['default'].String.htmlSafe('min-height: auto');
      }
    }),

    firstRun: true,

    initFunction: function initFunction() {
      this._super();
      this.bindScrolling();
      var self = this;
      var resizeHandler = function resizeHandler() {
        if (window.innerWidth > 760) {
          var height = window.innerHeight - 120;
          self.set('sectionHeight', Ember['default'].String.htmlSafe('min-height: ' + height + 'px'));
        }
        var height2 = self.$('.content-tile').width() / 16 * 9;
        self.set('tileImgWrapperStyle', Ember['default'].String.htmlSafe('height: ' + height2 + 'px'));
        var height3 = self.$('.content-tile').width() / 16 * 9 + self.$('.tile-title-wrapper').height();
        self.set('categoryTileStyle', Ember['default'].String.htmlSafe('height: ' + height3 + 'px'));
        if (window.innerWidth > 760) {
          self.set('desktop', true);
        } else {
          self.set('desktop', false);
        }
      };
      self.set('resizeHandler', resizeHandler);
      Ember['default'].$(window).bind('resize', self.get('resizeHandler'));

      if (self.get('firstRun')) {
        self.set('firstRun', false);
        if (window.innerWidth > 760) {
          self.set('desktop', true);
        } else {
          self.set('desktop', false);
        }
        Ember['default'].run.later(function () {
          var height2 = self.$('.content-tile').width() / 16 * 9;
          self.set('tileImgWrapperStyle', Ember['default'].String.htmlSafe('height: ' + height2 + 'px'));
          var height3 = self.$('.content-tile').width() / 16 * 9 + self.$('.tile-title-wrapper').height();
          self.set('categoryTileStyle', Ember['default'].String.htmlSafe('height: ' + height3 + 'px'));
        }, 100);
        self.startCarousel();
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroy: function willDestroy() {
      var self = this;
      this.unbindScrolling();
      Ember['default'].$(window).unbind('resize', self.get('resizeHandler'));
    }
  });

});
define('base-method-ember-styleguide/pods/components/global/landing-page/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 91,
                  "column": 12
                },
                "end": {
                  "line": 97,
                  "column": 12
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","category-wrapper");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","category-img");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","category-title");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1]);
              var element7 = dom.childAt(element6, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createUnsafeAttrMorph(element6, 'style');
              morphs[1] = dom.createUnsafeAttrMorph(element7, 'style');
              morphs[2] = dom.createMorphAt(dom.childAt(element7, [1]),0,0);
              return morphs;
            },
            statements: [
              ["attribute","style",["get","categoryTileStyle",["loc",[null,[92,51],[92,68]]]]],
              ["attribute","style",["get","tile.img",["loc",[null,[93,50],[93,58]]]]],
              ["content","tile.title",["loc",[null,[94,44],[94,58]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 97,
                  "column": 12
                },
                "end": {
                  "line": 109,
                  "column": 12
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","content-tile");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","tile-img-wrapper");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","tile-img");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","tile-title-wrapper");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","tile-title");
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4,"class","text-ellipsis");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4,"class","text-ellipsis");
              var el5 = dom.createTextNode("AT ");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var element4 = dom.childAt(element3, [1]);
              var element5 = dom.childAt(element2, [3, 1]);
              var morphs = new Array(5);
              morphs[0] = dom.createUnsafeAttrMorph(element2, 'style');
              morphs[1] = dom.createUnsafeAttrMorph(element3, 'style');
              morphs[2] = dom.createUnsafeAttrMorph(element4, 'style');
              morphs[3] = dom.createMorphAt(dom.childAt(element5, [1]),0,0);
              morphs[4] = dom.createMorphAt(dom.childAt(element5, [3]),1,1);
              return morphs;
            },
            statements: [
              ["attribute","style",["get","categoryTileStyle",["loc",[null,[98,47],[98,64]]]]],
              ["attribute","style",["get","tileImgWrapperStyle",["loc",[null,[99,53],[99,72]]]]],
              ["attribute","style",["get","tile.img",["loc",[null,[100,48],[100,56]]]]],
              ["content","tile.team1",["loc",[null,[104,45],[104,59]]]],
              ["content","tile.team2",["loc",[null,[105,48],[105,62]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 8
              },
              "end": {
                "line": 111,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-2 bp3-col-3 tile");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","if",[["get","tile.category",["loc",[null,[91,18],[91,31]]]]],[],0,1,["loc",[null,[91,12],[109,19]]]]
          ],
          locals: ["tile"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row big-game");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","game.tiles",["loc",[null,[89,16],[89,26]]]]],[],0,null,["loc",[null,[89,8],[111,17]]]]
        ],
        locals: ["game"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 131,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","sport.title",["loc",[null,[130,14],[130,29]]]]
        ],
        locals: ["sport"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","carousel-page");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","carousel-img");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","carousel-text");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","mt-container limited-container");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","mt-row");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","bp1-col-4");
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("p");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createUnsafeAttrMorph(element1, 'style');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 1, 1, 1]),0,0);
          return morphs;
        },
        statements: [
          ["attribute","style",["get","item.img",["loc",[null,[149,43],[149,51]]]]],
          ["content","item.text",["loc",[null,[154,19],[154,32]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 191,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","item.title",["loc",[null,[190,22],[190,36]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 205,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/landing-page/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","main-nav");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","header-logo");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","tertiary-button");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("START YOUR 30 DAY FREE TRIAL");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","main-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","main-header-img");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","secondary-button");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("LOGIN");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","logo");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","text-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h1");
        var el5 = dom.createTextNode("For every sporting moment.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","main-button");
        dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","icon");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","iconfont iconfont-ls_icon_notification");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","text");
        var el6 = dom.createTextNode("START YOUR 30 DAY FREE TRIAL");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("All sports,");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","hidden-desktop");
        var el6 = dom.createElement("br");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" no hidden costs for €8.99");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","main-content");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","main-overview");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-container limited-container");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","mt-row tournaments");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","small-separator");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","arrow-down");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","logo-list");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/nfl.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/nba.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/atp.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/lfp.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/bundesliga.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/ligue1.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/f1.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/tournaments/davis.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 text-center");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h4");
        dom.setAttribute(el6,"class","tournaments-subtitle");
        var el7 = dom.createTextNode("HUGE SELECTION OF SPORTS");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","mt-row");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-4 bp3-offset-1");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","feature-box");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","arrow-down");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","feature-box-img");
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("img");
        dom.setAttribute(el8,"src","images/landing/devices.png");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n          ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        var el8 = dom.createTextNode("WATCH ANYWHERE");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("br");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("ON ANY DEVICE");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-4 bp3-offset-2");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","feature-box");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","arrow-down");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","feature-box-img");
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("img");
        dom.setAttribute(el8,"src","images/landing/price.png");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n          ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        var el8 = dom.createTextNode("NO COMMITMENTS,");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("br");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("CANCEL ANYTIME");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","separator");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","arrow-down");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"id","big-game");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","section-title big-game-title");
        var el4 = dom.createTextNode("BIG GAMES THIS MONTH");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-container limited-container big-games");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","separator");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","arrow-down");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"id","sport-list");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","section-title");
        var el4 = dom.createTextNode("ALL SPORTS INCLUDED");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-container limited-container");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","mt-row");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        dom.setAttribute(el6,"class","sport-list");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","separator");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","arrow-down");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"id","carousel");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","section-title");
        var el4 = dom.createTextNode("WATCH AT THE PUB, AT HOME, AND AT WORK");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","carousel");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","slider");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","carousel-counter");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","active");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-container");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","mt-row");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","logo-list");
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/android.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/windows.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/apple.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/xbox.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/lg.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/amazon.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/panasonic.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/landing/devices/samsung.png");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n        ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("footer");
        dom.setAttribute(el2,"class","main-footer");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","separator-final");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","arrow-up");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","show-more-arrow");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","iconfont iconfont-ls_icon_arrow_sml_down");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [5]);
        var element9 = dom.childAt(element8, [5]);
        var element10 = dom.childAt(element8, [9]);
        var element11 = dom.childAt(element8, [13]);
        var morphs = new Array(7);
        morphs[0] = dom.createUnsafeAttrMorph(element9, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(element9, [3]),1,1);
        morphs[2] = dom.createUnsafeAttrMorph(element10, 'style');
        morphs[3] = dom.createMorphAt(dom.childAt(element10, [3, 1, 1, 1]),1,1);
        morphs[4] = dom.createUnsafeAttrMorph(element11, 'style');
        morphs[5] = dom.createMorphAt(dom.childAt(element11, [3, 1]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [15, 1]),1,1);
        return morphs;
      },
      statements: [
        ["attribute","style",["get","sectionHeight",["loc",[null,[84,18],[84,31]]]]],
        ["block","each",[["get","games",["loc",[null,[87,12],[87,17]]]]],[],0,null,["loc",[null,[87,4],[113,13]]]],
        ["attribute","style",["get","sectionHeight",["loc",[null,[123,18],[123,31]]]]],
        ["block","each",[["get","sports",["loc",[null,[129,10],[129,16]]]]],[],1,null,["loc",[null,[129,2],[131,11]]]],
        ["attribute","style",["get","sectionHeight",["loc",[null,[143,18],[143,31]]]]],
        ["block","each",[["get","carousel",["loc",[null,[147,12],[147,20]]]]],[],2,null,["loc",[null,[147,4],[160,13]]]],
        ["block","each",[["get","footerItems",["loc",[null,[189,12],[189,23]]]]],[],3,null,["loc",[null,[189,4],[191,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/search-module/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var startNum;

  exports['default'] = Ember['default'].Component.extend({

    imgSrc: Ember['default'].computed('newSource', function () {

      var changeSource;

      if (this.get('newSource')) {
        changeSource = this.get('newSource');
      } else {
        changeSource = 'images/search/1.png';
      }

      return new Ember['default'].String.htmlSafe(changeSource);
    }),

    actions: {

      updateKey: function updateKey(keyCode) {

        this.set('shortcutKey', keyCode);
        // Function to detect end of CSS transition
        var self = this;

        switch (keyCode) {
          case 13:

            if (startNum < 3) {
              startNum++;
              self.set('newSource', 'images/search/' + startNum + '.png');
            } else {
              self.sendAction('goHome', true);
            }
            break;
          case 38:
            if (startNum > 1) {
              startNum--;
              self.set('newSource', 'images/search/' + startNum + '.png');
            } else {
              self.sendAction('goHome', true);
            }
            break;
        }
      }
    },

    keyDown: function keyDown(e) {
      this.get('controller').send('updateKey', e.keyCode);
    },

    didInsertElement: function didInsertElement() {
      startNum = 1;
    },

    initFunction: function initFunction() {
      if (this.$()) {
        this.$().attr({ tabindex: 1 });
        this.$().focus();
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/global/search-module/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/search-module/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createUnsafeAttrMorph(element0, 'src');
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["attribute","src",["get","imgSrc",["loc",[null,[1,12],[1,18]]]]],
        ["element","action",["next"],[],["loc",[null,[1,22],[1,39]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/global/sign-up/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var startNum = 1;

  exports['default'] = Ember['default'].Component.extend({
    // imgSrc: Ember.computed('newSource', function(){
    //   var changeSource;
    //   if (this.get('newSource')) {
    //     changeSource = this.get('newSource');
    //   } else {
    //     changeSource = 'images/signup/1.png';
    //   }
    //   return new Ember.String.htmlSafe(changeSource);
    // }),

    actions: {
      updateKey: function updateKey(keyCode) {
        this.set('shortcutKey', keyCode);
        var self = this;
        switch (keyCode) {
          case 13:
            if (startNum < 12) {
              startNum++;
              self.sendAction('newSource', 'images/signup/' + startNum + '.png');
            } else {
              self.sendAction('goToBrowse', true);
            }
            break;
          case 38:

            if (startNum > 1) {
              startNum--;
              self.sendAction('newSource', 'images/signup/' + startNum + '.png');
            }

            break;
        }
      }
    },
    keyDown: function keyDown(e) {
      this.get('controller').send('updateKey', e.keyCode);
    },
    didInsertElement: function didInsertElement() {
      startNum = 1;
    },
    initFunction: function initFunction() {
      if (this.$()) {
        this.$().attr({ tabindex: 1 });
        this.$().focus();
      }
    },
    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }
  });

});
define('base-method-ember-styleguide/pods/components/global/sign-up/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/global/sign-up/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-container/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    firstRun: true,
    actions: {
      isActive: function isActive(tab) {

        var tabs = this.get('childViews');
        var tabsLength = this.get('childViews.length') / 2;
        var activeTab;
        // var activeIndex;
        var self = this;
        var prevActive;
        tabs.forEach(function (thisTab, index) {
          if (thisTab.get('type') === 'nav' && thisTab.get('active')) {
            prevActive = index;
          }
          if (thisTab === tab) {
            activeTab = thisTab.get('model');
          }
          if (thisTab.get('model') === activeTab) {
            thisTab.set('active', true);
          } else {
            thisTab.set('active', false);
          }
          if (thisTab.get('type') === 'nav' && thisTab.get('model') === activeTab) {
            var thisLeft = thisTab.$()[0].offsetLeft + 20;
            var thisWidth = thisTab.$()[0].clientWidth;
            var thisRight = (tabsLength - (index + 1)) * thisWidth + 20;
            var thisString = Ember['default'].String.htmlSafe('left: ' + thisLeft + 'px; right: ' + thisRight + 'px;');
            self.set('selectorStyle', thisString);
          }
        });
      }
    },

    options: Ember['default'].computed(function () {
      var options = [{
        'title': 'TAB 1',
        'content': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque tristique congue dolor nec varius. Donec sit amet luctus lorem. Maecenas nec orci ornare, viverra magna a, convallis massa.'
      }, {
        'title': 'TAB 2',
        'content': 'Maecenas eu commodo nisi. Duis non tellus suscipit nisl pulvinar vehicula non eu tellus. Nunc sodales interdum eros eget tincidunt.'
      }, {
        'title': 'TAB 3',
        'content': ' Phasellus non urna dignissim, dignissim nibh eget, consequat ante. Mauris nisl nisi, aliquet non mauris condimentum, laoreet pulvinar eros.'
      }];
      return options;
    }),

    initFunction: function initFunction() {
      this._super();
      if (this.get('firstRun')) {
        this.set('firstRun', false);
        var self = this;
        var tabs = this.get('childViews');
        var activeTab;
        var activeNavTab;
        tabs.forEach(function (thisTab, index) {
          if (index === 0) {
            activeTab = thisTab.get('model');
          }
          if (thisTab.get('model') === activeTab) {
            thisTab.set('active', true);
          }
          if (thisTab.get('type') === 'nav' && thisTab.get('active')) {
            activeNavTab = thisTab;
          }
        });
        var thisLeft = activeNavTab.$()[0].offsetLeft + 20;
        var thisWidth = activeNavTab.$()[0].clientWidth;
        var tabsLength = this.get('childViews.length') / 2;
        var thisRight = thisWidth * (tabsLength - 1) + 20;
        var thisString = Ember['default'].String.htmlSafe('left: ' + thisLeft + 'px; right: ' + thisRight + 'px;');
        self.set('selectorStyle', thisString);
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-container/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/navigation/tab/tab-container/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","navigation/tab/tab-nav",[],["model",["subexpr","@mut",[["get","option",["loc",[null,[7,41],[7,47]]]]],[],[]],"isActive","isActive"],["loc",[null,[7,10],[7,69]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 10
            },
            "end": {
              "line": 15,
              "column": 10
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/navigation/tab/tab-container/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","navigation/tab/tab-content",[],["model",["subexpr","@mut",[["get","option",["loc",[null,[14,47],[14,53]]]]],[],[]]],["loc",[null,[14,12],[14,55]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/navigation/tab/tab-container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 bp4-col-12");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","tab-nav");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","selector");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","tab-Content");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createUnsafeAttrMorph(element2, 'style');
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [4]),1,1);
        return morphs;
      },
      statements: [
        ["attribute","style",["get","selectorStyle",["loc",[null,[5,39],[5,52]]]]],
        ["block","each",[["get","options",["loc",[null,[6,16],[6,23]]]]],[],0,null,["loc",[null,[6,8],[8,17]]]],
        ["block","each",[["get","options",["loc",[null,[13,18],[13,25]]]]],[],1,null,["loc",[null,[13,10],[15,19]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-content/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNameBindings: 'active:active',
    'type': 'content'
  });

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 24
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/navigation/tab/tab-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.title",["loc",[null,[1,4],[1,19]]]],
        ["content","model.content",["loc",[null,[2,3],[2,20]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-nav/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: 'active:active',
    classNames: ['tab-nav-item'],
    tagName: 'li',
    'type': 'nav',
    click: function click() {
      this.set('active', true);
      this.sendAction('isActive', this);
    }
  });

});
define('base-method-ember-styleguide/pods/components/navigation/tab/tab-nav/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 15
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/navigation/tab/tab-nav/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","model.title",["loc",[null,[1,0],[1,15]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/breakpoint-nav/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/breakpoint-nav/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/category-page/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/category-page/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/code-tabs/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/code-tabs/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/colours-page/alert-block/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/colours-page/alert-block/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/colours-page/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/colours-page/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/colours-page/default-swatch/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/colours-page/default-swatch/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/colours-page/type-block/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/colours-page/type-block/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/component/tile-component/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    testModelA: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true,
      "isWatching": true
    },

    testModelB: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true,
      "isOnhold": true
    },

    testModelC: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true,
      "isPostponed": true
    },

    testModelD: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true,
      "isDelayed": true
    },

    testModel1: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true
    },

    testModel2: {
      "statusIsCatchUp": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
    },

    testModel3: {
      "statusIsComingSoon": true,
      "tournament": "Premiere League",
      "game": "Final",
      "team1_short": "Manchester United",
      "team2_short": "Arsenal",
      "team1_long": "Manchester United",
      "team2_long": "Arsenal FC",
      "team1_logo": "football/competitors/manchester-united.png",
      "team2_logo": "football/competitors/arsenal.png",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isTeamSport": true,
      "sport": "football"
    },

    testModel4: {
      "statusIsVOD": true,
      "title": "Cristiano Ronaldo: World at His Feet",
      "sport": "Football",
      "thumbnail": "football/fixtures/football_15.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
    },

    testModel8: {
      "stateIsCategory": true,
      "title": "Football",
      "thumbnail": "football-cat.jpg",
      "isSport": true,
      "sport": "football",
      "isStyleguide": true
    },

    testModel7: {
      "stateIsCategory": true,
      "title": "NFL",
      "thumbnail": "nfl.png",
      "tournamentBg": "nfl.jpg",
      "isTournament": true,
      "sport": "American Football",
      "isStyleguide": true
    },

    testModel6: {
      "stateIsCategory": true,
      "title": "Manchester United",
      "thumbnail": "football/competitors/manchester-united.png",
      "teamBg": "manu-bg.jpg",
      "isTeam": true,
      "sport": "football",
      "isStyleguide": true
    },

    testModel5: {
      "stateIsCategory": true,
      "title": "Roger Federrer",
      "thumbnail": "roger.jpg",
      "isPlayer": true,
      "sport": "tennis",
      "isStyleguide": true
    }

  });

});
define('base-method-ember-styleguide/pods/components/styleguide/component/tile-component/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 152,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/component/tile-component/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Watching ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Live ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Live ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("feature tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("On hold ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("on hold");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("On hold ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("postponed");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("On hold ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("delayed");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Catchup ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Catchup ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("feature tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Coming soon ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Coming soon ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("feature tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Related content ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Sport ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Competition ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Team ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row input-styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Player ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("standard tile");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 3]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6, 3]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [14, 3]),1,1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [16, 3]),1,1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [18, 3]),1,1);
        morphs[10] = dom.createMorphAt(dom.childAt(fragment, [20, 3]),1,1);
        morphs[11] = dom.createMorphAt(dom.childAt(fragment, [22, 3]),1,1);
        morphs[12] = dom.createMorphAt(dom.childAt(fragment, [24, 3]),1,1);
        morphs[13] = dom.createMorphAt(dom.childAt(fragment, [26, 3]),1,1);
        morphs[14] = dom.createMorphAt(dom.childAt(fragment, [28, 3]),1,1);
        return morphs;
      },
      statements: [
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModelA",["loc",[null,[6,29],[6,39]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[6,94],[6,99]]]]],[],[]]],["loc",[null,[6,4],[6,101]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel1",["loc",[null,[15,29],[15,39]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[15,94],[15,99]]]]],[],[]]],["loc",[null,[15,4],[15,101]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel1",["loc",[null,[25,27],[25,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[25,92],[25,97]]]]],[],[]],"isFeatured",true],["loc",[null,[25,2],[25,115]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModelB",["loc",[null,[34,29],[34,39]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[34,94],[34,99]]]]],[],[]]],["loc",[null,[34,4],[34,101]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModelC",["loc",[null,[43,29],[43,39]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[43,94],[43,99]]]]],[],[]]],["loc",[null,[43,4],[43,101]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModelD",["loc",[null,[52,29],[52,39]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[52,94],[52,99]]]]],[],[]]],["loc",[null,[52,4],[52,101]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel2",["loc",[null,[62,27],[62,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[62,92],[62,97]]]]],[],[]]],["loc",[null,[62,2],[62,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel2",["loc",[null,[72,27],[72,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[72,92],[72,97]]]]],[],[]],"isFeatured",true],["loc",[null,[72,2],[72,115]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel3",["loc",[null,[83,27],[83,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[83,92],[83,97]]]]],[],[]]],["loc",[null,[83,2],[83,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel3",["loc",[null,[93,27],[93,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[93,92],[93,97]]]]],[],[]],"isFeatured",true],["loc",[null,[93,2],[93,115]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel4",["loc",[null,[104,27],[104,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[104,92],[104,97]]]]],[],[]]],["loc",[null,[104,2],[104,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel8",["loc",[null,[114,27],[114,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[114,92],[114,97]]]]],[],[]]],["loc",[null,[114,2],[114,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel7",["loc",[null,[124,27],[124,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[124,92],[124,97]]]]],[],[]]],["loc",[null,[124,2],[124,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel6",["loc",[null,[134,27],[134,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[134,92],[134,97]]]]],[],[]]],["loc",[null,[134,2],[134,99]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel5",["loc",[null,[144,27],[144,37]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[144,92],[144,97]]]]],[],[]]],["loc",[null,[144,2],[144,99]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/demo-page/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/demo-page/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/colour-module/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    model: [{
      name: 'Dark Background',
      colours: [{
        name: 'dark background color',
        hex: '#000',
        use: 'Main background colour'
      },
      // {
      //   name: 'ligter background color',
      //   hex: '#333',
      // },
      {
        name: 'Clear font primary',
        hex: '#fff',
        use: 'Main font colour'
      }, {
        name: 'Clear font secondary',
        hex: '#aaa',
        use: 'Secondary font colour'
      }, {
        name: 'Clear font disabled',
        hex: '#808080',
        use: 'Disabled colour'
      }, {
        name: 'Clear font dividers',
        hex: '#343434',
        use: 'Divider colour'
      }]
    }, {
      name: 'Light Background',
      colours: [{
        name: 'light background color',
        hex: '#fff',
        use: 'Main background colour'
      },
      // {
      //   name: 'ligter background color',
      //   hex: '#333',
      // },
      {
        name: 'Dark font primary',
        hex: '#000',
        use: 'Main font colour'
      }, {
        name: 'Dark font secondary',
        hex: '#333',
        use: 'Secondary font colour'
      }, {
        name: 'Dark font disabled',
        hex: '#999',
        use: 'Disabled colour'
      }, {
        name: 'Dark font dividers',
        hex: '#ccc',
        use: 'Divider colour'
      }]
    }, {
      name: 'Tiles',
      colours: [{
        name: 'Red',
        hex: '#D6263A',
        use: 'Live, catch up and coming soon tile badges. Error state.'
      }, {
        name: 'Orange',
        hex: '#D85F00',
        use: 'Round up tile badge'
      },
      // {
      //   name: 'Blue',
      //   hex: '#0050A8'
      // },
      {
        name: 'Dark purple',
        hex: '#22192B',
        use: 'Catch up tile background'
      }, {
        name: 'Dark blue',
        hex: '#1D262F',
        use: 'Coming soon tile background'
      }, {
        name: 'Dark red',
        hex: '#281616',
        use: 'Category tile background (player, team, tournament or sport)'
      }, {
        name: 'Dark grey',
        hex: '#2F2828',
        use: 'All other tile backgrounds'
      }, {
        name: 'Burgundy',
        hex: '#820000',
        use: 'Tile label - on hold'
      }]
    }]
  });

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/colour-module/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 29,
                "column": 4
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/colour-module/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","mt-row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","bp1-col-3 bp3-col-4");
            var el3 = dom.createTextNode("\n\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","color-swatch");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4,"class","title");
            var el5 = dom.createTextNode("\n            Name\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4,"class","content");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","bp1-col-1 bp3-col-4");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","title");
            var el4 = dom.createTextNode("HEX code");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","content");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","title");
            var el4 = dom.createTextNode("Use");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","content");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element1, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element2, 'style');
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3, 3]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 3]),0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 3]),0,0);
            return morphs;
          },
          statements: [
            ["attribute","style",["concat",["background-color:",["get","colour.hex",["loc",[null,[12,60],[12,70]]]]]]],
            ["content","colour.name",["loc",[null,[17,31],[17,46]]]],
            ["content","colour.hex",["loc",[null,[22,29],[22,43]]]],
            ["content","colour.use",["loc",[null,[26,29],[26,43]]]]
          ],
          locals: ["colour"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/colour-module/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),0,0);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","category.name",["loc",[null,[5,10],[5,27]]]],
          ["block","each",[["get","category.colours",["loc",[null,[8,12],[8,28]]]]],[],0,null,["loc",[null,[8,4],[29,13]]]]
        ],
        locals: ["category"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/colour-module/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container limited-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[2,8],[2,13]]]]],[],0,null,["loc",[null,[2,0],[34,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/experience-principles/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // contentmodel: [
    //   {
    //     'title': 'Be confident in our offering.',
    //     'description': 'Livesport has a sporting pedigree second to none. The viewer should feel comfortable enough to let the system suggest the best content for them.'
    //   },
    //   {
    //     'title': 'Champion video content.',
    //     'description': 'Content is our most valuable asset. Don’t leave it on the sidelines.'
    //   },
    //   {
    //     'title': 'Delight is in the detail.',
    //     'description': 'We should take inspiration from the tried and tested, but improve it with obsessive attention to detail. We’re changing the game, not inventing a new one.'
    //   },
    //   {
    //     'title': 'Maintain consistent energy.',
    //     'description': 'Sport is about excitement, anticipation and energy. The interface should reflect this at every opportunity.'
    //   },
    //   {
    //     'title': 'Celebrate with the crowd.',
    //     'description': 'Watching the game at home on your own doesn’t have to mean that you’re alone.'
    //   },
    //   {
    //     'title': 'Empower the individual.',
    //     'description': 'Every aspect of the experience should be encouraging and motivational – much like a personal trainer.'
    //   }
    // ]
  });

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/experience-principles/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/experience-principles/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    iconGroup: [{
      name: 'Brand Icons',
      description: 'Brand icons are used within the graphic design language to badge content and add brand presence. e.g. the help section',
      icons: [{
        title: "Reminders",
        'class': "iconfont iconfont-ls_icon_reminder"
      }, {
        title: "Payment details",
        'class': "iconfont iconfont-ls_icon_payment"
      }, {
        title: "Terms and Conditions",
        'class': "iconfont iconfont-ls_icon_document"
      }, {
        title: "Manage my account",
        'class': "iconfont iconfont-ls_icon_profile"
      }, {
        title: "Notification2",
        'class': "iconfont iconfont-ls_icon_notification"
      }, {
        title: "Warning",
        'class': "iconfont iconfont-ls_icon_warning"
      }, {
        title: "Versus",
        'class': "iconfont iconfont-ls_icon_versus"
      }, {
        title: "Download",
        'class': "iconfont iconfont-ls_icon_download2"
      }, {
        title: "Mobile",
        'class': "iconfont iconfont-ls_icon_mobile"
      }, {
        title: "Tablet",
        'class': "iconfont iconfont-ls_icon_tablet"
      }, {
        title: "Desktop",
        'class': "iconfont iconfont-ls_icon_desktop"
      }, {
        title: "TV",
        'class': "iconfont iconfont-ls_icon_tv"
      }, {
        title: "Console",
        'class': "iconfont iconfont-ls_icon_console"
      }, {
        title: "Info",
        'class': "iconfont iconfont-ls_icon_info"
      }, {
        title: "Contact us",
        'class': "iconfont iconfont-ls_icon_email3"
      }, {
        title: "Ticket insert price",
        'class': "iconfont iconfont-ls_icon_ticket"
      }, {
        title: "Technical Issues",
        'class': "iconfont iconfont-ls_icon_technical"
      }, {
        title: "FAQ",
        'class': "iconfont iconfont-ls_icon_faq"
      }, {
        title: "Getting Started",
        'class': "iconfont iconfont-ls_icon_start"
      }, {
        title: "Privacy Policy",
        'class': "iconfont iconfont-ls_icon_privacy"
      }, {
        title: "Sign Out",
        'class': "iconfont iconfont-ls_icon_signout"
      }, {
        title: "Watching DAZN",
        'class': "iconfont iconfont-ls_icon_watching"
      }]
    }, {
      name: 'Functional Icons',
      description: 'Functional icons are used for functional elements within the interface. e.g. the player.',
      icons: [{
        title: "Pause",
        'class': "iconfont iconfont-ls_icon_pause",
        small: true
      }, {
        title: "Play",
        'class': "iconfont iconfont-ls_icon_play",
        small: true
      }, {
        title: "Skip Back",
        'class': "iconfont iconfont-ls_icon_skipback",
        small: true
      }, {
        title: "Skip Forward",
        'class': "iconfont iconfont-ls_icon_skipforward",
        small: true
      }, {
        title: "Rewind",
        'class': "iconfont iconfont-ls_icon_rewind",
        small: true
      }, {
        title: "Fast Forward",
        'class': "iconfont iconfont-ls_icon_fastforward",
        small: true
      }, {
        title: "Back 30s",
        'class': "iconfont iconfont-ls_icon_back30",
        small: true
      }, {
        title: "Mute",
        'class': "iconfont iconfont-ls_icon_mute",
        small: true
      }, {
        title: "Volume Max",
        'class': "iconfont iconfont-ls_icon_volume",
        small: true
      }, {
        title: "Maximize",
        'class': "iconfont iconfont-ls_icon_expand",
        small: true
      }, {
        title: "Minimize",
        'class': "iconfont iconfont-ls_icon_collapse",
        small: true
      }, {
        title: "Data",
        'class': "iconfont iconfont-ls_icon_data",
        small: true
      }, {
        title: "Camera angle",
        'class': "iconfont iconfont-ls_icon_camera",
        small: true
      }, {
        title: "Settings",
        'class': "iconfont iconfont-ls_icon_settings",
        small: true
      }, {
        title: "Share",
        'class': "iconfont iconfont-ls_icon_share",
        small: true
      }, {
        title: "More options",
        'class': "iconfont iconfont-ls_icon_more",
        small: true
      }, {
        title: "Airplay",
        'class': "iconfont iconfont-ls_icon_airplay",
        small: true
      }, {
        title: "Follow",
        'class': "iconfont iconfont-ls_icon_plus",
        small: true
      }, {
        title: "Subtitles",
        'class': "iconfont iconfont-ls_icon_subtitles",
        small: true
      }, {
        title: "Email",
        'class': "iconfont iconfont-ls_icon_email2",
        small: true
      }, {
        title: "Search",
        'class': "iconfont iconfont-ls_icon_search",
        small: true
      }, {
        title: "Live Chat",
        'class': "iconfont iconfont-ls_icon_livechat",
        small: true
      }, {
        title: "Asterisk",
        'class': "iconfont iconfont-ls_icon_asterisk",
        small: true
      }, {
        title: "Back",
        'class': "iconfont iconfont-ls_icon_back",
        small: true
      }, {
        title: "Download",
        'class': "iconfont iconfont-ls_icon_download",
        small: true
      }, {
        title: "Arrow Big",
        'class': "iconfont iconfont-ls_icon_arrow",
        small: true
      }, {
        title: "Arrow Small",
        'class': "iconfont iconfont-ls_icon_arrow_small",
        small: true
      }, {
        title: "Arrow Branded",
        'class': "iconfont iconfont-ls_icon_arrow_brand",
        small: true
      }, {
        title: "Close",
        'class': "iconfont iconfont-ls_icon_close",
        small: true
      }, {
        title: "Tick",
        'class': "iconfont iconfont-ls_icon_check",
        small: true
      }]
    }]
  });

  // {
  //   name: 'Arrows',
  //   icons: [
  //     {
  //       title: "Arrow Up",
  //       class: "iconfont iconfont-ls_icon_arrow_up"
  //     },
  //     {
  //       title: "Arrow Down",
  //       class: "iconfont iconfont-ls_icon_arrow_down"
  //     },
  //     {
  //       title: "Arrow Left",
  //       class: "iconfont iconfont-ls_icon_arrow_left"
  //     },
  //     {
  //       title: "Arrow Right",
  //       class: "iconfont iconfont-ls_icon_arrow_right"
  //     },
  //     {
  //       title: "Small Arrow Up",
  //       class: "iconfont iconfont-ls_icon_arrow_sml_up"
  //     },
  //     {
  //       title: "Small Arrow Down",
  //       class: "iconfont iconfont-ls_icon_arrow_sml_down"
  //     },
  //     {
  //       title: "Small Arrow Left",
  //       class: "iconfont iconfont-ls_icon_arrow_sml_left"
  //     },
  //     {
  //       title: "Small Arrow Right",
  //       class: "iconfont iconfont-ls_icon_arrow_sml_right"
  //     },
  //   ]
  // },
  // {
  //   name: 'Devices',
  //   icons: [

  //     {
  //       title: "Console",
  //       class: "iconfont iconfont-ls_icon_console"
  //     },
  //     {
  //       title: "Desktop",
  //       class: "iconfont iconfont-ls_icon_desktop"
  //     },
  //     {
  //       title: "Mobile",
  //       class: "iconfont iconfont-ls_icon_mobile"
  //     },
  //     {
  //       title: "Tablet",
  //       class: "iconfont iconfont-ls_icon_tablet"
  //     },
  //     {
  //       title: "TV",
  //       class: "iconfont iconfont-ls_icon_tv"
  //     },

  //   ]
  // },
  // {
  //   name: 'Player controls',
  //   icons: [

  //     {
  //       title: "Play",
  //       class: "iconfont iconfont-ls_icon_play"
  //     },
  //     {
  //       title: "Pause",
  //       class: "iconfont iconfont-ls_icon_pause"
  //     },
  //     {
  //       title: "Rewind",
  //       class: "iconfont iconfont-ls_icon_rewind"
  //     },
  //     {
  //       title: "Fast Forward",
  //       class: "iconfont iconfont-ls_icon_fastforward"
  //     },

  //     {
  //       title: "Skip Back",
  //       class: "iconfont iconfont-ls_icon_skipback"
  //     },
  //     {
  //       title: "Skip Forward",
  //       class: "iconfont iconfont-ls_icon_skipforward"
  //     },

  //     {
  //       title: "Mute",
  //       class: "iconfont iconfont-ls_icon_mute"
  //     },

  //     {
  //       title: "Volume",
  //       class: "iconfont iconfont-ls_icon_volume"
  //     },
  //     {
  //       title: "Collapse",
  //       class: "iconfont iconfont-ls_icon_collapse"
  //     },
  //     {
  //       title: "Collapse option 2",
  //       class: "iconfont iconfont-ls_icon_collapse2"
  //     },
  //     {
  //       title: "Expand",
  //       class: "iconfont iconfont-ls_icon_expand"
  //     },
  //     {
  //       title: "Expand option 2",
  //       class: "iconfont iconfont-ls_icon_expand2"
  //     },
  //     // {
  //     //   title: "HD",
  //     //   class: "iconfont iconfont-ls_icon_hd"
  //     // },
  //     {
  //       title: "Camera angle",
  //       class: "iconfont iconfont-ls_icon_camera"
  //     },

  //     {
  //       title: "Airplay",
  //       class: "iconfont iconfont-ls_icon_airplay"
  //     },

  //     {
  //       title: "Rewind 30s",
  //       class: "iconfont iconfont-ls_icon_back30"
  //     },

  //     {
  //       title: "Subtitles",
  //       class: "iconfont iconfont-ls_icon_subtitles"
  //     },

  //     {
  //       title: "Subtitles option 2",
  //       class: "iconfont iconfont-ls_icon_subtitles2"
  //     },

  //     {
  //       title: "Download",
  //       class: "iconfont iconfont-ls_icon_download"
  //     },

  //     {
  //       title: "Data",
  //       class: "iconfont iconfont-ls_icon_data"
  //     },

  //     {
  //       title: "Data option 2",
  //       class: "iconfont iconfont-ls_icon_data2"
  //     },

  //   ]
  // },
  // {
  //   name: 'Navigation',
  //   icons: [
  //     {
  //       title: "Back",
  //       class: "iconfont iconfont-ls_icon_back"
  //     },
  //     {
  //       title: "Close",
  //       class: "iconfont iconfont-ls_icon_close"
  //     },
  //     {
  //       title: "FAQ",
  //       class: "iconfont iconfont-ls_icon_faq"
  //     },

  //     {
  //       title: "More",
  //       class: "iconfont iconfont-ls_icon_more"
  //     },
  //     // {
  //     //   title: "Menu",
  //     //   class: "iconfont iconfont-ls_icon_menu"
  //     // },
  //     // {
  //     //   title: "Navigtation Arrow",
  //     //   class: "iconfont iconfont-ls_icon_nav_arrow"
  //     // },
  //     // {
  //     //   title: "Navigtation Arrow 2",
  //     //   class: "iconfont iconfont-ls_icon_nav_arrow2"
  //     // },

  //     {
  //       title: "Privacy Policy",
  //       class: "iconfont iconfont-ls_icon_privacy"
  //     },
  //     {
  //       title: "Search",
  //       class: "iconfont iconfont-ls_icon_search"
  //     },
  //     {
  //       title: "Settings",
  //       class: "iconfont iconfont-ls_icon_settings"
  //     },
  //     // {
  //     //   title: "Cross",
  //     //   class: "iconfont iconfont-ls_icon_cross"
  //     // },
  //     // {
  //     //   title: "Cross Small",
  //     //   class: "iconfont iconfont-ls_icon_cross_sml"
  //     // },
  //   ]
  // },
  // {
  //   name: 'User',
  //   icons: [
  //     {
  //       title: "Profile",
  //       class: "iconfont iconfont-ls_icon_profile"
  //     },
  //     // {
  //     //   title: "Sign in",
  //     //   class: "iconfont iconfont-ls_icon_signin"
  //     // },
  //     {
  //       title: "Sign Out",
  //       class: "iconfont iconfont-ls_icon_signout"
  //     },
  //   ]
  // },
  // {
  //   name: 'Communication',
  //   icons: [
  //     {
  //       title: "Email",
  //       class: "iconfont iconfont-ls_icon_email"
  //     },
  //     {
  //       title: "Email option 2",
  //       class: "iconfont iconfont-ls_icon_email2"
  //     },
  //     {
  //       title: "Email brand",
  //       class: "iconfont iconfont-ls_icon_email3"
  //     },
  //     {
  //       title: "Share",
  //       class: "iconfont iconfont-ls_icon_share"
  //     },
  //     {
  //       title: "Follow",
  //       class: "iconfont iconfont-ls_icon_plus"
  //     },
  //     {
  //       title: "Live Chat",
  //       class: "iconfont iconfont-ls_icon_livechat"
  //     },
  //   ]
  // },
  // {
  //   name: 'Alerts & Notifications',
  //   icons: [
  //     {
  //       title: "Info",
  //       class: "iconfont iconfont-ls_icon_info"
  //     },
  //     {
  //       title: "Notification",
  //       class: "iconfont iconfont-ls_icon_notification"
  //     },
  //     {
  //       title: "Reminder",
  //       class: "iconfont iconfont-ls_icon_reminder"
  //     },
  //     {
  //       title: "Technical Issues",
  //       class: "iconfont iconfont-ls_icon_technical"
  //     },
  //     {
  //       title: "Warning",
  //       class: "iconfont iconfont-ls_icon_warning"
  //     },
  //   ]
  // },
  // {
  //   name: 'System',
  //   icons: [

  //     {
  //       title: "Asterisk",
  //       class: "iconfont iconfont-ls_icon_asterisk"
  //     },
  //     {
  //       title: "Check",
  //       class: "iconfont iconfont-ls_icon_check"
  //     },
  //     // {
  //     //   title: "Cloud",
  //     //   class: "iconfont iconfont-ls_icon_cloud"
  //     // },

  //     {
  //       title: "Document",
  //       class: "iconfont iconfont-ls_icon_document"
  //     },

  //     // {
  //     //   title: "Favourite",
  //     //   class: "iconfont iconfont-ls_icon_favourite"
  //     // },

  //     // {
  //     //   title: "Print",
  //     //   class: "iconfont iconfont-ls_icon_print"
  //     // },

  //     // {
  //     //   title: "Waiting",
  //     //   class: "iconfont iconfont-ls_icon_waiting"
  //     // },

  //   ]
  // },
  // {
  //   name: 'Miscellaneous',
  //   icons: [
  //     {
  //       title: "Download - Brand",
  //       class: "iconfont iconfont-ls_icon_download2"
  //     },
  //     {
  //       title: "Getting Started",
  //       class: "iconfont iconfont-ls_icon_start"
  //     },
  //     {
  //       title: "Payment",
  //       class: "iconfont iconfont-ls_icon_payment"
  //     },
  //     {
  //       title: "Ticket",
  //       class: "iconfont iconfont-ls_icon_ticket"
  //     },

  //     {
  //       title: "Versus",
  //       class: "iconfont iconfont-ls_icon_versus"
  //     },
  //     {
  //       title: "Watching DAZN",
  //       class: "iconfont iconfont-ls_icon_watching"
  //     }
  //   ]
  // }

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","icon-x1");
              var el2 = dom.createElement("span");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeAttrMorph(element0, 'class');
              return morphs;
            },
            statements: [
              ["attribute","class",["get","icon.class",["loc",[null,[18,47],[18,57]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-2 bp3-col-3");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","icon-block");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h4");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h5");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","vertical-align");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","icon-x2");
            var el5 = dom.createElement("span");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var element2 = dom.childAt(element1, [5]);
            var element3 = dom.childAt(element2, [1, 0]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
            morphs[2] = dom.createUnsafeAttrMorph(element3, 'class');
            morphs[3] = dom.createMorphAt(element2,3,3);
            return morphs;
          },
          statements: [
            ["content","icon.title",["loc",[null,[13,10],[13,24]]]],
            ["content","icon.class",["loc",[null,[14,10],[14,24]]]],
            ["attribute","class",["get","icon.class",["loc",[null,[16,45],[16,55]]]]],
            ["block","if",[["get","icon.small",["loc",[null,[17,14],[17,24]]]]],[],0,null,["loc",[null,[17,8],[19,15]]]]
          ],
          locals: ["icon"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3,"class","group-title");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3,"class","description");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]),0,0);
          morphs[2] = dom.createMorphAt(element4,3,3);
          return morphs;
        },
        statements: [
          ["content","group.name",["loc",[null,[6,8],[6,22]]]],
          ["content","group.description",["loc",[null,[8,29],[8,50]]]],
          ["block","each",[["get","group.icons",["loc",[null,[10,10],[10,21]]]]],[],0,null,["loc",[null,[10,2],[23,11]]]]
        ],
        locals: ["group"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/icon-font/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","iconGroup",["loc",[null,[2,8],[2,17]]]]],[],0,null,["loc",[null,[2,0],[25,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/responsive-grid/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/responsive-grid/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 178,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/responsive-grid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Grid");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-24  bp5-col-32");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("Full width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-4  bp3-col-6  bp4-col-12  bp5-col-16");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/2 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-4  bp3-col-6  bp4-col-12  bp5-col-16");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/2 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/4 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/4 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/4 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1/4 width");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("2 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("1 Col");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/typography-module/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    model: [{
      size: 'X-Small',
      mobile: '12px / 0.875em',
      desktop: 'not used',
      weight: '300 (regular)',
      font: 'Helvetica',
      'case': 'Regular case',
      use: 'To be used in tiles only as a fallback when there content is too long'
    }, {
      size: 'Small',
      mobile: '14px / 1em',
      desktop: '14px / 0.875em',
      weight: '300 (regular)',
      font: 'Helvetica + Gridnick',
      'case': 'Upper and lower case for Helvetica, Uppercase only for Gridnick',
      use: 'Labels + conditions paragraphs in form fields - Gridnick for links only'
    }, {
      size: 'Regular',
      mobile: '14px / 1em',
      desktop: '16px / 1em',
      weight: '300 (regular) - 600 (bold)',
      font: 'Helvetica + Gridnick',
      'case': 'Upper and lower case for Helvetica, Uppercase only for Gridnick',
      use: 'Copy - Gridnick for links only'
    }, {
      size: 'Large',
      mobile: '18px / 1.286em',
      desktop: '20px / 1.25em',
      weight: 'Gridnick (Medium, Regular) | Helvetica (Regular)',
      font: 'Gridnick + Helvetica',
      'case': 'Upper and lower case',
      use: 'Copy + Helvetica for input fields'
    }, {
      size: 'XL',
      mobile: '24px / 1.714em',
      desktop: '28px / 1.75em',
      weight: 'Medium, Regular',
      font: 'Helvetica only',
      'case': 'Upper and lower case',
      use: 'Header'
    }, {
      size: 'XXL',
      mobile: '32px / 2.286em',
      desktop: '48px / 3em',
      weight: 'Bold, Medium',
      font: 'Gridnick only',
      'case': 'Upper case only',
      use: 'Header'
    }, {
      size: 'XXXL',
      mobile: '48px  / 3.429em',
      desktop: '72px / 4.5em',
      weight: 'Bold, Medium',
      font: 'Gridnick only',
      'case': 'Upper and lower case',
      use: 'Hero content'
    }]

  });

});
define('base-method-ember-styleguide/pods/components/styleguide/foundation/typography-module/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/typography-module/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","table-row");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell left-header");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","table-cell");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]),1,1);
          morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]),1,1);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [13]),1,1);
          return morphs;
        },
        statements: [
          ["content","item.size",["loc",[null,[26,8],[26,21]]]],
          ["content","item.mobile",["loc",[null,[29,8],[29,23]]]],
          ["content","item.desktop",["loc",[null,[32,8],[32,24]]]],
          ["content","item.weight",["loc",[null,[35,8],[35,23]]]],
          ["content","item.font",["loc",[null,[38,8],[38,21]]]],
          ["content","item.case",["loc",[null,[41,8],[41,21]]]],
          ["content","item.use",["loc",[null,[44,8],[44,20]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 108,
            "column": 65
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/foundation/typography-module/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","table-row header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Mobile Size\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Desktop Size\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Available Weights\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Font face\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Casing\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","table-cell");
        var el4 = dom.createTextNode("\n      Usage\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("XXXL");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("bold");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"class","bold");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase bold");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"class","bold uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"class","medium");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"class","medium uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("XXL");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("bold");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","bold");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","medium");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("XL");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1,"class","medium");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1,"class","medium uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1,"class","regular");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1,"class","regular uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("Large");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick bold");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","bold");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick Uppercase bold");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","bold uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","medium");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick Uppercase medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","medium uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","regular");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Gridnick Uppercase regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","regular uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Helvetica regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","regular-helvet");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Helvetica Uppercase regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","regular-helvet uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("Regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h5");
        dom.setAttribute(el1,"class","bold");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase medium");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h5");
        dom.setAttribute(el1,"class","bold uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h5");
        dom.setAttribute(el1,"class","regular");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("Uppercase regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h5");
        dom.setAttribute(el1,"class","regular uppercase");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","subtitle");
        var el2 = dom.createTextNode("Small");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","title");
        var el2 = dom.createTextNode("regular");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),3,3);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[23,10],[23,15]]]]],[],0,null,["loc",[null,[23,2],[47,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/navigation/nav-tab/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    actions: {
      selectTab: function selectTab(option) {
        console.log(option);
      }
    },

    setClass: Ember['default'].computed('options', function () {}),

    options: Ember['default'].computed(function () {

      var options = [{
        'title': 'Tab 1',
        'content': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque tristique congue dolor nec varius. Donec sit amet luctus lorem. Maecenas nec orci ornare, viverra magna a, convallis massa.'
      }, {
        'title': 'Tab 2',
        'content': 'Maecenas eu commodo nisi. Duis non tellus suscipit nisl pulvinar vehicula non eu tellus. Nunc sodales interdum eros eget tincidunt.'
      }, {
        'title': 'Tab 3',
        'content': ' Phasellus non urna dignissim, dignissim nibh eget, consequat ante. Mauris nisl nisi, aliquet non mauris condimentum, laoreet pulvinar eros.'
      }];

      return options;
    })

  });

});
define('base-method-ember-styleguide/pods/components/styleguide/navigation/nav-tab/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/navigation/nav-tab/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["get","setClass",["loc",[null,[6,20],[6,28]]]]],
          ["element","action",["selectTab",["get","option",["loc",[null,[6,55],[6,61]]]]],[],["loc",[null,[6,34],[6,63]]]],
          ["content","option.title",["loc",[null,[6,64],[6,80]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/navigation/nav-tab/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h2");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["get","setClass",["loc",[null,[12,18],[12,26]]]]],
          ["content","option.title",["loc",[null,[13,12],[13,28]]]],
          ["content","option.content",["loc",[null,[14,11],[14,29]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/navigation/nav-tab/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 bp4-col-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","tab-nav");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","tab-Content");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","options",["loc",[null,[5,14],[5,21]]]]],[],0,null,["loc",[null,[5,6],[7,15]]]],
        ["block","each",[["get","options",["loc",[null,[11,14],[11,21]]]]],[],1,null,["loc",[null,[11,6],[16,15]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/page-wrapper/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/page-wrapper/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/side-nav/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/side-nav/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 10
              },
              "end": {
                "line": 10,
                "column": 10
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","download");
            dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","iconfont iconfont-ls_icon_download");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Download File");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","docLink",["loc",[null,[9,38],[9,45]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","section-title");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","mt-container limited-container");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","mt-row");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","bp1-col-4");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","small-container");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("h1");
          dom.setAttribute(el6,"class","title");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0, 1, 1, 1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
          morphs[1] = dom.createMorphAt(element1,3,3);
          return morphs;
        },
        statements: [
          ["content","title",["loc",[null,[7,28],[7,37]]]],
          ["block","if",[["get","docLink",["loc",[null,[8,16],[8,23]]]]],[],0,null,["loc",[null,[8,10],[10,17]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-container");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[19,6],[19,15]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-container limited-container");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[23,6],[23,15]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/styleguide-wrapper/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","header",["loc",[null,[1,6],[1,12]]]]],[],0,null,["loc",[null,[1,0],[16,7]]]],
        ["block","if",[["get","unlimitedContainer",["loc",[null,[17,6],[17,24]]]]],[],1,2,["loc",[null,[17,0],[25,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/test/typography-test/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    testModel1: Ember['default'].computed(function () {

      var model = {
        "statusIsLive": true,
        "tournament": "Wimbledon 2015",
        "game": "Men's Final",
        "team1_short": "R. Nadal",
        "team2_short": "R. Federer",
        "team1_long": "Rafael Nadal",
        "team2_long": "Roger Federer",
        "thumbnail": "tennis/fixtures/tennis_7.jpg",
        "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
        "isFeatured": true
      };

      return model;
    }),

    testModel2: Ember['default'].computed(function () {

      var model = {
        "statusIsCatchUp": true,
        "tournament": "Wimbledon 2015",
        "game": "Men's Final",
        "team1_short": "R. Nadal",
        "team2_short": "R. Federer",
        "team1_long": "Rafael Nadal",
        "team2_long": "Roger Federer",
        "thumbnail": "tennis/fixtures/tennis_7.jpg",
        "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
      };

      return model;
    }),

    testModel3: Ember['default'].computed(function () {

      var model = {
        "statusIsComingSoon": true,
        "tournament": "Premiere League",
        "game": "Final",
        "team1_short": "Manchester United",
        "team2_short": "Arsenal",
        "team1_long": "Manchester United",
        "team2_long": "Arsenal FC",
        "team1_logo": "football/competitors/manchester-united.png",
        "team2_logo": "football/competitors/arsenal.png",
        "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
        "isTeamSport": true
      };

      return model;
    }),

    testModel4: Ember['default'].computed(function () {

      var model = {
        "statusIsVOD": true,
        "title": "Cristiano Ronaldo: World at His Feet",
        "sport": "Football",
        "thumbnail": "football/fixtures/football_15.jpg",
        "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
      };

      return model;
    }),

    testModel5: Ember['default'].computed(function () {

      var model = {
        "stateIsCategory": true,
        "title": "Manchester United",
        "thumbnail": "football/competitors/manchester-united.png"
      };

      return model;
    })

  });

});
define('base-method-ember-styleguide/pods/components/styleguide/test/typography-test/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/test/typography-test/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","wrapper");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Gridnick");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row font2");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Prometo");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row font3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("Brown");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element0, [5]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(element1,3,3);
        morphs[1] = dom.createMorphAt(element1,5,5);
        morphs[2] = dom.createMorphAt(element1,7,7);
        morphs[3] = dom.createMorphAt(element1,9,9);
        morphs[4] = dom.createMorphAt(element1,11,11);
        morphs[5] = dom.createMorphAt(element2,3,3);
        morphs[6] = dom.createMorphAt(element2,5,5);
        morphs[7] = dom.createMorphAt(element2,7,7);
        morphs[8] = dom.createMorphAt(element2,9,9);
        morphs[9] = dom.createMorphAt(element2,11,11);
        morphs[10] = dom.createMorphAt(element3,3,3);
        morphs[11] = dom.createMorphAt(element3,5,5);
        morphs[12] = dom.createMorphAt(element3,7,7);
        morphs[13] = dom.createMorphAt(element3,9,9);
        morphs[14] = dom.createMorphAt(element3,11,11);
        return morphs;
      },
      statements: [
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel1",["loc",[null,[5,33],[5,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[5,98],[5,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[5,115],[5,131]]]]],[],[]]],["loc",[null,[5,8],[5,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel2",["loc",[null,[6,33],[6,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[6,98],[6,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[6,115],[6,131]]]]],[],[]]],["loc",[null,[6,8],[6,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel3",["loc",[null,[7,33],[7,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[7,98],[7,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[7,115],[7,131]]]]],[],[]]],["loc",[null,[7,8],[7,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel4",["loc",[null,[8,33],[8,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[8,98],[8,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[8,115],[8,131]]]]],[],[]]],["loc",[null,[8,8],[8,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel5",["loc",[null,[9,33],[9,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[9,98],[9,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[9,115],[9,131]]]]],[],[]]],["loc",[null,[9,8],[9,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel1",["loc",[null,[13,33],[13,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[13,98],[13,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[13,115],[13,131]]]]],[],[]]],["loc",[null,[13,8],[13,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel2",["loc",[null,[14,33],[14,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[14,98],[14,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[14,115],[14,131]]]]],[],[]]],["loc",[null,[14,8],[14,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel3",["loc",[null,[15,33],[15,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[15,98],[15,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[15,115],[15,131]]]]],[],[]]],["loc",[null,[15,8],[15,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel4",["loc",[null,[16,33],[16,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[16,98],[16,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[16,115],[16,131]]]]],[],[]]],["loc",[null,[16,8],[16,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel5",["loc",[null,[17,33],[17,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[17,98],[17,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[17,115],[17,131]]]]],[],[]]],["loc",[null,[17,8],[17,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel1",["loc",[null,[21,33],[21,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[21,98],[21,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[21,115],[21,131]]]]],[],[]]],["loc",[null,[21,8],[21,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel2",["loc",[null,[22,33],[22,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[22,98],[22,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[22,115],[22,131]]]]],[],[]]],["loc",[null,[22,8],[22,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel3",["loc",[null,[23,33],[23,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[23,98],[23,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[23,115],[23,131]]]]],[],[]]],["loc",[null,[23,8],[23,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel4",["loc",[null,[24,33],[24,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[24,98],[24,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[24,115],[24,131]]]]],[],[]]],["loc",[null,[24,8],[24,133]]]],
        ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","testModel5",["loc",[null,[25,33],[25,43]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[25,98],[25,103]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[25,115],[25,131]]]]],[],[]]],["loc",[null,[25,8],[25,133]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/tile-wrapper/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['isFeatured:isFeatured', 'hideFeatured:hide-feature'],
    isFeatured: false,
    actions: {
      featured: function featured() {
        var self = this;
        self.toggleProperty('isFeatured');
        var theChild = self.get('childViews');
        theChild.forEach(function (tile) {
          if (!self.get('hideFeatured')) {
            tile.toggleProperty('isFeatured', true);
          }
        });
      }
    },
    initFunction: function initFunction() {
      this._super();
      var self = this;
      var theChild = self.get('childViews');
      theChild.forEach(function (tile) {
        if (tile.get('model.stateIsCategory')) {
          self.set('hideFeatured', true);
        }
      });
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/styleguide/tile-wrapper/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 63
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/styleguide/tile-wrapper/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","featured");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el2 = dom.createTextNode("Featured Tile");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[3,4],[3,13]]]],
        ["element","action",["featured"],[],["loc",[null,[6,22],[6,43]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/styleguide/view-page/component', ['exports', 'ember-cli-ui-lib-metadata/pods/components/styleguide/view-page/component'], function (exports, component) {

	'use strict';



	exports['default'] = component['default'];

});
define('base-method-ember-styleguide/pods/components/web/error-message/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: 'error',
    classNameBindings: ['open:is-open:is-close'],
    compoName: 'error',
    actions: {
      close: function close() {
        this.set('open', false);
      }
    }

  });

});
define('base-method-ember-styleguide/pods/components/web/error-message/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/error-message/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container limited-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","close");
        dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_close");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","icon");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_technical");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","content");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5,"class","header");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","title");
        var el7 = dom.createTextNode("Lorem ipsum dolor sit amet");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","sub-title");
        var el7 = dom.createTextNode("(consectetur adipiscing)");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        dom.setAttribute(el5,"class","text");
        var el6 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi porta mollis nisl et ullamcorper. Interdum et malesuada fames ac ante ipsum primis in faucibus.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["close"],[],["loc",[null,[4,25],[4,43]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/global-footer/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    actions: {
      changeEnGb: function changeEnGb() {
        this.get('i18n').set('locale', 'en-gb');
        this.get('storage').set('locale', 'en-gb');
      },

      changeDeDe: function changeDeDe() {
        this.get('i18n').set('locale', 'de-de');
        this.get('storage').set('locale', 'de-de');
      },

      changeJaJp: function changeJaJp() {
        this.get('i18n').set('locale', 'ja-jp');
        this.get('storage').set('locale', 'ja-jp');
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/global-footer/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/global-footer/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-24  bp5-col-32");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("footer");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Terms of Use");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" |");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Privacy policy");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" |");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Company detail");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" |");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("en-gb");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" |");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("de-de");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" |");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("ja-jp");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n	    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1, 1]);
        var element1 = dom.childAt(element0, [7, 0]);
        var element2 = dom.childAt(element0, [9, 0]);
        var element3 = dom.childAt(element0, [11, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["element","action",["changeEnGb"],[],["loc",[null,[9,17],[9,40]]]],
        ["element","action",["changeDeDe"],[],["loc",[null,[10,17],[10,40]]]],
        ["element","action",["changeJaJp"],[],["loc",[null,[11,17],[11,40]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/global-header/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['slideUpNav:slide-up', 'exploreState:explore', 'searchState:search', 'subnavOpen:sub-navbar-open', 'nonVideo:non-video', 'openDropdown:open-dropdown', 'mouseSelect:mouse-select'],
    exploreState: false,
    searchState: false,
    showHeaderHome: false,
    showHeaderCompetitorCompetition: false,
    subnavOpen: false,
    firstRun: true,
    observeFocus: Ember['default'].observer('slideUpNav', function () {
      var self = this;

      if (self.get('exploreState') || self.get('searchState')) {
        self.set('slideUpNav', false);
      }
    }),

    actions: {
      railSelected: function railSelected(item) {
        var self = this;
        console.log('railSelected');
        self.set('exploreState', false);
        self.set('subnavOpen', false);
        Ember['default'].$('body, html').css({ overflow: 'auto' });

        var offset = Ember['default'].$('#rail-' + item.id).offset().top;
        Ember['default'].$('body').animate({ scrollTop: offset });
      },

      routeChange: function routeChange(model) {
        console.log('global-header - routeChange ' + model.id);
        this.sendAction('routeChange', model);
      },

      dropdown: function dropdown(btnInfo) {
        var self = this;
        self.toggleProperty('openDropdown');
        self.set('subnavOpen', false);
        self.set('exploreState', false);
        self.set('searchState', false);
        self.set('subnavOpen', false);

        var thisChildren = self.get('childViews');
        thisChildren.forEach(function (item) {
          if (item !== btnInfo) {
            item.set('openBtn', false);
          }
        });
      },

      explore: function explore(btnInfo) {
        var self = this;
        self.set('searchState', false);
        self.toggleProperty('exploreState');
        self.set('openDropdown', false);

        if (self.get('exploreState')) {
          self.set('subnavOpen', true);
          Ember['default'].$('body, html').css({ overflow: 'hidden' });
        } else {
          console.log('hide');
          self.set('subnavOpen', false);
          Ember['default'].$('body, html').css({ overflow: 'auto' });
        }
        var thisChildren = self.get('childViews');
        thisChildren.forEach(function (item) {
          if (item !== btnInfo) {
            item.set('openBtn', false);
          }
        });
      },

      search: function search(btnInfo) {
        var self = this;
        self.set('exploreState', false);
        self.set('openDropdown', false);

        if (self.get('subnavOpen')) {

          if (self.get('searchState')) {
            Ember['default'].$('body, html').css({ overflow: 'auto' });
            self.set('subnavOpen', false);
            self.set('searchState', false);
          } else {
            Ember['default'].$('body, html').css({ overflow: 'hidden' });
            self.set('subnavOpen', true);
            self.set('searchState', true);
          }
        } else {
          Ember['default'].$('body, html').css({ overflow: 'hidden' });
          self.set('subnavOpen', true);
          self.set('searchState', true);
        }
        var thisChildren = self.get('childViews');
        thisChildren.forEach(function (item) {
          if (item !== btnInfo) {
            item.set('openBtn', false);
          }
        });
      },

      searchResultSelected: function searchResultSelected() {
        var self = this;
        self.set('searchState', false);
      }
    },

    initFunction: function initFunction() {
      var self = this;
      switch (this.get('model.route')) {
        case 'homepage':

          break;

        case 'sport':
          this.set('showHeaderHome', true);
          break;

        case 'competitor-competition':
          this.set('showHeaderHome', true);
          this.set('showHeaderCompetitorCompetition', true);
          break;
      }
      Ember['default'].$('body, html').css({ overflow: 'auto' });

      // if (self.get('firstRun')){

      //   self.set('firstRun', false);

      // self.$('.main-nav').bind('mouseover', function(){
      //   console.log('mmm');
      //   self.set('mouseSelect', true);
      // });

      // self.$('.main-nav').bind('mouseout', function(){
      //   console.log('ooo');
      //   self.set('mouseSelect', false);
      // });

      var mouseOverFunction = function mouseOverFunction() {
        self.set('mouseSelect', true);
      };

      self.set('mouseOverFunction', mouseOverFunction);

      self.$('.main-nav').bind('mouseover', self.get('mouseOverFunction'));

      var mouseOutFunction = function mouseOutFunction() {
        self.set('mouseSelect', false);
      };

      self.set('mouseOutFunction', mouseOutFunction);

      self.$('.main-nav').bind('mouseout', self.get('mouseOutFunction'));

      // var bodyClick = function(e){
      //   var container = self.$();
      //   if (!container.is(e.target) && container.has(e.target).length === 0 && self.get('openDropdown')) {

      //       self.set('openDropdown', false);
      //       console.log('body');
      //       console.log(container);
      //   }
      // }
      // self.set('bodyClick', bodyClick);

      // Ember.$('html, body').bind('click', self.get('bodyClick'));

      // }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroyElement: function willDestroyElement() {
      var self = this;
      self.get('exploreState', false);
      self.get('searchState', false);
      self.$('.main-nav').unbind('mouseover', self.get('mouseOverFunction'));
      self.$('.main-nav').unbind('mouseout', self.get('mouseOutFunction'));
      // this.set('mouseover', false);
      // this.set('mouseout', false);

      // Ember.$('html, body').unbind('click', self.get('bodyClick'));
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/global-header/search/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    store: Ember['default'].inject.service(),
    content: [],
    filter: "",
    firstPass: true,
    history: [],

    actions: {
      click: function click(item) {
        var items = this.get('storage').get('searchHistory');

        if (!items) {
          items = [];
        }

        if (items.length === 5) {
          console.log('5 items');
          items.pop();
        }

        items.unshift(item);

        this.get('storage').set('searchHistory', items);
        this.set('history', items);
        this.sendAction('searchResultSelected');
      }
    },

    model: function model() {
      console.log('model');
      return this.get('store').findAll('page');
    },

    filteredContent: (function () {
      // var self = this;
      var filter = this.get('filter').toLowerCase();
      var found = [];
      // var rail;
      // var tile;
      var search = -1;
      var titles = [];

      if (filter === "") {
        return false;
      }

      found.status = false;
      found["live"] = [];
      found["catchup"] = [];
      found["vod"] = [];
      found["comingsoon"] = [];
      found["sport"] = [];
      found["competition"] = [];
      found["competitor"] = [];
      found["relatedcontent"] = [];

      this.get('content').forEach(function (page) {
        page.get('rails').forEach(function (rail) {
          rail.tiles.forEach(function (tile) {
            if (titles.indexOf(tile.title) === -1) {
              titles.push(tile.title);
              search = tile.title.toLowerCase().indexOf(filter);
              Ember['default'].set(tile, 'search', search);

              if (search > -1) {
                found.status = true;
                if (tile.route === "video") {
                  //console.log(tile.type);

                  if (tile.statusIsLive) {
                    found["live"].push(tile);
                  }

                  if (tile.statusIsCatchUp) {
                    found["catchup"].push(tile);
                  }

                  if (tile.statusIsVOD) {
                    found["vod"].push(tile);
                  }

                  if (tile.statusIsComingSoon) {
                    found["comingsoon"].push(tile);
                  }
                } else {

                  if (tile.type === "sport") {
                    found["sport"].push(tile);
                  }

                  if (tile.type === "competition") {
                    found["competition"].push(tile);
                  }

                  if (tile.type === "competitor") {
                    found["competitor"].push(tile);
                  }

                  if (tile.type === "related-content") {
                    found["relatedcontent"].push(tile);
                  }
                }
              }
            }
          });
        });
      });

      return found;
    }).property('filter'),

    initFunction: function initFunction() {

      if (this.get('firstPass') === true) {
        this.set('firstPass', false);
        this.set('content', this.get('store').findAll('page'));

        this.set('history', this.get('storage').get('searchHistory'));
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroyElement: function willDestroyElement() {}
  });

});
define('base-method-ember-styleguide/pods/components/web/global-header/search/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element7);
              morphs[1] = dom.createMorphAt(element7,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[15,36],[15,40]]]]],[],["loc",[null,[15,18],[15,43]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[15,56],[15,66]]]],["get","item.search",["loc",[null,[15,67],[15,78]]]],["get","filter",["loc",[null,[15,79],[15,85]]]]],[],["loc",[null,[15,44],[15,87]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Live");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.live",["loc",[null,[14,16],[14,36]]]]],[],0,null,["loc",[null,[14,8],[16,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 8
                },
                "end": {
                  "line": 30,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element6);
              morphs[1] = dom.createMorphAt(element6,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[29,35],[29,39]]]]],[],["loc",[null,[29,18],[29,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[29,54],[29,64]]]],["get","item.search",["loc",[null,[29,65],[29,76]]]],["get","filter",["loc",[null,[29,77],[29,83]]]]],[],["loc",[null,[29,42],[29,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Catch up");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.vod",["loc",[null,[28,16],[28,35]]]]],[],0,null,["loc",[null,[28,8],[30,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 8
                },
                "end": {
                  "line": 44,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(element5,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[43,35],[43,39]]]]],[],["loc",[null,[43,18],[43,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[43,54],[43,64]]]],["get","item.search",["loc",[null,[43,65],[43,76]]]],["get","filter",["loc",[null,[43,77],[43,83]]]]],[],["loc",[null,[43,42],[43,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 2
              },
              "end": {
                "line": 47,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Coming Soon");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.comingsoon",["loc",[null,[42,16],[42,42]]]]],[],0,null,["loc",[null,[42,8],[44,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 58,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element4);
              morphs[1] = dom.createMorphAt(element4,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[57,35],[57,39]]]]],[],["loc",[null,[57,18],[57,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[57,54],[57,64]]]],["get","item.search",["loc",[null,[57,65],[57,76]]]],["get","filter",["loc",[null,[57,77],[57,83]]]]],[],["loc",[null,[57,42],[57,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 2
              },
              "end": {
                "line": 61,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Related content");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.relatedcontent",["loc",[null,[56,16],[56,46]]]]],[],0,null,["loc",[null,[56,8],[58,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child4 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 72,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createMorphAt(element3,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[71,35],[71,39]]]]],[],["loc",[null,[71,18],[71,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[71,54],[71,64]]]],["get","item.search",["loc",[null,[71,65],[71,76]]]],["get","filter",["loc",[null,[71,77],[71,83]]]]],[],["loc",[null,[71,42],[71,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 2
              },
              "end": {
                "line": 75,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Sports");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.sport",["loc",[null,[70,16],[70,37]]]]],[],0,null,["loc",[null,[70,8],[72,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child5 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 84,
                  "column": 8
                },
                "end": {
                  "line": 86,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(element2,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[85,35],[85,39]]]]],[],["loc",[null,[85,18],[85,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[85,54],[85,64]]]],["get","item.search",["loc",[null,[85,65],[85,76]]]],["get","filter",["loc",[null,[85,77],[85,83]]]]],[],["loc",[null,[85,42],[85,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 2
              },
              "end": {
                "line": 89,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Teams/Players");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.competitor",["loc",[null,[84,16],[84,42]]]]],[],0,null,["loc",[null,[84,8],[86,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child6 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 98,
                  "column": 8
                },
                "end": {
                  "line": 100,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[99,35],[99,39]]]]],[],["loc",[null,[99,18],[99,41]]]],
              ["inline","highlight",[["get","item.title",["loc",[null,[99,54],[99,64]]]],["get","item.search",["loc",[null,[99,65],[99,76]]]],["get","filter",["loc",[null,[99,77],[99,83]]]]],[],["loc",[null,[99,42],[99,85]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 2
              },
              "end": {
                "line": 103,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Competitions");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredContent.competition",["loc",[null,[98,16],[98,43]]]]],[],0,null,["loc",[null,[98,8],[100,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 105,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,10,10,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,12,12,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","if",[["get","filteredContent.live",["loc",[null,[6,8],[6,28]]]]],[],0,null,["loc",[null,[6,2],[19,9]]]],
          ["block","if",[["get","filteredContent.vod",["loc",[null,[21,8],[21,27]]]]],[],1,null,["loc",[null,[21,2],[33,9]]]],
          ["block","if",[["get","filteredContent.comingsoon",["loc",[null,[35,8],[35,34]]]]],[],2,null,["loc",[null,[35,2],[47,9]]]],
          ["block","if",[["get","filteredContent.relatedcontent",["loc",[null,[49,8],[49,38]]]]],[],3,null,["loc",[null,[49,2],[61,9]]]],
          ["block","if",[["get","filteredContent.sport",["loc",[null,[63,8],[63,29]]]]],[],4,null,["loc",[null,[63,2],[75,9]]]],
          ["block","if",[["get","filteredContent.competitor",["loc",[null,[77,8],[77,34]]]]],[],5,null,["loc",[null,[77,2],[89,9]]]],
          ["block","if",[["get","filteredContent.competition",["loc",[null,[91,8],[91,35]]]]],[],6,null,["loc",[null,[91,2],[103,9]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 125,
                  "column": 8
                },
                "end": {
                  "line": 127,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("           ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["click",["get","item",["loc",[null,[126,35],[126,39]]]]],[],["loc",[null,[126,18],[126,41]]]],
              ["content","item.title",["loc",[null,[126,42],[126,56]]]]
            ],
            locals: ["item"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 124,
                "column": 6
              },
              "end": {
                "line": 128,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","each",[["get","history",["loc",[null,[125,16],[125,23]]]]],[],0,null,["loc",[null,[125,8],[127,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 128,
                "column": 6
              },
              "end": {
                "line": 132,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el3 = dom.createTextNode("Football");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el3 = dom.createTextNode("F1");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el3 = dom.createTextNode("Andy Murray");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 0
            },
            "end": {
              "line": 135,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Popular searches");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el5 = dom.createTextNode("ARSENAL");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el5 = dom.createTextNode("CHAMPIONS LEAGUE");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el5 = dom.createTextNode("ROGER FEDERER");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Recent searches");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","bp1-col-4 bp3-col-8");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [7, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","history",["loc",[null,[124,12],[124,19]]]]],[],0,1,["loc",[null,[124,6],[132,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 135,
            "column": 7
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","input",[],["type","text","placeholder","Search","value",["subexpr","@mut",[["get","filter",["loc",[null,[2,49],[2,55]]]]],[],[]]],["loc",[null,[2,2],[2,57]]]],
        ["block","if",[["get","filteredContent.status",["loc",[null,[5,6],[5,28]]]]],[],0,1,["loc",[null,[5,0],[135,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/global-header/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","browse-btn");
          var el2 = dom.createTextNode("BROWSE");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","iconfont iconfont-ls_icon_search");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","iconfont iconfont-ls_icon_profile");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 14
              },
              "end": {
                "line": 62,
                "column": 73
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","t",["global.navigation.account"],[],["loc",[null,[62,40],[62,73]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 14
              },
              "end": {
                "line": 63,
                "column": 75
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","t",["global.navigation.settings"],[],["loc",[null,[63,41],[63,75]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 14
              },
              "end": {
                "line": 64,
                "column": 67
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","t",["global.navigation.help"],[],["loc",[null,[64,37],[64,67]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","pull-right search");
          var el2 = dom.createTextNode("\n\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","search-menu");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","account-menu");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","dropdown-menu");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","intro2");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","signout-wrapper");
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("a");
          dom.setAttribute(el6,"class","signout2");
          dom.setAttribute(el6,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el7 = dom.createTextNode("\n                ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7,"class","text");
          var el8 = dom.createTextNode("sign out");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode(" ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7,"class","iconfont iconfont-ls_icon_signout");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5,"class","name");
          var el6 = dom.createTextNode("Hi Stephen");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","separator");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [3]);
          var element4 = dom.childAt(element3, [4]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
          morphs[1] = dom.createMorphAt(element3,1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element4, [5]),0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [7]),0,0);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [9]),0,0);
          return morphs;
        },
        statements: [
          ["block","web/icon-btn",[],["action","search","search","search"],0,null,["loc",[null,[18,6],[20,25]]]],
          ["block","web/icon-btn",[],["action","dropdown","dropdown","dropdown"],1,null,["loc",[null,[30,6],[32,25]]]],
          ["block","link-to",["web.account"],[],2,null,["loc",[null,[62,14],[62,85]]]],
          ["block","link-to",["web.settings"],[],3,null,["loc",[null,[63,14],[63,87]]]],
          ["block","link-to",["web.help"],[],4,null,["loc",[null,[64,14],[64,79]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 96,
                  "column": 8
                },
                "end": {
                  "line": 98,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["inline","t",["global.navigation.menu.sub.home"],[],["loc",[null,[97,14],[97,53]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 99,
                  "column": 8
                },
                "end": {
                  "line": 101,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["inline","t",[["get","model.rails.0.tiles.0.sportSlug",["loc",[null,[100,18],[100,49]]]]],[],["loc",[null,[100,14],[100,51]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 94,
                "column": 6
              },
              "end": {
                "line": 104,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","bp1-col-4 bp3-col-4 bp3-offset-4");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element1,1,1);
            morphs[1] = dom.createMorphAt(element1,2,2);
            morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["block","if",[["get","showHeaderHome",["loc",[null,[96,14],[96,28]]]]],[],0,null,["loc",[null,[96,8],[98,15]]]],
            ["block","if",[["get","showHeaderCompetitorCompetition",["loc",[null,[99,14],[99,45]]]]],[],1,null,["loc",[null,[99,8],[101,15]]]],
            ["inline","web/global-header/search",[],["searchResultSelected","searchResultSelected"],["loc",[null,[103,8],[103,80]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 110,
                  "column": 12
                },
                "end": {
                  "line": 112,
                  "column": 12
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0,0,0);
              return morphs;
            },
            statements: [
              ["element","action",["railSelected",["get","rail",["loc",[null,[111,45],[111,49]]]]],[],["loc",[null,[111,21],[111,51]]]],
              ["inline","t",[["get","rail.slug",["loc",[null,[111,56],[111,65]]]]],[],["loc",[null,[111,52],[111,67]]]]
            ],
            locals: ["rail","index"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 104,
                "column": 6
              },
              "end": {
                "line": 127,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","main-nav bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","header bp1-col-4 bp3-col-4");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Following");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","main-nav bp1-col-4 bp3-col-8");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4,"href","#");
            dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el5 = dom.createTextNode("Tennis");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4,"href","#");
            dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el5 = dom.createTextNode("Football");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4,"href","#");
            dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
            var el5 = dom.createTextNode("Baseball");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
            return morphs;
          },
          statements: [
            ["inline","t",[["get","model.slug",["loc",[null,[106,18],[106,28]]]]],[],["loc",[null,[106,14],[106,30]]]],
            ["block","each",[["get","model.rails",["loc",[null,[110,20],[110,31]]]]],[],0,null,["loc",[null,[110,12],[112,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row nav-content");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","searchState",["loc",[null,[94,12],[94,23]]]]],[],0,1,["loc",[null,[94,6],[127,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 131,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/global-header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("nav");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","navbar");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-left logo");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","/#/web/videos");
        dom.setAttribute(el4,"class","dazn-logo");
        dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","menu");
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","subnav-wrapper");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container limited-container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element5, [3]),1,1);
        morphs[1] = dom.createMorphAt(element5,5,5);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
        return morphs;
      },
      statements: [
        ["block","web/icon-btn",[],["action","explore","explore","explore"],0,null,["loc",[null,[9,8],[11,25]]]],
        ["block","unless",[["get","hideSearch",["loc",[null,[14,14],[14,24]]]]],[],1,null,["loc",[null,[14,4],[71,15]]]],
        ["block","unless",[["get","hideSearch",["loc",[null,[92,12],[92,22]]]]],[],2,null,["loc",[null,[92,2],[129,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/icon-btn/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['openBtn:open:close'],
    click: function click() {
      this.toggleProperty('openBtn');
      var actionToSend = this.get('action');
      console.log(actionToSend);
      this.sendAction(actionToSend, this);
    },
    initFunction: function initFunction() {},

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }

  });

});
define('base-method-ember-styleguide/pods/components/web/icon-btn/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/icon-btn/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","state1");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","state2");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","iconfont iconfont-ls_icon_close");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[2,0],[2,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/my-account/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/web/my-account/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 11
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/my-account/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container limited-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("My Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("Subscription");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("My Devices");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 3]),1,1);
        return morphs;
      },
      statements: [
        ["content","account/my-details",["loc",[null,[7,8],[7,30]]]],
        ["content","account/my-subscription",["loc",[null,[15,8],[15,35]]]],
        ["content","account/my-devices",["loc",[null,[23,8],[23,30]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/rail-item/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var itemClicked = false;
  var bp1;
  var bp2;
  var bp3;
  var bp4;
  var bp5;

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['mt-row rail-item'],
    classNameBindings: ['isAnimated:animated', 'firstTime:first-time', 'model.isPod:pods-rail', 'model.isChronological:chronological-rail', 'hideLeftArrow:hide-left-arrow::show-left-arrow', 'hideRightArrow:hide-right-arrow:show-right-arrow', 'dontShowMore:dont-show-more', 'active:active'],
    attributeBindings: ['customStyle:style'],
    firstRun: true,
    isLoaded: false,
    isTouch: false,
    hideLeftArrow: true,
    hideRightArrow: true,
    pagePos: 0,
    firstTime: true,
    showMore: true,
    tilesRight: 0,
    tilesLeft: 0,

    railId: Ember['default'].computed('model', function () {
      var thisString = 'rail-' + this.get('model.id');
      return Ember['default'].String.htmlSafe(thisString);
    }),

    colAmount: Ember['default'].computed(function () {
      //console.log('colAmount: Ember.computed: ' + this.get('model.isFeatured'));
      var amount;
      if (bp1) {
        amount = 2;
      }
      if (bp2) {
        amount = 4;
      }
      if (bp3) {
        amount = 4;
      }
      if (bp4) {
        amount = 6;
      }
      if (bp5) {
        amount = 8;
      }
      return amount;
    }),

    observeTilesLeft: Ember['default'].observer('tilesLeft', function () {
      ///console.log('observeTilesLeft ' + this.get('tilesLeft'));
      if (this.get('tilesLeft') < 0) {
        this.set('hideLeftArrow', true);
      } else {
        this.set('hideLeftArrow', false);
      }
    }),

    observeTilesRight: Ember['default'].observer('tilesRight', function () {
      ///console.log('observeTilesRight ' + this.get('tilesRight'));
      if (this.get('tilesRight') < 0) {
        this.set('hideRightArrow', true);
      } else {
        this.set('hideRightArrow', false);
      }
    }),

    observeSlideUp: Ember['default'].observer('slideUp', function () {
      var slideUp,
          thisHeight = this.$().height();
      if (this.get('slideUp')) {
        slideUp = -window.innerHeight;
      } else {
        slideUp = 0;
      }
      var slideUpStyle = Ember['default'].String.htmlSafe('transform: translate3d(0, ' + slideUp + 'px, 0); transition: transform 500ms ease-in-out;');
      this.set('customStyle', slideUpStyle);
    }),

    observeSlideDown: Ember['default'].observer('slideDown', function () {
      var slideDown,
          thisHeight = this.$().height();
      if (this.get('slideDown')) {
        if (bp1 || bp2) {
          slideDown = thisHeight / 4;
        } else if (bp3) {
          slideDown = thisHeight / 2;
        } else {
          slideDown = thisHeight + 150;
        }
      } else {
        slideDown = 0;
      }

      var slideDownStyle = Ember['default'].String.htmlSafe('transform: translate3d(0, ' + slideDown + 'px, 0); transition: transform 700ms ease-in-out;');
      this.set('customStyle', slideDownStyle);
    }),

    actions: {
      showMore: function showMore(event) {
        var self = this;
        var scrollTo = 0;
        var scrollToId = 0;

        var tileHeight = this.$('.tile').height();
        var tileAmount = this.$('.tile').length;
        var sliderMaxHeight;
        var childrenNodes;

        if (this.get('showMore')) {
          this.set('showMore', false);
          sliderMaxHeight = Ember['default'].String.htmlSafe('max-height: ' + tileHeight * tileAmount + 'px');
        } else {
          this.set('showMore', true);
          sliderMaxHeight = Ember['default'].String.htmlSafe('max-height: ' + tileHeight * 2 + 'px');
        }

        if ('model.isChronological') {
          childrenNodes = this.get('childViews');
          childrenNodes.forEach(function (tile, index) {
            index = index + 1;

            if (index === 5) {
              scrollToId = tile.get('model.id');
            }
          });

          Ember['default'].run.later(function () {
            scrollTo = Ember['default'].$('#tile-' + scrollToId).offset().top - 78;
            Ember['default'].$('body').animate({ scrollTop: scrollTo });
          }, 1250, "easeInOut");
        }

        this.set('sliderStyle', sliderMaxHeight);
      },

      routeChange: function routeChange(model) {
        //console.log('rail-item - routeChange ' + model.id);
        this.sendAction('routeChange', model);
      },

      sendVideo: function sendVideo(tile) {
        this.sendAction('sendVideo', tile, this);
        itemClicked = true;
        var newArr = this.get('childViews');

        // this.set('active', true);

        newArr.forEach(function (item) {

          if (item.elementId !== tile.elementId) {
            var displayStyle = Ember['default'].String.htmlSafe('display: inline-block');
            item.set('style', displayStyle);
          }
        });

        if (bp1 || bp2) {
          var activeIndex;
          newArr.forEach(function (i, index) {
            if (i.elementId === tile.elementId) {
              i.set('activeTile', true);
              activeIndex = index;
            } else {
              i.set('activeTile', false);
            }
          });
          newArr.forEach(function (i, index) {
            if (index < activeIndex) {
              i.set('slideUp', true);
            }
          });
        }
      },

      animateSlider: function animateSlider(position) {
        var self = this;
        self.set('isAnimated', true);
        var sliderMaxHEight = Ember['default'].String.htmlSafe('transform: translate3d(' + position + 'px, 0, 0); transition: transform 500ms ease-in-out;');
        self.set('sliderStyle', sliderMaxHEight);
        self.$('.slider').one('transitionend', function () {
          self.set('isAnimated', false);
          self.set('firstTime', false);
        });
      },

      slide: function slide(direction) {
        var self = this;
        var cols = self.get('colAmount');
        if (this.get('model.isFeatured')) {
          cols = cols / 2;
        }
        var arrLength = self.get('model.tiles').get('length');
        var pagePos = self.get('pagePos');
        var pages = Math.ceil(arrLength / cols);
        var itemWidth = Ember['default'].$('.video-tile').width();
        var windowWidth = self.$('.mt-row').width();
        var difference = cols - (pages * cols - arrLength);
        var tilesToLeft = self.get('tilesLeft');
        var tilesToRight = self.get('tilesRight');
        var newPosX = 0;

        // console.log('---:');
        // console.log('slide - direction:' + direction);
        // console.log('slide - moveToItem:' + moveToItem);
        // console.log('slide - itemsToLeft:' + tilesToLeft);
        // console.log('slide - itemsToRight:' + tilesToRight);
        // console.log('slide - colAmount:' + this.get('colAmount'));
        // console.log('slide - isFeatured:' + this.get('model.isFeatured'));
        // console.log('slide - cols:' + cols);
        // console.log('slide - arrLength:' + arrLength);
        // console.log('slide - pagePos:' + pagePos);
        // console.log('slide - pages:' + pages);
        // console.log('slide - itemWidth:' + itemWidth);
        // console.log('slide - windowWidth:' + windowWidth);
        // console.log('slide - difference:' + difference);
        // console.log('slide - arrLength:' + arrLength);
        // console.log('---:');

        if (direction === 'left') {
          pagePos = pagePos - 1;
          self.set('pagePos', pagePos);
          if (tilesToLeft >= cols) {
            tilesToLeft = tilesToLeft - cols;
            tilesToRight = arrLength - cols - tilesToLeft;
            newPosX = -(tilesToLeft * itemWidth);
          } else if (tilesToLeft < cols) {
            tilesToLeft = 0;
            tilesToRight = arrLength - cols - tilesToLeft;
          }
          newPosX = -(tilesToLeft * itemWidth);
        }

        // add featured item calculation.
        if (direction === 'right') {
          pagePos = pagePos + 1;
          self.set('pagePos', pagePos);
          if (pagePos === pages - 1) {
            tilesToLeft = arrLength - cols;
            tilesToRight = 0;
            newPosX = -(windowWidth * (pagePos - 1) + itemWidth * difference);
          } else {
            tilesToLeft = tilesToLeft + cols;
            tilesToRight = tilesToRight - cols;
            newPosX = -(windowWidth * pagePos);
          }
        }
        self.set('tilesLeft', tilesToLeft);
        self.set('tilesRight', tilesToRight);
        self.send('animateSlider', newPosX);
      }
    },

    createArrayOfIds: function createArrayOfIds(start, end) {
      var ids = [];
      for (var i = start; i < end + 1; i++) {
        ids.push(i);
      }
      return ids;
    },

    firstRunSetup: function firstRunSetup() {
      var self = this;

      self.set('tilesLeft', 0);
      self.set('tilesRight', self.get('model.tiles').get('length') - self.get('colAmount'));

      if ((bp1 || bp2) && self.get('model.isPod')) {
        Ember['default'].run.later(function () {
          var tileHeight = self.$('.tile').height();
          console.log('tile height :: ' + tileHeight);
          var sliderMaxHEight = Ember['default'].String.htmlSafe('max-height:' + tileHeight * 2 + 'px');
          self.set('sliderStyle', sliderMaxHEight);
        }, 100);

        console.log('child view length :: ' + childViewLength);
      }
      var childViewLength = this.get('childViews.length');
      if (childViewLength < 4) {
        self.set('dontShowMore', true);
      } else {
        self.set('dontShowMore', false);
      }
    },

    // debouncedDidResize: function(){
    //   var self = this;
    //   self.setBreakpoint();
    //   if ((bp1 || bp2) && self.get('model.isPod')){
    //     Ember.run.later(function(){
    //       var tileHeight = self.$('.tile').height();
    //       console.log('tile height :: ' + tileHeight);
    //       var sliderMaxHEight = Ember.String.htmlSafe('max-height:' + tileHeight  * 2 + 'px');
    //       self.set('sliderStyle', sliderMaxHEight);
    //     }, 100);
    //   }
    // },

    initFunction: function initFunction() {
      this._super();

      var self = this;
      if (self.get('firstRun')) {
        // self.set('active', false);
        self.set('firstRun', false);

        var resizeHandler = function resizeHandler() {
          self.setBreakpoint();
          if ((bp1 || bp2) && self.get('model.isPod')) {
            Ember['default'].run.later(function () {
              var tileHeight = self.$('.tile').height();
              console.log('tile height :: ' + tileHeight);
              var sliderMaxHEight = Ember['default'].String.htmlSafe('max-height:' + tileHeight * 2 + 'px');
              self.set('sliderStyle', sliderMaxHEight);
            }, 100);
          }
        };

        self.set('resizeHandler', resizeHandler);
        Ember['default'].$(window).bind('resize', self.get('resizeHandler'));

        var childrenNodes = this.get('childViews');
        var loadedChild = 0;
        self.setBreakpoint();
        childrenNodes.forEach(function (tile) {
          if (tile.get('isLoaded')) {
            loadedChild++;
          }
        });
        if (loadedChild !== childrenNodes.length) {
          return;
        }
        if (loadedChild === childrenNodes.length && this._renderNode.rendered) {
          self.set('isLoaded', true);
          self.firstRunSetup();
        }
        self.set('animateBodyEnd', false);
      }
    },

    didRender: function didRender() {
      //console.log('rail item component didRender ---- fully loaded rail');
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroy: function willDestroy() {
      var self = this;
      this.set('scrolling', false);
      Ember['default'].$(window).unbind('resize', self.get('resizeHandler'));
    },

    setBreakpoint: function setBreakpoint() {
      bp1 = false;
      bp2 = false;
      bp3 = false;
      bp4 = false;
      bp5 = false;

      if (window.innerWidth < 448) {
        bp1 = true;
        return;
      }

      if (window.innerWidth > 448 && window.innerWidth < 760) {
        bp2 = true;
        return;
      }

      if (window.innerWidth > 760 && window.innerWidth < 1200) {
        bp3 = true;
        return;
      }

      if (window.innerWidth > 1200 && window.innerWidth < 1760) {
        bp4 = true;
        return;
      }

      if (window.innerWidth > 1760) {
        bp5 = true;
        return;
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/rail-item/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 8
            },
            "end": {
              "line": 19,
              "column": 8
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/rail-item/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","web/tile-content",[],["model",["subexpr","@mut",[["get","video",["loc",[null,[18,35],[18,40]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange","index",["subexpr","@mut",[["get","index",["loc",[null,[18,95],[18,100]]]]],[],[]],"isFeatured",["subexpr","@mut",[["get","model.isFeatured",["loc",[null,[18,112],[18,128]]]]],[],[]],"isChronological",["subexpr","@mut",[["get","model.isChronological",["loc",[null,[18,145],[18,166]]]]],[],[]],"showMore",["subexpr","@mut",[["get","showMore",["loc",[null,[18,176],[18,184]]]]],[],[]]],["loc",[null,[18,10],[18,186]]]]
        ],
        locals: ["video","index"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/rail-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","show-more");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1,0,0);
          return morphs;
        },
        statements: [
          ["element","action",["showMore"],[],["loc",[null,[24,38],[24,60]]]],
          ["inline","t",["global.navigation.view-more"],[],["loc",[null,[24,61],[24,96]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/rail-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","show-more");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["element","action",["showMore"],[],["loc",[null,[26,38],[26,60]]]],
          ["inline","t",["global.navigation.view-less"],[],["loc",[null,[26,61],[26,96]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/rail-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-12 bp5-col-24 title");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title-over");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title-under");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","rails-content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","#");
        dom.setAttribute(el2,"class","slide-left-button");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-carousel-arrow");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","#");
        dom.setAttribute(el2,"class","slide-right-button");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-carousel-arrow");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","slider");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp3-col-12 bp5-col-24");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element4, [5, 1]);
        var element8 = dom.childAt(element7, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createUnsafeAttrMorph(element2, 'id');
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
        morphs[3] = dom.createElementMorph(element5);
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createUnsafeAttrMorph(element8, 'style');
        morphs[6] = dom.createMorphAt(element8,1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [3]),1,1);
        return morphs;
      },
      statements: [
        ["attribute","id",["get","railId",["loc",[null,[1,32],[1,38]]]]],
        ["inline","t",[["get","model.slug",["loc",[null,[4,39],[4,49]]]]],[],["loc",[null,[4,35],[4,51]]]],
        ["inline","t",[["get","model.slug",["loc",[null,[5,40],[5,50]]]]],[],["loc",[null,[5,36],[5,52]]]],
        ["element","action",["slide","left"],[],["loc",[null,[12,14],[12,39]]]],
        ["element","action",["slide","right"],[],["loc",[null,[13,14],[13,40]]]],
        ["attribute","style",["get","sliderStyle",["loc",[null,[16,35],[16,46]]]]],
        ["block","each",[["get","model.tiles",["loc",[null,[17,16],[17,27]]]]],[],0,null,["loc",[null,[17,8],[19,17]]]],
        ["block","if",[["get","showMore",["loc",[null,[23,12],[23,20]]]]],[],1,2,["loc",[null,[23,6],[27,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/rails-list/component', ['exports', 'ember', 'base-method-ember-styleguide/mixins/scroll-event'], function (exports, Ember, scrollEvent) {

  'use strict';

  var bp1;
  var bp2;
  var bp3;
  var bp4;
  var bp5;

  exports['default'] = Ember['default'].Component.extend(scrollEvent['default'], {
    classNameBindings: ['loading:loading', 'backToPlayback:back-to-playback-show:back-to-playback-hide', 'backToPlaybackTop:back-to-playback-top'],
    videoModel: false,
    firstPass: true,
    userInteracted: false,
    preventAction: false,
    loading: true,
    backToPlayback: false,
    videoOpacity: 1,

    splitRails: function splitRails() {

      var self = this,
          childArr = self.get('childViews'),
          activeIndex,
          pushTop,
          finalPos,
          thisOffset,
          thisOffsetTop,
          railHeight = self.get('railHeight'),
          videoHeight = window.innerWidth / 16 * 9,
          mobileBp = 1200,
          horizontalView = videoHeight + railHeight * 1.5;
      childArr.forEach(function (rail, index) {
        if (rail.get('active')) {
          activeIndex = index;
          thisOffset = rail.$().offset();
          thisOffsetTop = thisOffset.top;
        }
      });
      childArr.forEach(function (rail, index) {
        if (index < activeIndex) {
          rail.set('slideUp', true);
        } else {
          rail.set('slideDown', true);
        }
      });
      if (window.innerWidth > mobileBp) {
        if (window.innerHeight < horizontalView) {
          pushTop = railHeight * 3;
        } else {
          pushTop = railHeight * 1.7;
        }
      } else {
        pushTop = videoHeight - railHeight * 0.15;
      }
      finalPos = thisOffsetTop - pushTop;

      Ember['default'].$("html, body").animate({ scrollTop: finalPos }, 400);
    },

    appModeObserver: Ember['default'].observer('appMode', 'controller', function () {
      var self = this;
      var mode = self.get('appMode');
      var childArr = self.get('childViews');

      console.log('rails-list: appMode: ' + mode);

      if (self.get('preventAction')) {
        console.log('preventAction');
        return;
      }

      switch (mode) {
        case 'browse':
          self.set('preventAction', true);
          self.set('backToPlayback', true);
          self.set('backToPlaybackTop', false);
          self.set('slideUpNav', false);

          childArr.forEach(function (rail) {
            rail.set('slideUp', false);
            rail.set('slideDown', false);
          });
          Ember['default'].run.later(function () {
            self.set('preventAction', false);
          }, 500);
          break;

        case 'playback':
          self.set('preventAction', false);
          self.set('backToPlayback', false);
          self.set('backToPlaybackTop', false);
          self.set('slideUpNav', true);
          self.set('videoOpacity', true);
          self.set('videoFade', true);
          self.splitRails();

          // Ember.run.later(function(){
          //   self.set('preventAction', false);
          // }, 500);
          break;

        case 'playback.controls':
          self.set('preventAction', false);
          self.set('backToPlayback', false);
          self.set('backToPlaybackTop', false);
          self.set('slideUpNav', true);
          self.set('videoOpacity', true);
          self.set('videoFade', true);
          self.splitRails();

          // Ember.run.later(function(){
          //   self.set('preventAction', false);
          // }, 500);

          self.set('userInteracted', true);
          break;

        case 'playback.offcanvas':
          self.set('preventAction', false);
          self.set('backToPlayback', false);
          self.set('backToPlaybackTop', false);
          self.set('slideUpNav', true);
          self.set('videoOpacity', true);
          self.set('videoFade', true);
          self.splitRails();

          // Ember.run.later(function(){
          //   self.set('preventAction', false);
          // }, 500);

          self.set('userInteracted', true);
          break;
      }
    }),

    observeModelChange: Ember['default'].observer('model.rails.0.tiles.0', 'controller', function () {
      var self = this;
      var model;

      if (self.get('videoModel') !== self.get('model.rails.0.tiles.0')) {
        self.set('videoModel', self.get('model.rails.0.tiles.0'));
        self.set('videoModel.isPlaying', true);

        model = self.get('videoModel');

        console.log('model change: ' + model.id + ' / ' + model.videoSrc + ' / ' + model.title);
      }
    }),

    browseStyle: Ember['default'].computed('railHeight', 'videoHeight', function () {
      console.log('browseStyle');
      var self = this,
          pushTop,
          railHeight = self.get('railHeight'),
          videoHeight = window.innerWidth / 16 * 9,
          mobileBp = 1200,
          horizontalView = videoHeight + railHeight * 1.5;

      if (bp1 || bp2) {
        console.log('bp1 + bp2');

        pushTop = videoHeight + 60 + 18;

        return Ember['default'].String.htmlSafe('margin-top:' + pushTop + 'px');
      }

      if (self.get('appMode') === 'playback.controls') {
        pushTop = videoHeight + 25;
      } else {
        if (window.innerHeight > horizontalView) {
          if (window.innerWidth > mobileBp) {
            //console.log(1);
            pushTop = videoHeight - railHeight / 2;
          } else {
            //console.log(2);
            pushTop = videoHeight + 150;
          }
        } else {
          //console.log(3);
          //pushTop = videoHeight + 25;
          //pushTop = videoHeight - (railHeight / 2);
          pushTop = window.innerHeight - railHeight * 1.4;
        }
      }
      return Ember['default'].String.htmlSafe('margin-top:' + pushTop + 'px');
    }),

    actions: {
      backToPlayback: function backToPlayback() {
        var self = this;
        self.set('appMode', 'playback');
        self.set('backToPlayback', false);
        self.set('userInteracted', true);

        Ember['default'].run.later(function () {
          self.set('backToPlayback', false);
        }, 1000);
      },

      routeChange: function routeChange(model) {
        console.log('rail-list - routeChange ' + model.id);
        this.sendAction('routeChange', model);
      },

      changeAppMode: function changeAppMode(state) {
        var self = this;
        self.set('appMode', state);
      },

      sendVideo: function sendVideo(tile, rail) {
        var self = this,
            childArr = self.get('childViews');

        self.set('videoModel.isPlaying', false);
        self.set('userInteracted', true);

        //assign new tile model to tilemodel reference
        self.set('videoModel', tile.get('model'));
        self.set('videoModel.isPlaying', true);

        if (self.get('appMode') === 'browse' && !self.get('preventAction')) {
          childArr.forEach(function (childRail) {
            if (childRail.elementId === rail.elementId) {
              childRail.set('active', true);
            } else {
              childRail.set('active', false);
            }
            Ember['default'].run.later(function () {
              self.set('appMode', 'playback.controls');
            }, 100);
          });
        }

        if (self.get('appMode') === 'playback' && !self.get('preventAction')) {
          self.set('preventAction', true);

          childArr.forEach(function (childRail) {

            childRail.set('slideDown', false);
            childRail.set('slideUp', false);

            if (childRail.elementId === rail.elementId) {
              childRail.set('active', true);
            } else {
              childRail.set('active', false);
            }
            Ember['default'].run.later(function () {
              self.set('appMode', 'playback.controls');
              self.splitRails();

              Ember['default'].run.later(function () {
                self.set('preventAction', false);
              }, 500);
            }, 300);
          });
        }

        if (self.get('appMode') === 'playback.controls') {}
      }
    },

    scrolled: function scrolled() {
      var self = this,
          childArr = self.get('childViews'),
          bodyTop = Ember['default'].$('body').scrollTop(),
          videoHeight = window.innerWidth / 16 * 9,
          ratio = (videoHeight - 60 - 18) * 0.8; // plus nav height

      self.set('userInteracted', true);

      console.log('scrolled');

      if (self.get('appMode') !== 'browse') {
        self.set('appMode', 'browse');
      }

      if (self.get('appMode') === 'browse' && !self.get('preventAction')) {
        if (bodyTop < ratio) {
          self.set('videoFade', true);
          self.set('videoOpacity', bodyTop);
          self.set('slideUpNav', false);
          self.set('backToPlayback', false);
          self.set('backToPlaybackTop', false);
        } else {
          self.set('videoFade', false);
          self.set('videoOpacity', false);
          self.set('slideUpNav', true);
          self.set('backToPlayback', true);
          self.set('backToPlaybackTop', true);
        }
      }

      // if (self.get('appMode') === 'playback' && !self.get('preventAction')){
      // //   self.set('appMode', 'browse');
      // // }
    },

    initFunction: function initFunction() {
      var self = this;

      self._super();
      self.bindScrolling();

      console.log('init run ----------->');

      if (self.get('firstPass')) {
        self.set('firstPass', false);
        self.set('videoFade', true);
        self.set('appMode', 'browse');
        //self.set('appMode', 'playback.controls');

        self.set('videoModel', self.get('model.rails.0.tiles.0'));
        self.set('videoModel.isPlaying', true);

        var resizeHandler = function resizeHandler() {
          // self.set('scrollCloseReady', true);
          Ember['default'].run.later(function () {
            console.log('rails-list: resize: ');
            self.setBreakpoint();
            self.set('railHeight', Ember['default'].$('.rail-item').height());
          }, 1000);
        };

        self.set('resizeHandler', resizeHandler);
        Ember['default'].$(window).bind('resize', self.get('resizeHandler'));

        var childrenNodes = this.get('childViews');
        var loadedChild = 0;

        childrenNodes.forEach(function (rail) {
          if (rail.get('isLoaded')) {
            loadedChild++;
          }
        });
        if (loadedChild === childrenNodes.length - 2 && self._renderNode.rendered) {
          console.log('---------------all rails loaded---------------');
          Ember['default'].run.later(function () {
            self.setBreakpoint();
            self.set('railHeight', Ember['default'].$('.rail-item').height());
            self.set('loading', false);
          }, 500);
        }
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroy: function willDestroy() {
      var self = this;
      this.unbindScrolling();
      Ember['default'].$(window).unbind('resize', self.get('resizeHandler'));
    },

    setBreakpoint: function setBreakpoint() {
      bp1 = false;
      bp2 = false;
      bp3 = false;
      bp4 = false;
      bp5 = false;

      if (window.innerWidth < 448) {
        bp1 = true;
        return;
      }

      if (window.innerWidth > 448 && window.innerWidth < 760) {
        bp2 = true;
        return;
      }

      if (window.innerWidth > 760 && window.innerWidth < 1200) {
        bp3 = true;
        return;
      }

      if (window.innerWidth > 1200 && window.innerWidth < 1760) {
        bp4 = true;
        return;
      }

      if (window.innerWidth > 1760) {
        bp5 = true;
        return;
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/rails-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/rails-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","web/rail-item",[],["model",["subexpr","@mut",[["get","rail",["loc",[null,[9,26],[9,30]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange"],["loc",[null,[9,4],[9,80]]]]
        ],
        locals: ["rail"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/rails-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","back-to-playback");
        dom.setAttribute(el1,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("Now playing: ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","browse");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [6]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [0]),1,1);
        morphs[3] = dom.createMorphAt(fragment,4,4,contextualElement);
        morphs[4] = dom.createUnsafeAttrMorph(element1, 'style');
        morphs[5] = dom.createMorphAt(element1,1,1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","web/global-header",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,26],[1,31]]]]],[],[]],"explore",["subexpr","@mut",[["get","explore",["loc",[null,[1,40],[1,47]]]]],[],[]],"slideUpNav",["subexpr","@mut",[["get","slideUpNav",["loc",[null,[1,59],[1,69]]]]],[],[]]],["loc",[null,[1,0],[1,71]]]],
        ["element","action",["backToPlayback"],[],["loc",[null,[3,30],[3,57]]]],
        ["content","videoModel.title",["loc",[null,[3,74],[3,94]]]],
        ["inline","web/video-player",[],["appMode",["subexpr","@mut",[["get","appMode",["loc",[null,[5,27],[5,34]]]]],[],[]],"model",["subexpr","@mut",[["get","videoModel",["loc",[null,[5,41],[5,51]]]]],[],[]],"slideUpNav",["subexpr","@mut",[["get","slideUpNav",["loc",[null,[5,63],[5,73]]]]],[],[]],"resizeWin",["subexpr","@mut",[["get","resizeWin",["loc",[null,[5,84],[5,93]]]]],[],[]],"changeAppMode","changeAppMode","videoFade",["subexpr","@mut",[["get","videoFade",["loc",[null,[5,134],[5,143]]]]],[],[]],"videoOpacity",["subexpr","@mut",[["get","videoOpacity",["loc",[null,[5,157],[5,169]]]]],[],[]]],["loc",[null,[5,0],[5,171]]]],
        ["attribute","style",["get","browseStyle",["loc",[null,[7,29],[7,40]]]]],
        ["block","each",[["get","model.rails",["loc",[null,[8,10],[8,21]]]]],[],0,null,["loc",[null,[8,2],[10,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/tile-badge/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('base-method-ember-styleguide/pods/components/web/tile-badge/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","label on-hold");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["inline","t",["tile.status.playing"],[],["loc",[null,[5,31],[5,58]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 2
                },
                "end": {
                  "line": 9,
                  "column": 2
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","label on-hold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["inline","t",["tile.status.paused"],[],["loc",[null,[7,31],[7,57]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.8",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 2
                  },
                  "end": {
                    "line": 15,
                    "column": 2
                  }
                },
                "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","tile-label live-label watching");
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","label-title");
                var el3 = dom.createTextNode("WATCHING");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","label-content");
                var el3 = dom.createTextNode("1:17hrs");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.8",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 2
                    },
                    "end": {
                      "line": 21,
                      "column": 2
                    }
                  },
                  "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","tile-label onhold");
                  var el2 = dom.createTextNode("\n      ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","label-title");
                  var el3 = dom.createTextNode("ON HOLD");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n      ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","label-content");
                  var el3 = dom.createTextNode("RAIN");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.8",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 21,
                        "column": 2
                      },
                      "end": {
                        "line": 27,
                        "column": 2
                      }
                    },
                    "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1,"class","tile-label onhold delayed");
                    var el2 = dom.createTextNode("\n      ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2,"class","label-title");
                    var el3 = dom.createTextNode("DELAYED");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n      ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2,"class","label-content");
                    var el3 = dom.createElement("span");
                    dom.setAttribute(el3,"class","estimated");
                    var el4 = dom.createTextNode("est");
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode(" 15:30");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n    ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() { return []; },
                  statements: [

                  ],
                  locals: [],
                  templates: []
                };
              }());
              var child1 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.8",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 27,
                          "column": 2
                        },
                        "end": {
                          "line": 32,
                          "column": 2
                        }
                      },
                      "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1,"class","tile-label onhold postponed");
                      var el2 = dom.createTextNode("\n      ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("div");
                      dom.setAttribute(el2,"class","label-title");
                      var el3 = dom.createTextNode("POSTPONED");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n    ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() { return []; },
                    statements: [

                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child1 = (function() {
                  var child0 = (function() {
                    return {
                      meta: {
                        "revision": "Ember@1.13.8",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 32,
                            "column": 2
                          },
                          "end": {
                            "line": 38,
                            "column": 2
                          }
                        },
                        "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                      },
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("    ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("div");
                        dom.setAttribute(el1,"class","tile-label live-label");
                        var el2 = dom.createTextNode("\n      ");
                        dom.appendChild(el1, el2);
                        var el2 = dom.createElement("div");
                        dom.setAttribute(el2,"class","label-title");
                        var el3 = dom.createTextNode("LIVE");
                        dom.appendChild(el2, el3);
                        dom.appendChild(el1, el2);
                        var el2 = dom.createTextNode("\n      ");
                        dom.appendChild(el1, el2);
                        var el2 = dom.createElement("div");
                        dom.setAttribute(el2,"class","label-content");
                        var el3 = dom.createTextNode("1:17hrs");
                        dom.appendChild(el2, el3);
                        dom.appendChild(el1, el2);
                        var el2 = dom.createTextNode("\n    ");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes() { return []; },
                      statements: [

                      ],
                      locals: [],
                      templates: []
                    };
                  }());
                  var child1 = (function() {
                    var child0 = (function() {
                      return {
                        meta: {
                          "revision": "Ember@1.13.8",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 38,
                              "column": 2
                            },
                            "end": {
                              "line": 44,
                              "column": 2
                            }
                          },
                          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createTextNode("    ");
                          dom.appendChild(el0, el1);
                          var el1 = dom.createElement("div");
                          dom.setAttribute(el1,"class","tile-label catchup-label");
                          var el2 = dom.createTextNode("\n      ");
                          dom.appendChild(el1, el2);
                          var el2 = dom.createElement("div");
                          dom.setAttribute(el2,"class","label-title");
                          var el3 = dom.createTextNode("CATCHUP");
                          dom.appendChild(el2, el3);
                          dom.appendChild(el1, el2);
                          var el2 = dom.createTextNode("\n      ");
                          dom.appendChild(el1, el2);
                          var el2 = dom.createElement("div");
                          dom.setAttribute(el2,"class","label-content");
                          var el3 = dom.createTextNode("7 DAYS");
                          dom.appendChild(el2, el3);
                          dom.appendChild(el1, el2);
                          var el2 = dom.createTextNode("\n    ");
                          dom.appendChild(el1, el2);
                          dom.appendChild(el0, el1);
                          var el1 = dom.createTextNode("\n\n");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() { return []; },
                        statements: [

                        ],
                        locals: [],
                        templates: []
                      };
                    }());
                    var child1 = (function() {
                      var child0 = (function() {
                        return {
                          meta: {
                            "revision": "Ember@1.13.8",
                            "loc": {
                              "source": null,
                              "start": {
                                "line": 44,
                                "column": 2
                              },
                              "end": {
                                "line": 49,
                                "column": 2
                              }
                            },
                            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                          },
                          arity: 0,
                          cachedFragment: null,
                          hasRendered: false,
                          buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode("    ");
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement("div");
                            dom.setAttribute(el1,"class","tile-label comingsoon-label");
                            var el2 = dom.createTextNode("\n      ");
                            dom.appendChild(el1, el2);
                            var el2 = dom.createElement("div");
                            dom.setAttribute(el2,"class","label-title");
                            var el3 = dom.createTextNode("TODAY");
                            dom.appendChild(el2, el3);
                            var el3 = dom.createElement("span");
                            dom.setAttribute(el3,"class","separator");
                            var el4 = dom.createTextNode("|");
                            dom.appendChild(el3, el4);
                            dom.appendChild(el2, el3);
                            var el3 = dom.createElement("span");
                            dom.setAttribute(el3,"class","estimated");
                            var el4 = dom.createTextNode("est");
                            dom.appendChild(el3, el4);
                            dom.appendChild(el2, el3);
                            var el3 = dom.createTextNode(" 15:30");
                            dom.appendChild(el2, el3);
                            dom.appendChild(el1, el2);
                            var el2 = dom.createTextNode("\n    ");
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode("\n\n");
                            dom.appendChild(el0, el1);
                            return el0;
                          },
                          buildRenderNodes: function buildRenderNodes() { return []; },
                          statements: [

                          ],
                          locals: [],
                          templates: []
                        };
                      }());
                      var child1 = (function() {
                        var child0 = (function() {
                          return {
                            meta: {
                              "revision": "Ember@1.13.8",
                              "loc": {
                                "source": null,
                                "start": {
                                  "line": 49,
                                  "column": 2
                                },
                                "end": {
                                  "line": 54,
                                  "column": 2
                                }
                              },
                              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                            },
                            arity: 0,
                            cachedFragment: null,
                            hasRendered: false,
                            buildFragment: function buildFragment(dom) {
                              var el0 = dom.createDocumentFragment();
                              var el1 = dom.createTextNode("    ");
                              dom.appendChild(el0, el1);
                              var el1 = dom.createElement("div");
                              dom.setAttribute(el1,"class","tile-label related-label");
                              var el2 = dom.createTextNode("\n      ");
                              dom.appendChild(el1, el2);
                              var el2 = dom.createElement("div");
                              dom.setAttribute(el2,"class","label-title");
                              var el3 = dom.createTextNode("ROUND UP");
                              dom.appendChild(el2, el3);
                              dom.appendChild(el1, el2);
                              var el2 = dom.createTextNode("\n      ");
                              dom.appendChild(el1, el2);
                              var el2 = dom.createElement("div");
                              dom.setAttribute(el2,"class","label-content");
                              var el3 = dom.createTextNode("30mins");
                              dom.appendChild(el2, el3);
                              dom.appendChild(el1, el2);
                              var el2 = dom.createTextNode("\n    ");
                              dom.appendChild(el1, el2);
                              dom.appendChild(el0, el1);
                              var el1 = dom.createTextNode("\n  ");
                              dom.appendChild(el0, el1);
                              return el0;
                            },
                            buildRenderNodes: function buildRenderNodes() { return []; },
                            statements: [

                            ],
                            locals: [],
                            templates: []
                          };
                        }());
                        return {
                          meta: {
                            "revision": "Ember@1.13.8",
                            "loc": {
                              "source": null,
                              "start": {
                                "line": 49,
                                "column": 2
                              },
                              "end": {
                                "line": 54,
                                "column": 2
                              }
                            },
                            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                          },
                          arity: 0,
                          cachedFragment: null,
                          hasRendered: false,
                          buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createComment("");
                            dom.appendChild(el0, el1);
                            return el0;
                          },
                          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                            var morphs = new Array(1);
                            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                            dom.insertBoundary(fragment, 0);
                            dom.insertBoundary(fragment, null);
                            return morphs;
                          },
                          statements: [
                            ["block","if",[["get","model.statusIsVOD",["loc",[null,[49,12],[49,29]]]]],[],0,null,["loc",[null,[49,2],[54,2]]]]
                          ],
                          locals: [],
                          templates: [child0]
                        };
                      }());
                      return {
                        meta: {
                          "revision": "Ember@1.13.8",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 44,
                              "column": 2
                            },
                            "end": {
                              "line": 54,
                              "column": 2
                            }
                          },
                          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createComment("");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                          dom.insertBoundary(fragment, 0);
                          dom.insertBoundary(fragment, null);
                          return morphs;
                        },
                        statements: [
                          ["block","if",[["get","model.statusIsComingSoon",["loc",[null,[44,12],[44,36]]]]],[],0,1,["loc",[null,[44,2],[54,2]]]]
                        ],
                        locals: [],
                        templates: [child0, child1]
                      };
                    }());
                    return {
                      meta: {
                        "revision": "Ember@1.13.8",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 38,
                            "column": 2
                          },
                          "end": {
                            "line": 54,
                            "column": 2
                          }
                        },
                        "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                      },
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                        dom.insertBoundary(fragment, 0);
                        dom.insertBoundary(fragment, null);
                        return morphs;
                      },
                      statements: [
                        ["block","if",[["get","model.statusIsCatchUp",["loc",[null,[38,12],[38,33]]]]],[],0,1,["loc",[null,[38,2],[54,2]]]]
                      ],
                      locals: [],
                      templates: [child0, child1]
                    };
                  }());
                  return {
                    meta: {
                      "revision": "Ember@1.13.8",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 2
                        },
                        "end": {
                          "line": 54,
                          "column": 2
                        }
                      },
                      "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [
                      ["block","if",[["get","model.statusIsLive",["loc",[null,[32,12],[32,30]]]]],[],0,1,["loc",[null,[32,2],[54,2]]]]
                    ],
                    locals: [],
                    templates: [child0, child1]
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.8",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 27,
                        "column": 2
                      },
                      "end": {
                        "line": 54,
                        "column": 2
                      }
                    },
                    "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["block","if",[["get","model.isPostponed",["loc",[null,[27,12],[27,29]]]]],[],0,1,["loc",[null,[27,2],[54,2]]]]
                  ],
                  locals: [],
                  templates: [child0, child1]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.8",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 2
                    },
                    "end": {
                      "line": 54,
                      "column": 2
                    }
                  },
                  "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","if",[["get","model.isDelayed",["loc",[null,[21,12],[21,27]]]]],[],0,1,["loc",[null,[21,2],[54,2]]]]
                ],
                locals: [],
                templates: [child0, child1]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.8",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 2
                  },
                  "end": {
                    "line": 54,
                    "column": 2
                  }
                },
                "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["get","model.isOnhold",["loc",[null,[15,12],[15,26]]]]],[],0,1,["loc",[null,[15,2],[54,2]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 54,
                  "column": 2
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","model.isWatching",["loc",[null,[9,12],[9,28]]]]],[],0,1,["loc",[null,[9,2],[54,2]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 2
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","onHold",["loc",[null,[6,12],[6,18]]]]],[],0,1,["loc",[null,[6,2],[54,2]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.isPlaying",["loc",[null,[4,8],[4,23]]]]],[],0,1,["loc",[null,[4,2],[54,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 7
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/tile-badge/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.stateIsCategory",["loc",[null,[1,6],[1,27]]]]],[],0,1,["loc",[null,[1,0],[55,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/tile-content/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var bp1;
  var bp2;
  var bp3;
  var bp4;
  var bp5;

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['video-tile'],

    classNameBindings: ['isFeatured:bp1-col-4:bp1-col-2', 'isFeatured:bp3-col-4:bp3-col-3', 'isFeatured:bp4-col-6:bp4-col-4', 'isFeatured:bp5-col-6:bp5-col-4', 'isFeatured:featured:normal', 'model.statusIsComingSoon:is-coming', 'model.statusIsCatchUp:is-catchup', 'model.isTeam:cat', 'model.isPlayer:cat', 'model.isSport:cat', 'model.isTournament:cat', 'model.isTeam:cat', 'mode.stateIsCategory:cat'],
    attributeBindings: ['style'],
    firstRun: true,

    imgData: Ember['default'].computed('model', function () {
      return Ember['default'].String.htmlSafe('background-image: url(images/thumbnails/' + this.get('model.thumbnail') + ');');
    }),

    sportBg: Ember['default'].computed('model', function () {

      var img;

      if (this.get('model.sport') === 'football') {
        img = 'football-bg.jpg';
      }

      if (this.get('model.sport') === 'tennis') {
        img = 'tennis-bg.jpg';
      }

      return Ember['default'].String.htmlSafe('background-image: url(images/' + img + ')');
    }),

    teamBg: Ember['default'].computed('model', function () {

      var imgSrc = this.get('model.teamBg');

      return Ember['default'].String.htmlSafe('background-image: url(images/' + imgSrc + ')');
    }),

    tournamentBg: Ember['default'].computed('model', function () {

      var imgSrc = this.get('model.tournamentBg');

      return Ember['default'].String.htmlSafe('background-image: url(images/' + imgSrc + ')');
    }),

    logo1: Ember['default'].computed('model', function () {
      var imgSrc = this.get('model.team1_logo');

      return Ember['default'].String.htmlSafe('background-image: url(images/thumbnails/' + imgSrc + ')');
    }),

    logo2: Ember['default'].computed('model', function () {
      var imgSrc = this.get('model.team2_logo');
      return Ember['default'].String.htmlSafe('background-image: url(images/thumbnails/' + imgSrc + ')');
    }),

    tournamentLogo: Ember['default'].computed('model', function () {
      var imgSrc = this.get('model.thumbnail');
      return Ember['default'].String.htmlSafe('background-image: url(images/thumbnails/' + imgSrc + ')');
    }),

    sportBackground: Ember['default'].computed('model', function () {
      var imgSrc = this.get('model.thumbnail');
      return Ember['default'].String.htmlSafe('background-image: url(images/thumbnails/' + imgSrc + ')');
    }),

    click: function click() {
      var self = this;

      console.log('tile-content: ' + self.get('model.videoSrc'));

      if (self.get('model.route') === 'video') {
        self.sendAction('sendVideo', self);

        if (self.get('standard')) {
          self.set('standard', false);
          self.set('model.isPlaying', true);
        } else if (self.get('isPlaying')) {
          self.set('model.isPlaying', false);
          self.set('onHold', true);
        } else if (self.get('onHold')) {
          self.set('model.isPlaying', true);
          self.set('onHold', false);
        }
      } else {
        self.sendAction('routeChange', self.get('model'));
      }
    },

    setHeight: function setHeight() {
      var imgHeight;

      imgHeight = Ember['default'].$('.normal').width() / 16 * 9;
      return imgHeight;
    },

    initFunction: function initFunction() {
      this._super();
      var self = this;
      if (self.get('firstRun')) {
        self.set('firstRun', false);

        var resizeHandler = function resizeHandler() {
          self.setBreakpoint();
          var imgHeight = self.setHeight();
          var textHeight = self.$('.content-wrapper').height();
          var heightString = Ember['default'].String.htmlSafe('height: ' + imgHeight + 'px');
          var totalHeightString = Ember['default'].String.htmlSafe('height: ' + Math.round(imgHeight + textHeight + 42) + 'px');
          self.set('imgHeight', heightString);
          self.set('wrapperHeight', totalHeightString);
        };

        self.set('resizeHandler', resizeHandler);
        Ember['default'].$(window).bind('resize', self.get('resizeHandler'));
        self.setBreakpoint();

        var imgHeight = self.setHeight();
        var textHeight = self.$('.content-wrapper').height();

        var heightString = Ember['default'].String.htmlSafe('height: ' + imgHeight + 'px');

        var totalHeightString = Ember['default'].String.htmlSafe('height: ' + Math.round(imgHeight + textHeight + 42) + 'px');

        self.set('imgHeight', heightString);
        self.set('wrapperHeight', totalHeightString);
      }

      if (self._renderNode.rendered) {
        self.set('isLoaded', true);
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroy: function willDestroy() {
      var self = this;
      Ember['default'].$(window).unbind('resize', self.get('resizeHandler'));
      // this.set('mouseover', false);
      // this.set('mouseout', false);
    },

    setBreakpoint: function setBreakpoint() {
      bp1 = false;
      bp2 = false;
      bp3 = false;
      bp4 = false;
      bp5 = false;

      if (window.innerWidth < 448) {
        bp1 = true;
        return;
      }

      if (window.innerWidth > 448 && window.innerWidth < 760) {
        bp2 = true;
        return;
      }

      if (window.innerWidth > 760 && window.innerWidth < 1200) {
        bp3 = true;
        return;
      }

      if (window.innerWidth > 1200 && window.innerWidth < 1760) {
        bp4 = true;
        return;
      }

      if (window.innerWidth > 1760) {
        bp5 = true;
        return;
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/tile-content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","sport-background");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","team1-logo");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","team2-logo");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [1]);
            var element12 = dom.childAt(element11, [1]);
            var element13 = dom.childAt(element11, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createUnsafeAttrMorph(element11, 'style');
            morphs[1] = dom.createUnsafeAttrMorph(element12, 'style');
            morphs[2] = dom.createUnsafeAttrMorph(element13, 'style');
            return morphs;
          },
          statements: [
            ["attribute","style",["get","sportBg",["loc",[null,[8,47],[8,54]]]]],
            ["attribute","style",["get","logo1",["loc",[null,[9,43],[9,48]]]]],
            ["attribute","style",["get","logo2",["loc",[null,[10,43],[10,48]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 17,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","sport-background");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","tournament-logo");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var element10 = dom.childAt(element9, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createUnsafeAttrMorph(element9, 'style');
            morphs[1] = dom.createUnsafeAttrMorph(element10, 'style');
            return morphs;
          },
          statements: [
            ["attribute","style",["get","sportBg",["loc",[null,[14,49],[14,56]]]]],
            ["attribute","style",["get","tournamentLogo",["loc",[null,[15,50],[15,64]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.isTeamSport",["loc",[null,[6,14],[6,31]]]]],[],0,1,["loc",[null,[6,8],[17,15]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","sport-background");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeAttrMorph(element8, 'style');
              return morphs;
            },
            statements: [
              ["attribute","style",["get","sportBackground",["loc",[null,[21,49],[21,64]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","sport-background");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeAttrMorph(element7, 'style');
              return morphs;
            },
            statements: [
              ["attribute","style",["get","sportBackground",["loc",[null,[25,49],[25,64]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","sport-background");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","tile-overlay");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","team-tile");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var element6 = dom.childAt(element5, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createUnsafeAttrMorph(element5, 'style');
              morphs[1] = dom.createUnsafeAttrMorph(element6, 'style');
              return morphs;
            },
            statements: [
              ["attribute","style",["get","teamBg",["loc",[null,[29,49],[29,55]]]]],
              ["attribute","style",["get","imgData",["loc",[null,[31,44],[31,51]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 8
                },
                "end": {
                  "line": 40,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","sport-background");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","tile-overlay");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","team-tile");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var element4 = dom.childAt(element3, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createUnsafeAttrMorph(element3, 'style');
              morphs[1] = dom.createUnsafeAttrMorph(element4, 'style');
              return morphs;
            },
            statements: [
              ["attribute","style",["get","tournamentBg",["loc",[null,[36,49],[36,61]]]]],
              ["attribute","style",["get","imgData",["loc",[null,[38,44],[38,51]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 42,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
            morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","model.isPlayer",["loc",[null,[20,14],[20,28]]]]],[],0,null,["loc",[null,[20,8],[22,15]]]],
            ["block","if",[["get","model.isSport",["loc",[null,[24,14],[24,27]]]]],[],1,null,["loc",[null,[24,8],[26,15]]]],
            ["block","if",[["get","model.isTeam",["loc",[null,[28,14],[28,26]]]]],[],2,null,["loc",[null,[28,8],[33,15]]]],
            ["block","if",[["get","model.isTournament",["loc",[null,[35,14],[35,32]]]]],[],3,null,["loc",[null,[35,8],[40,15]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 6
              },
              "end": {
                "line": 44,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","tile-img");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeAttrMorph(element2, 'style');
            return morphs;
          },
          statements: [
            ["attribute","style",["get","imgData",["loc",[null,[43,39],[43,46]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.stateIsCategory",["loc",[null,[19,16],[19,37]]]]],[],0,1,["loc",[null,[19,6],[44,6]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","text-ellipsis tournament-name");
          var el2 = dom.createTextNode("DAZN Presents");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","team-name tile-name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.title",["loc",[null,[50,41],[50,56]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 8
                },
                "end": {
                  "line": 55,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","team-name cat-name text-ellipsis");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["content","model.title",["loc",[null,[54,54],[54,69]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 8
                },
                "end": {
                  "line": 57,
                  "column": 8
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","team-name cat-name text-ellipsis");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["inline","t",[["get","model.slug",["loc",[null,[56,58],[56,68]]]]],[],["loc",[null,[56,54],[56,70]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 6
              },
              "end": {
                "line": 58,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","model.isStyleguide",["loc",[null,[53,14],[53,32]]]]],[],0,1,["loc",[null,[53,8],[57,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 6
              },
              "end": {
                "line": 64,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","text-ellipsis tournament-name");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" | ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","tile-name");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","text-ellipsis team-name");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","text-ellipsis team-name");
            var el3 = dom.createTextNode("AT ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element0,0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
            return morphs;
          },
          statements: [
            ["content","model.tournament",["loc",[null,[59,51],[59,71]]]],
            ["content","model.game",["loc",[null,[59,80],[59,94]]]],
            ["content","model.team1_short",["loc",[null,[61,47],[61,68]]]],
            ["content","model.team2_short",["loc",[null,[62,50],[62,71]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.stateIsCategory",["loc",[null,[52,16],[52,37]]]]],[],0,1,["loc",[null,[52,6],[64,6]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","text-description");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["inline","t",[["get","model.description",["loc",[null,[66,42],[66,59]]]]],[],["loc",[null,[66,38],[66,61]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/tile-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","tile-height");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","indent");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tile-wrapper");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","tile-img-wrapper");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","content-wrapper");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element14 = dom.childAt(fragment, [0]);
        var element15 = dom.childAt(element14, [3]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element15, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createUnsafeAttrMorph(element14, 'style');
        morphs[1] = dom.createUnsafeAttrMorph(element16, 'style');
        morphs[2] = dom.createMorphAt(element16,1,1);
        morphs[3] = dom.createMorphAt(element16,3,3);
        morphs[4] = dom.createMorphAt(element17,1,1);
        morphs[5] = dom.createMorphAt(element17,2,2);
        return morphs;
      },
      statements: [
        ["attribute","style",["get","wrapperHeight",["loc",[null,[1,34],[1,47]]]]],
        ["attribute","style",["get","imgHeight",["loc",[null,[4,43],[4,52]]]]],
        ["block","if",[["get","model.statusIsComingSoon",["loc",[null,[5,12],[5,36]]]]],[],0,1,["loc",[null,[5,6],[44,13]]]],
        ["inline","web/tile-badge",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[45,29],[45,34]]]]],[],[]]],["loc",[null,[45,6],[45,36]]]],
        ["block","if",[["get","model.statusIsVOD",["loc",[null,[48,12],[48,29]]]]],[],2,3,["loc",[null,[48,6],[64,13]]]],
        ["block","unless",[["get","model.stateIsCategory",["loc",[null,[65,16],[65,37]]]]],[],4,null,["loc",[null,[65,6],[67,17]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/video-player/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var bp1;
  var bp2;
  var bp3;
  var bp4;
  var bp5;

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['minimized:minimized', 'fadeToVideo:fade-to-video', 'fadeOut:fade-out', 'animation:animation', 'videoText:show-text', 'slideUpNav:slide-up:slide-up-off', 'controlsState:controls-active:controls-inactive', 'offcanvasOpen:offcanvas-open:offcanvas-closed', 'scrubBarPreview:preview-active:preview-inactive'],
    firstRun: true,
    isReady: true,
    runLater: false,
    controlsState: false,
    currentSrc: false,
    videoStyle: false,
    offcanvasOpen: false,
    offcanvasStateSettings: false,
    offcanvasStateCamera: false,
    offcanvasStateStats: false,
    offcanvasStateFollow: false,
    video: false,
    videoPlaying: true,
    videoCurrentTime: 0,
    videoPlayback: false,
    videoDownload: false,
    listenerTimeUpdate: false,
    listenerProgress: false,
    listenerMouseMove: false,
    events: false,

    observeAppMode: Ember['default'].observer('appMode', function () {
      var self = this;
      var mode = self.get('appMode');
      var timeout;

      //console.log('video-player: appMode: ' + mode);

      switch (self.get('appMode')) {
        case 'browse':
          self.set('controlsState', false);
          self.set('offcanvasOpen', false);

          self.removeEventListeners();
          self.removeMouseMoveListener();

          Ember['default'].run.cancel(self.get('runLater'));
          break;

        case 'playback':
          self.set('controlsState', false);
          self.set('offcanvasOpen', false);

          self.removeEventListeners();
          self.addMouseMoveListener();

          Ember['default'].run.cancel(self.get('runLater'));
          break;

        case 'playback.controls':
          self.set('controlsState', true);
          self.set('offcanvasOpen', false);

          if (self.get('runLater')) {
            Ember['default'].run.cancel(self.get('runLater'));
          }

          timeout = Ember['default'].run.later(this, function () {
            self.sendAction('changeAppMode', 'playback');
            //console.log('controlsState later');
          }, 7000);

          self.set('runLater', timeout);

          self.addEventListeners();
          self.addMouseMoveListener();
          break;

        case 'playback.offcanvas':
          self.set('controlsState', false);
          self.set('offcanvasOpen', true);
          self.removeMouseMoveListener();

          Ember['default'].run.cancel(self.get('runLater'));
          break;

      }
    }),

    observeSource: Ember['default'].observer('model.videoSrc', function () {
      var self = this;
      var video = self.get('video');

      if (self.get('currentSrc') !== self.get('model.videoSrc')) {
        video.pause();

        Ember['default'].run.later(function () {
          video.load();
        }, 500);

        self.get('currentSrc', self.get('model.videoSrc'));
      }
    }),

    elapsedTime: Ember['default'].computed(function () {
      return 20;
    }),

    observeVideoOpacity: Ember['default'].observer('videoOpacity', function () {
      var self = this;
      var videoHeight = window.innerWidth / 16 * 9;
      var opacity;
      var style;

      if (self.get('videoOpacity') === true) {
        opacity = 1;
      } else if (self.get('videoOpacity') === false) {
        opacity = 0;
      } else {

        opacity = self.get('videoOpacity') / videoHeight;
        opacity = (1 - opacity).toFixed(2);

        if (opacity < 0.33) {
          opacity = 0;
        }
      }

      style = Ember['default'].String.htmlSafe('opacity:' + opacity + '; transform-origin: top center; transform: opacity; transition: 150ms ease-in;');

      self.set('videoStyle', style);
    }),

    bindMouseOver: Ember['default'].observer('mouseover', function () {
      //console.log('mouseover');
    }),

    actions: {
      videoClick: function videoClick() {
        var self = this;
        var video = self.get('video');

        if (self.get('appMode') === 'playback.controls') {
          self.sendAction('changeAppMode', 'playback');
        } else {
          self.sendAction('changeAppMode', 'playback.controls');
        }

        if (bp1 || bp2) {
          video.load();
          self.videoPlay();
        }
      },

      buttonOffCanvas: function buttonOffCanvas(id) {
        console.log('buttonOffCanvas' + id);

        var self = this;
        self.set('offcanvasStateSettings', false);
        self.set('offcanvasStateCamera', false);
        self.set('offcanvasStateStats', false);
        self.set('offcanvasStateFollow', false);

        switch (id) {
          case "settings":
            self.set('offcanvasStateSettings', true);
            break;

          case "camera":
            self.set('offcanvasStateCamera', true);
            break;

          case "stats":
            self.set('offcanvasStateStats', true);
            break;

          case "follow":
            self.set('offcanvasStateFollow', true);
            break;
        }

        self.sendAction('changeAppMode', 'playback.offcanvas');
      },

      buttonPress: function buttonPress(id) {
        var self = this;
        //console.log(id);

        switch (id) {
          case 'play-pause':
            self.playPause();
            break;

          case 'rewind':
            self.videoRewind();
            break;

          case 'air-play':
            break;

          case 'full-screen':
            self.enterFullScreen();
            break;
        }
      },

      skipToPercentage: function skipToPercentage(percentage) {
        //console.log('skipToPercentage');
        //console.log(percentage);
        var self = this;
        self.videoSkipToPercentage(percentage);
      }
    },

    playPause: function playPause() {
      var self = this;
      var state = self.get('videoPlaying');

      if (state === true) {
        self.videoPause();
      } else {
        self.videoPlay();
      }
    },

    enterFullScreen: function enterFullScreen() {
      var self = this;
      var video = self.get('video');

      if (video.requestFullscreen) {
        video.requestFullscreen();
      } else if (video.mozRequestFullScreen) {
        video.mozRequestFullScreen();
      } else if (video.webkitRequestFullscreen) {
        video.webkitRequestFullscreen();
      }
    },

    videoPlay: function videoPlay() {
      var self = this;
      var video = self.get('video');
      video.play();

      self.set('videoPlaying', true);
    },

    videoPause: function videoPause() {
      var self = this;
      var video = self.get('video');
      video.pause();

      self.set('videoPlaying', false);
    },

    videoRewind: function videoRewind() {
      var self = this;
      var video = self.get('video');

      if (video.currentTime - 30 < 0) {
        video.currentTime = 0;
      } else {
        video.currentTime = video.currentTime - 30;
      }
    },

    videoSkipToPercentage: function videoSkipToPercentage(percentage) {
      var self = this;
      var skipTime = self.get('video').duration * (percentage / 100);

      self.get('video').currentTime = skipTime;
    },

    updatePlaybackProgressBar: function updatePlaybackProgressBar(self) {
      var video = self.get('video');
      var percentage = (100 / video.duration * video.currentTime).toFixed(2);
      var videoPlayback = {
        position: percentage,
        currentTime: video.currentTime.toFixed(2)
      };

      self.set('videoPlayback', videoPlayback);
      self.set('videoCurrentTime', video.currentTime.toFixed(2));
    },

    updateDownloadProgressBar: function updateDownloadProgressBar(self) {
      var video = self.get('video');
      var range = 0;
      var bf = video.buffered;
      var time = video.currentTime;

      while (!(bf.start(range) <= time && time <= bf.end(range))) {
        range += 1;
      }

      // to do refactor percentages
      var loadStartPercentage = bf.start(range) / video.duration;
      var loadEndPercentage = bf.end(range) / video.duration;
      var loadPercentage = loadEndPercentage - loadStartPercentage;
      var left = (loadStartPercentage * 100).toFixed(2);
      var width = (loadPercentage * 100).toFixed(2);
      var videoDownload = {
        downloadPercentage: width,
        downloadPosition: left
      };

      self.set('videoDownload', videoDownload);
    },

    addEventListeners: function addEventListeners() {
      var self = this;
      var video = false;
      var listenerTimeUpdate = function listenerTimeUpdate() {
        self.updatePlaybackProgressBar(self);
      };
      var listenerProgress = function listenerProgress() {
        self.updateDownloadProgressBar(self);
      };

      video = self.get('video');
      video.addEventListener('timeupdate', listenerTimeUpdate, false);
      video.addEventListener('progress', listenerProgress, false);

      self.set('listenerTimeUpdate', listenerTimeUpdate);
      self.set('listenerProgress', listenerProgress);
    },

    removeEventListeners: function removeEventListeners() {
      var self = this;
      var video = false;
      var listenerTimeUpdate = self.get('listenerTimeUpdate');
      var listenerProgress = self.get('listenerProgress');

      video = self.get('video');
      video.removeEventListener('timeupdate', listenerTimeUpdate, false);
      video.removeEventListener('progress', listenerProgress, false);

      self.set('listenerTimeUpdate', false);
      self.set('listenerProgress', false);
    },

    addMouseMoveListener: function addMouseMoveListener() {
      var self = this;
      var listenerMouseMove = $('#ls-video').mousemove(function (e) {
        Ember['default'].run.debounce(self, self.sendAction('changeAppMode', 'playback.controls'), 2000);
      });

      self.set('listenerMouseMove', listenerMouseMove);
    },

    removeMouseMoveListener: function removeMouseMoveListener() {
      var self = this;
      var listenerMouseMove = false;

      $('#ls-video').unbind('mousemove');

      self.set('listenerMouseMove', listenerMouseMove);
    },

    setup: function setup() {
      var self = this;
      var video = false;

      self.set('video', self.$('#ls-video').get(0));
      video = self.get('video');

      if (bp3 === true || bp4 === true || bp5 === true) {
        video.volume = 0;
        video.load();
      }
    },

    initFunction: function initFunction() {
      var self = this;

      self._super();

      if (self.get('firstRun')) {
        var resizeHandler = function resizeHandler() {
          var thisHeight = Ember['default'].String.htmlSafe(window.innerWidth / 16 * 9);
          self.setBreakpoint();
          self.set('height', thisHeight);
        };

        self.set('resizeHandler', resizeHandler);

        Ember['default'].$(window).bind('resize', self.get('resizeHandler'));

        Ember['default'].run.later(function () {
          var thisHeight = Ember['default'].String.htmlSafe(window.innerWidth / 16 * 9);
          self.set('height', thisHeight);
        }, 500);

        self.set('firstRun', false);
        self.setBreakpoint();
        self.setup();
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    },

    willDestroy: function willDestroy() {
      var self = this;
      Ember['default'].$(window).unbind('resize', self.get('resizeHandler'));
    },

    setBreakpoint: function setBreakpoint() {
      bp1 = false;
      bp2 = false;
      bp3 = false;
      bp4 = false;
      bp5 = false;

      if (window.innerWidth < 448) {
        bp1 = true;
        Ember['default'].$('#ls-video').prop('controls', true);
        return;
      }

      if (window.innerWidth > 448 && window.innerWidth < 760) {
        bp2 = true;
        Ember['default'].$('#ls-video').prop('controls', true);
        return;
      }

      if (window.innerWidth > 760 && window.innerWidth < 1200) {
        bp3 = true;
        Ember['default'].$('#ls-video').prop('controls', false);
        return;
      }

      if (window.innerWidth > 1200 && window.innerWidth < 1760) {
        bp4 = true;
        Ember['default'].$('#ls-video').prop('controls', false);
        return;
      }

      if (window.innerWidth > 1760) {
        bp5 = true;
        Ember['default'].$('#ls-video').prop('controls', false);
        return;
      }
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/video-player/controls/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: [],

    actions: {
      buttonVolume: function buttonVolume() {
        var self = this;
        self.sendAction('buttonPress', 'volume');
      },

      buttonRewind: function buttonRewind() {
        var self = this;
        self.sendAction('buttonPress', 'rewind');
      },

      buttonPlayPause: function buttonPlayPause() {
        var self = this;
        self.sendAction('buttonPress', 'play-pause');
      },

      buttonFullScreen: function buttonFullScreen() {
        var self = this;
        self.sendAction('buttonPress', 'full-screen');
      },

      buttonAirplay: function buttonAirplay() {
        var self = this;
        self.sendAction('buttonPress', 'air-play');
      }
    },

    initFunction: function initFunction() {
      var self = this;

      self._super();

      console.log('controls - initFunction');
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/video-player/controls/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/controls/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","iconfont iconfont-ls_icon_pause");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/controls/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","iconfont iconfont-ls_icon_play");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/controls/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","button pull-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","button pull-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-ls_icon_back30");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","button pull-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-ls_icon_volume");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","button pull-right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-ls_icon_expand");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","button pull-right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","iconfont iconfont-ls_icon_airplay");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(fragment, [2, 1]);
        var element2 = dom.childAt(fragment, [4, 1]);
        var element3 = dom.childAt(fragment, [6, 1]);
        var element4 = dom.childAt(fragment, [8, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createElementMorph(element4);
        return morphs;
      },
      statements: [
        ["element","action",["buttonPlayPause"],[],["loc",[null,[2,5],[2,33]]]],
        ["block","if",[["get","videoPlaying",["loc",[null,[3,10],[3,22]]]]],[],0,1,["loc",[null,[3,4],[7,11]]]],
        ["element","action",["buttonRewind"],[],["loc",[null,[12,5],[12,30]]]],
        ["element","action",["buttonVolume"],[],["loc",[null,[18,5],[18,30]]]],
        ["element","action",["buttonFullScreen"],[],["loc",[null,[24,5],[24,34]]]],
        ["element","action",["buttonAirplay"],[],["loc",[null,[30,5],[30,31]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/video-player/scrub-bar/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['scrubBarPreview:preview-active:preview-inactive', 'barStatus:bar-active:bar-inactive'],

    firstRun: true,
    scrubBarDownloadProgress: 0,
    scrubBarPlaybackBarProgress: 0,
    scrubBarPlaybackHeadProgress: 0,
    scrubBarPreviewPosition: 0,
    scrubBarPreviewImage: '',
    scrubBarPreviewEvent: false,
    scrubBarPreview: false,
    listenerMouseOver: false,
    listenerMouseOut: false,
    events: false,
    barStatus: false,

    observeVideoDownload: Ember['default'].observer('videoDownload', function () {
      var self = this;
      var videoDownload = self.get('videoDownload');
      var left = videoDownload.downloadPosition;
      var width = videoDownload.downloadPercentage;
      var style = Ember['default'].String.htmlSafe('left: ' + left + '%; width:' + width + '%; transform: width left; transition: 200ms linear;');

      self.set('scrubBarDownloadProgress', style);
    }),

    observeVideoPlayback: Ember['default'].observer('videoPlayback', function () {
      var self = this;
      var videoPlayback = self.get('videoPlayback');
      var percentage = videoPlayback.position;

      var styleBar = Ember['default'].String.htmlSafe('width:' + percentage + '%; transform: width; transition: 200ms linear;');
      var stylePlayhead = Ember['default'].String.htmlSafe('left:' + percentage + '%; transform: left; transition: 200ms linear;');

      self.set('scrubBarPlaybackBarProgress', styleBar);
      self.set('scrubBarPlaybackHeadProgress', stylePlayhead);
    }),

    actions: {
      click: function click() {
        var self = this;
        var x = event.layerX;
        var width = Ember['default'].$('.bar').width();
        var percentage = Math.floor(x / width * 100);

        self.updatePreviewImage(percentage);
      }
    },

    updatePreviewImage: function updatePreviewImage(percentage) {
      var self = this;
      var image = "https://s3-eu-west-1.amazonaws.com/uk.livesport/video-1/" + Math.floor(percentage) + ".jpg";
      var previewPercentage = Ember['default'].$('.preview').width() / Ember['default'].$('.bar').width() * 100 / 2;
      var style = Ember['default'].String.htmlSafe('left:' + (percentage - previewPercentage) + '%; transform: left; transition: 200ms linear;');
      var events = self.get('events');

      self.set('scrubBarPreviewPosition', style);
      self.set('scrubBarPreviewImage', image);
      self.set('scrubBarPreview', true);
      self.set('scrubBarPreviewEvent', false);
      self.set('barStatus', true);

      for (var i = 0; i < events.length; i++) {
        if (percentage === events[i].position) {
          self.set('scrubBarPreviewEvent', events[i]);
        }
      }

      self.sendAction('skipToPercentage', percentage);

      Ember['default'].run.later(function () {
        //self.set('barStatus', false);
        self.set('scrubBarPreview', false);
      }, 1000);
    },

    addMouseOverListener: function addMouseOverListener() {
      // var self = this;
      // var listenerMouseOver = $('.bar').mouseover(function(e) {
      //   Ember.run.debounce(self, self.set('barStatus', true), 2000);
      // });

      // var listenerMouseOut = $('.bar').mouseout(function(e) {
      //   Ember.run.debounce(self, self.set('barStatus', false), 2000);
      // });

      // self.set('listenerMouseOver', listenerMouseOver);
      // self.set('listenerMouseOut', listenerMouseOut);
    },

    removeMouseOverListener: function removeMouseOverListener() {
      // var self = this;
      // var listenerMouseOver = false;
      // var listenerMouseOut = false;

      // $(window).unbind('mouseover');
      // $(window).unbind('mouseout');

      // self.set('listenerMouseOver', listenerMouseOver);
      // self.set('listenerMouseOut', listenerMouseOut);
    },

    initFunction: function initFunction() {
      var self = this;

      self._super();

      if (self.get('firstRun')) {
        var events = [{
          id: 1,
          position: 20,
          name: 'Goal'
        }, {
          id: 2,
          position: 44,
          name: 'Yellow card'
        }, {
          id: 4,
          position: 70,
          name: 'Bad tackle'
        }, {
          id: 4,
          position: 92,
          name: 'Goal'
        }];

        self.set('events', events);
        self.set('firstRun', false);

        self.addMouseOverListener();

        console.log('scrub bar - initFunction');
      }
    },

    didRender: function didRender() {
      Ember['default'].run.scheduleOnce('afterRender', this, 'initFunction');
    }
  });

});
define('base-method-ember-styleguide/pods/components/web/video-player/scrub-bar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 9,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/scrub-bar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","time hide");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","event");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","scrubBarPreviewEvent.position",["loc",[null,[7,31],[7,64]]]],
          ["content","scrubBarPreviewEvent.name",["loc",[null,[8,27],[8,56]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 14,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/scrub-bar/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","event");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'style');
          morphs[1] = dom.createAttrMorph(element0, 'id');
          return morphs;
        },
        statements: [
          ["attribute","style",["concat",["left:",["get","event.position",["loc",[null,[13,41],[13,55]]]],"%;"]]],
          ["attribute","id",["concat",[["get","event.id",["loc",[null,[13,67],[13,75]]]]]]]
        ],
        locals: ["event"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/scrub-bar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","inner");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bar");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","preview");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"alt","preview-image");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","events");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","playhead");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","playback-progress");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","download-progress");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element1, [5]);
        var element5 = dom.childAt(element1, [7]);
        var element6 = dom.childAt(element1, [9]);
        var morphs = new Array(8);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeAttrMorph(element2, 'style');
        morphs[2] = dom.createAttrMorph(element3, 'src');
        morphs[3] = dom.createMorphAt(element2,3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[5] = dom.createAttrMorph(element4, 'style');
        morphs[6] = dom.createAttrMorph(element5, 'style');
        morphs[7] = dom.createAttrMorph(element6, 'style');
        return morphs;
      },
      statements: [
        ["element","action",["click"],[],["loc",[null,[2,19],[2,37]]]],
        ["attribute","style",["get","scrubBarPreviewPosition",["loc",[null,[3,34],[3,57]]]]],
        ["attribute","src",["concat",[["get","scrubBarPreviewImage",["loc",[null,[4,19],[4,39]]]]]]],
        ["block","if",[["get","scrubBarPreviewEvent",["loc",[null,[6,12],[6,32]]]]],[],0,null,["loc",[null,[6,6],[9,13]]]],
        ["block","each",[["get","events",["loc",[null,[12,23],[12,29]]]]],[],1,null,["loc",[null,[12,6],[14,15]]]],
        ["attribute","style",["concat",[["get","scrubBarPlaybackHeadProgress",["loc",[null,[16,36],[16,64]]]]]]],
        ["attribute","style",["concat",[["get","scrubBarPlaybackBarProgress",["loc",[null,[17,45],[17,72]]]]]]],
        ["attribute","style",["concat",[["get","scrubBarDownloadProgress",["loc",[null,[18,45],[18,69]]]]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('base-method-ember-styleguide/pods/components/web/video-player/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createTextNode("Settings");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel nulla egestas, tempor turpis et, blandit arcu. Sed lacus eros, bibendum in sapien id, sagittis aliquet lacus. Duis ac lacus sed tortor suscipit viverra ut feugiat dolor.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h3");
            var el2 = dom.createTextNode("Stats");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel nulla egestas, tempor turpis et, blandit arcu. Sed lacus eros, bibendum in sapien id, sagittis aliquet lacus. Duis ac lacus sed tortor suscipit viverra ut feugiat dolor.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 35,
                  "column": 6
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h3");
              var el2 = dom.createTextNode("Follow");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel nulla egestas, tempor turpis et, blandit arcu. Sed lacus eros, bibendum in sapien id, sagittis aliquet lacus. Duis ac lacus sed tortor suscipit viverra ut feugiat dolor.");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.8",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 38,
                    "column": 6
                  }
                },
                "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h3");
                var el2 = dom.createTextNode("Camera");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel nulla egestas, tempor turpis et, blandit arcu. Sed lacus eros, bibendum in sapien id, sagittis aliquet lacus. Duis ac lacus sed tortor suscipit viverra ut feugiat dolor.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n      ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.8",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 6
                },
                "end": {
                  "line": 38,
                  "column": 6
                }
              },
              "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","offcanvasStateCamera",["loc",[null,[35,16],[35,36]]]]],[],0,null,["loc",[null,[35,6],[38,6]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","offcanvasStateFollow",["loc",[null,[32,16],[32,36]]]]],[],0,1,["loc",[null,[32,6],[38,6]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","offcanvasStateStats",["loc",[null,[29,16],[29,35]]]]],[],0,1,["loc",[null,[29,6],[38,6]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.title",["loc",[null,[45,8],[45,23]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" vs ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0,0,0);
          morphs[1] = dom.createMorphAt(element0,2,2);
          return morphs;
        },
        statements: [
          ["content","model.team1",["loc",[null,[47,8],[47,23]]]],
          ["content","model.team2",["loc",[null,[47,27],[47,42]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/components/web/video-player/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","video-offcanvas");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","menu");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"id","camera");
        dom.setAttribute(el3,"class","button pull-right");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","icon text-center");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_camera");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","detail text-center");
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("Camera");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"id","stats");
        dom.setAttribute(el3,"class","button pull-right");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","icon text-center");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_data");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","detail text-center");
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("Stats");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"id","follow");
        dom.setAttribute(el3,"class","button pull-right");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","icon text-center");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_plus");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","detail text-center");
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("Follow");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"id","settings");
        dom.setAttribute(el3,"class","button pull-right");
        dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","icon text-center");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","iconfont iconfont-ls_icon_settings");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","detail text-center");
        var el5 = dom.createElement("span");
        var el6 = dom.createTextNode("Settings");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","content hidden-bp1 hidden-bp2");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","inner");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","video-info hidden-bp1 hidden-bp2");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","video-controls hidden-bp1 hidden-bp2");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","top pull-left");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","duration pull-left");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","scrub-bar pull-left");
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","status pull-right");
        var el4 = dom.createTextNode("LIVE");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bottom");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","video-player");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2,"class","img-responsive hidden-bp3 hidden-bp4 hidden-bp5");
        dom.setAttribute(el2,"width","100%");
        dom.setAttribute(el2,"height","100%");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("video");
        dom.setAttribute(el2,"id","ls-video");
        dom.setAttribute(el2,"class","hidden-bp1 hidden-bp2");
        dom.setAttribute(el2,"width","100%");
        dom.setAttribute(el2,"autoplay","");
        dom.setAttribute(el2,"preload","");
        dom.setAttribute(el2,"loop","");
        dom.setAttribute(el2,"webkit-playsinline","");
        dom.setAttribute(el2,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("source");
        dom.setAttribute(el3,"type","video/mp4");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    Your browser does not support the video tag.\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element1, [3]);
        var element8 = dom.childAt(fragment, [2]);
        var element9 = dom.childAt(fragment, [4]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(fragment, [6]);
        var element12 = dom.childAt(element11, [1]);
        var element13 = dom.childAt(element11, [3]);
        var element14 = dom.childAt(element13, [1]);
        var morphs = new Array(18);
        morphs[0] = dom.createElementMorph(element3);
        morphs[1] = dom.createElementMorph(element4);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createAttrMorph(element7, 'style');
        morphs[5] = dom.createMorphAt(dom.childAt(element7, [1]),1,1);
        morphs[6] = dom.createMorphAt(element8,1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element8, [3]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element10, [1]),0,0);
        morphs[9] = dom.createMorphAt(dom.childAt(element10, [3]),1,1);
        morphs[10] = dom.createMorphAt(dom.childAt(element9, [3]),1,1);
        morphs[11] = dom.createUnsafeAttrMorph(element11, 'style');
        morphs[12] = dom.createAttrMorph(element12, 'src');
        morphs[13] = dom.createElementMorph(element12);
        morphs[14] = dom.createUnsafeAttrMorph(element13, 'height');
        morphs[15] = dom.createAttrMorph(element13, 'poster');
        morphs[16] = dom.createElementMorph(element13);
        morphs[17] = dom.createAttrMorph(element14, 'src');
        return morphs;
      },
      statements: [
        ["element","action",["buttonOffCanvas","camera"],[],["loc",[null,[3,47],[3,84]]]],
        ["element","action",["buttonOffCanvas","stats"],[],["loc",[null,[8,46],[8,82]]]],
        ["element","action",["buttonOffCanvas","follow"],[],["loc",[null,[13,47],[13,84]]]],
        ["element","action",["buttonOffCanvas","settings"],[],["loc",[null,[18,49],[18,88]]]],
        ["attribute","style",["concat",["height:",["get","height",["loc",[null,[24,61],[24,67]]]],"px;"]]],
        ["block","if",[["get","offcanvasStateSettings",["loc",[null,[26,12],[26,34]]]]],[],0,1,["loc",[null,[26,6],[38,13]]]],
        ["block","if",[["get","model.title",["loc",[null,[44,8],[44,19]]]]],[],2,3,["loc",[null,[44,2],[48,9]]]],
        ["inline","t",[["get","model.description",["loc",[null,[50,9],[50,26]]]]],[],["loc",[null,[50,5],[50,28]]]],
        ["content","videoCurrentTime",["loc",[null,[55,36],[55,56]]]],
        ["inline","web/video-player/scrub-bar",[],["videoDownload",["subexpr","@mut",[["get","videoDownload",["loc",[null,[57,50],[57,63]]]]],[],[]],"videoPlayback",["subexpr","@mut",[["get","videoPlayback",["loc",[null,[57,78],[57,91]]]]],[],[]],"skipToPercentage","skipToPercentage"],["loc",[null,[57,7],[57,129]]]],
        ["inline","web/video-player/controls",[],["buttonPress","buttonPress","videoPlaying",["subexpr","@mut",[["get","videoPlaying",["loc",[null,[63,71],[63,83]]]]],[],[]]],["loc",[null,[63,4],[63,85]]]],
        ["attribute","style",["get","videoStyle",["loc",[null,[67,35],[67,45]]]]],
        ["attribute","src",["concat",["images/posters/",["get","model.posterImage",["loc",[null,[68,109],[68,126]]]]]]],
        ["element","action",["videoClick"],[],["loc",[null,[68,7],[68,30]]]],
        ["attribute","height",["get","height",["loc",[null,[69,100],[69,106]]]]],
        ["attribute","poster",["concat",["images/posters/",["get","model.posterImage",["loc",[null,[69,135],[69,152]]]]]]],
        ["element","action",["videoClick"],[],["loc",[null,[69,9],[69,32]]]],
        ["attribute","src",["concat",[["get","model.videoSrc",["loc",[null,[70,19],[70,33]]]]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('base-method-ember-styleguide/pods/page/model', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  // import Ember from 'ember';
  var Page = DS['default'].Model.extend({
    locale: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    slug: DS['default'].attr('string'),
    route: DS['default'].attr('string'),
    category: DS['default'].attr('string'),
    rails: DS['default'].attr('array')
  });

  //// Fixture setup
  var pages = [];
  // var tiles = [];
  var pageId = 0;
  var railId = 0;
  var tileId = 0;

  /*
   *
   * Generic data
   *
   */
  var sports = ["American Football", "Baseball", "Basketball", "Boxing", "Darts", "Equestrian", "Football", "Golf", "Horse Racing", "Ice Hockey", "Tennis", "Volleyball", "Wrestling"];
  var sportObjs = generateCategoryObjects(1, 'sport', 'sport', sports, false, true, 'all-sports/', '.jpg', true, false, false, false);

  /*
   *
   * Football data
   *
   */
  var footballTeams = ["Arsenal", "Aston Villa", "Bournemouth", "Chelsea", "Crystal Palace", "Everton", "Leicester City", "Liverpool", "Manchester City", "Manchester United", "Newcastle United", "Norwich City", "Southampton", "Stoke City", "Sunderland", "Swansea City", "Tottenham Hotspur", "Watford", "West Bromwich Albion", "West Ham United"];
  var footballLeagues = ["Champions League", "Europa League", "La Ligue", "Ligue 1", "Premier League", "Serie A", "Bundesliga", "Scottish League 1"];
  var footballRelatedContent = ["The Two Escobars", "Keane and Vieira: The Best of Enemies", "Socrates and The Corinthians’ Democracy", "Next Goal Wins"];
  var footballTeamObjs = generateCategoryObjects(1, 'competitor', 'football', footballTeams, true, false, 'football/competitors/', '.png', false, true, false, false);
  var footballLeagueObjs = generateCategoryObjects(1, 'competition', 'football', footballLeagues, true, false, 'football/competitions/', '.png', false, false, false, true);
  var footballFixtureObjs = generateFixtures(1, footballTeams, 'football', 'Premier League', true, '.png', '.png');
  var footballRelatedContentObjs = generateRelatedContentObjects(1, 'related-content', 'Football', footballRelatedContent, 'football/related-content/', '.jpg');

  /*
   *
   * Tennis data
   *
   */
  var tennisPlayers = ["Novak Djokovic", "Roger Federer", "Andy Murray", "Stan Wawrinka", "Tomas Berdych", "Kei Nishikori", "Rafael Nadal", "David Ferrer", "Milos Raonic", "Gilles Simon", "Serena Williams", "Simona Halep", "Maria Sharapova", "Petra Kvitova", "Lucie Safarova", "Flavia Pennetta", "Agnieszka Radwanska", "Garbine Muguruza", "Ana Ivanovic", "Carla Suarez Navarro"];
  var tennisCompetitions = ["Australian Open", "French Open", "Wimbledon", "US Open"];
  var tennisRelatedContentObjs = ["The enduring appeal of Roger Federer", "Andy Murray: Behind the Racquet"];
  var tennisFixtureObjs = generateFixtures(1, tennisPlayers, 'tennis', 'Wimbledon', false, '.jpg', '.png');
  var tennisCompetitionObjs = generateCategoryObjects(1, 'competition', 'tennis', tennisCompetitions, true, false, 'tennis/competitions/', '.png', false, false, true, true);
  var tennisPlayerObjs = generateCategoryObjects(1, 'competitor', 'tennis', tennisPlayers, false, true, 'tennis/competitors/', '.jpg', false, false, true, false);
  var tennisRelatedContentObjs = generateRelatedContentObjects(1, 'related-content', 'Tennis', tennisRelatedContentObjs, 'tennis/related-content/', '.jpg');

  /*
   *
   * HOMEPAGE rails
   *
   */
  var railHomeForYou = createRail("For You", footballFixtureObjs.slice(0, 25), true, true, false);
  var railHomeSchedule = createRail("Schedule", createChronologicalRail(tennisFixtureObjs.slice(26, 51)), true, false, true);
  var railHomeEditorsPicks = createRail("Editor's Picks", footballFixtureObjs.slice(52, 77), true, true, false);
  var railHomeMostPopular = createRail("Most Popular", tennisFixtureObjs.slice(0, 25), true, false, false);
  var railHomeAllSports = createRail("All Sports", sportObjs, true, false, false);
  var railHomeFollowingTennis = createRail("Tennis", tennisFixtureObjs.slice(0, 3), true, false, false);
  var railHomeFollowingFootball = createRail("Football", footballFixtureObjs.slice(0, 5), true, false, false);
  var pageHome = createPage("en-gb", "Home", "videos", "homepage", [railHomeForYou, railHomeSchedule, railHomeEditorsPicks, railHomeMostPopular, railHomeAllSports, railHomeFollowingTennis, railHomeFollowingFootball]);
  //var pageHome = createPage("en-gb", "Home", "videos", "homepage", [railHomeSchedule]);

  /*
   *
   * Football rails
   *
   */
  var railFootballLive = createRail("Live now", resetStatus(footballFixtureObjs.slice(0, 6), "statusIsLive"), true, false, false);
  var railFootballLeagues = createRail("Tournaments", footballLeagueObjs, true, false, false);
  var railFootballComingUp = createRail("Coming up", resetStatus(footballFixtureObjs.slice(10, 20), "statusIsComingSoon"), true, false, false);
  var railFootballCatchUp = createRail("Catch up", resetStatus(footballFixtureObjs.slice(21, 32), "statusIsCatchUp"), true, false, false);
  var railFootballRelatedContent = createRail('Related content', footballRelatedContentObjs, true, false, false);
  var railFootballTeams = createRail("Teams", footballTeamObjs, true, false, false);
  var railFootballOtherSports = createRail("All Sports", removeSport(sportObjs, 'Football'), true, false, false);
  var pageFootball = createPage("en-gb", "Football", "sport", "football", [railFootballLive, railFootballLeagues, railFootballComingUp, railFootballCatchUp, railFootballRelatedContent, railFootballTeams, railFootballOtherSports]);

  /*
   *
   * Tennis rail
   *
   */
  var railTennisLive = createRail("Live now", resetStatus(tennisFixtureObjs.slice(0, 3), "statusIsLive"), true, true, false);
  var railTennisCompeitions = createRail("Tournaments", tennisCompetitionObjs, true, false, false);
  var railTennisComingUp = createRail("Coming up", resetStatus(tennisFixtureObjs.slice(4, 8), "statusIsComingSoon"), true, true, false);
  var railTennisCatchUp = createRail("Catch up", resetStatus(tennisFixtureObjs.slice(8, 11), "statusIsCatchUp"), true, true, false);
  var railTennisRelatedContent = createRail('Related content', tennisRelatedContentObjs, true, false, false);
  var railTennisPlayers = createRail("Players", tennisPlayerObjs, true, false, false);
  var railTennisOtherSports = createRail("All Sports", removeSport(sportObjs, 'Tennis'), true, false, false);
  var pageTennis = createPage("en-gb", "Tennis", "sport", "tennis", [railTennisLive, railTennisCompeitions, railTennisComingUp, railTennisCatchUp, railTennisRelatedContent, railTennisPlayers, railTennisOtherSports]);

  var pageArsenal = createPage("en-gb", "Arsenal", "competitor-competition", "football", [railFootballRelatedContent, railFootballLeagues, railFootballTeams, railFootballOtherSports]);
  var pageChampionsLeague = createPage("en-gb", "Champions League", "competitor-competition", "football", [railFootballLive, railFootballTeams, railFootballComingUp, railFootballCatchUp, railFootballRelatedContent, railFootballLeagues, railFootballOtherSports]);
  var pageAndyMurray = createPage("en-gb", "Andy Murray", "competitor-competition", "tennis", [railTennisRelatedContent, railTennisCompeitions, railTennisPlayers, railTennisOtherSports]);

  /*
   *
   * Create out fixture data
   *
   */
  Page.reopenClass({
    FIXTURES: pages.concat(pageHome, pageFootball, pageTennis, pageArsenal, pageChampionsLeague, pageAndyMurray)
  });

  exports['default'] = Page;

  function createPage(locale, title, route, category, rails) {
    pageId = pageId + 1;
    var obj = {
      "id": pageId,
      "locale": locale,
      "title": title,
      "slug": convertToSlug(title),
      "route": route,
      "rails": rails
    };
    return obj;
  }

  function createRail(title, tiles, isPod, isFeatured, isChronological) {
    railId = railId + 1;

    var obj = {
      "id": railId,
      "title": title,
      "slug": convertToSlug(title),
      "tiles": tiles,
      "isPod": isPod,
      "isFeatured": isFeatured,
      "isChronological": isChronological
    };
    return obj;
  }

  function createTile(properties) {
    tileId = tileId + 1;

    //to do refactor to a better place.
    var path = 'https://s3-eu-west-1.amazonaws.com/uk.livesport/';
    var videos = ['video-2', 'video-3', 'video-1', 'video-4', 'video-5'];

    var ran = Math.floor(Math.random() * videos.length);
    var src = path + videos[tileId % videos.length] + '.mp4';
    //var src = path + videos[(tileId%ran)]+ '.mp4';

    var obj = {
      "id": tileId,
      "type": properties["type"],
      "status": properties["status"],
      "route": properties["route"],
      "title": properties["title"],
      "slug": convertToSlug(properties["title"]),
      "description": properties["description"],
      "sport": properties["sport"],
      "sportSlug": convertToSlug(properties["sport"]),
      "team1": properties["team1"],
      "team2": properties["team2"],
      "team1_short": properties["team1"],
      "team2_short": properties["team2"],
      "team1_logo": properties["team1_logo"],
      "team2_logo": properties["team2_logo"],
      "tournament": properties["tournament"],
      "tournament_logo": properties["tournament_logo"],
      "videoSrc": src,
      "thumbnail": properties["thumbnail"],
      "isThumbnailLogo": properties["isThumbnailLogo"],
      "isThumbnailPicture": properties["isThumbnailPicture"],
      "isTeamSport": properties["isTeamSport"],
      "isPlayer": properties["isTeamSport"],
      "isTeam": properties["isTeam"],
      "isPlayer": properties["isPlayer"],
      "isSport": properties["isSport"],
      "isCompetition": properties["isCompetition"],
      "isPlaying": false,
      "hasHappened": false,
      "statusIsLive": properties["statusIsLive"],
      "statusIsCatchUp": properties["statusIsCatchUp"],
      "statusIsVOD": properties["statusIsVOD"],
      "statusIsComingSoon": properties["statusIsComingSoon"],
      "statusIsPaused": properties["statusIsPaused"],
      "statusIsDelayed": properties["statusIsDelayed"],
      "stateIsCategory": properties["stateIsCategory"],
      "posterImage": videos[tileId % videos.length] + '.jpg'
    };
    return obj;
  }

  function generateRandomLoremIpsum() {
    var lorems = ['description-1', 'description-2', 'description-3', 'description-4', 'description-5'];

    return lorems[Math.floor(lorems.length * Math.random())];
  }

  function generateCategoryObjects(baseId, type, sport, items, isThumbnailLogo, isThumbnailPicture, path, format, isSport, isTeam, isPlayer, isCompetition) {
    var obj = false;
    var objs = [];
    var properties = [];
    var thumbnail = "";

    for (var i = 0; i < items.length; i++) {
      thumbnail = path + convertToSlug(items[i]) + format;
      properties = [];
      properties["id"] = baseId + i;
      properties["type"] = type;
      properties["title"] = items[i];
      properties["sport"] = sport;
      properties["route"] = type;
      properties["thumbnail"] = thumbnail;
      properties["stateIsCategory"] = true;
      properties["isThumbnailLogo"] = isThumbnailLogo;
      properties["isThumbnailPicture"] = isThumbnailPicture;

      properties["isSport"] = isSport;
      properties["isTeam"] = isTeam;
      properties["isPlayer"] = isPlayer;
      properties["isCompetition"] = isCompetition;

      obj = createTile(properties);
      objs.push(obj);
    }
    return objs;
  }

  function generateRelatedContentObjects(baseId, type, sport, items, path, format) {
    var obj = false;
    var objs = [];
    var properties = [];
    var thumbnail = "";

    for (var i = 0; i < items.length; i++) {
      thumbnail = path + convertToSlug(items[i]) + format;
      properties = [];
      properties["id"] = baseId + i;
      properties["type"] = type;
      properties["title"] = items[i];
      properties["sport"] = sport;
      properties["route"] = type;
      properties["thumbnail"] = thumbnail;
      properties["isThumbnailLogo"] = false;
      properties["isThumbnailPicture"] = true;
      properties["statusIsVOD"] = true;
      properties["description"] = generateRandomLoremIpsum();

      obj = createTile(properties);
      objs.push(obj);
    }
    return objs;
  }

  function removeSport(items, title) {
    var newItems = [];

    for (var i = 0; i < items.length; i++) {
      if (items[i].title !== title) {
        newItems.push(items[i]);
      }
    }
    return newItems;
  }

  function resetStatus(items, status) {
    var newItems = [];

    for (var i = 0; i < items.length; i++) {
      items[i]["statusIsLive"] = false;
      items[i]["statusIsCatchUp"] = false;
      items[i]["statusIsVOD"] = false;
      items[i]["statusIsComingSoon"] = false;
      items[i]["statusIsPaused"] = false;
      items[i]["statusIsDelayed"] = false;
      items[i]["stateIsCategory"] = false;
      items[i][status] = true;

      newItems.push(items[i]);
    }
    return newItems;
  }

  function createChronologicalRail(items, length) {
    for (var i = 0; i < items.length; i++) {

      if (i < 4) {
        console.log('i: ' + i);
        items[i]["hasHappened"] = true;
      }
    }
    return items;
  }

  function generateFixtures(baseId, teams, sport, tournament, isTeamSport, logoImageFormat, tournamentImageFormat) {
    var obj = false;
    var objs = [];
    var home = false;
    var away = false;
    var uId = 0;
    var homeLastObject = false;
    var awayLastObject = false;

    if (teams.length % 2 !== 0) {
      console.log('MUST BE AN EVEN NUMBER OF TEAMS');
      return false;
    }

    home = teams;
    away = teams.splice(teams.length / 2);

    for (var i = 0; i < home.length + away.length - 1; i++) {

      if (away[i] === undefined) {
        break;
      }

      for (var j = 0; j < home.length; j++) {
        uId++;

        obj = createFixture(uId, sport, 'live', home[j], away[i], tournament, isTeamSport, logoImageFormat, tournamentImageFormat);
        obj.id = baseId + uId;
        objs.push(obj);

        if (home.length + away.length - 1 > 2) {
          homeLastObject = home.shift();
          awayLastObject = away.shift();

          home.push(awayLastObject);
          away.push(homeLastObject);
        }
      }
    }

    return objs;
  }

  function createFixture(id, sport, status, team1, team2, tournament, isTeamSport, logoImageFormat, tournamentImageFormat) {
    var team1LogoImagePath = sport + '/competitors/' + convertToSlug(team1) + logoImageFormat;
    var team2LogoImagePath = sport + '/competitors/' + convertToSlug(team2) + logoImageFormat;
    var tournamentImagePath = sport + '/competitions/' + convertToSlug(tournament) + tournamentImageFormat;
    var thumbnailImagePath = sport + '/fixtures/' + sport + '_' + Math.floor(Math.random() * 10 + 1) + '.jpg';

    var properties = [];
    properties["id"] = id;
    properties["type"] = "fixture";
    properties["status"] = status;
    properties["title"] = team1 + " vs " + team2;
    properties["route"] = "video";
    properties["sport"] = sport;
    properties["team1"] = team1;
    properties["team2"] = team2;
    properties["team1_short"] = team1;
    properties["team2_short"] = team2;
    properties["team1_logo"] = team1LogoImagePath;
    properties["team2_logo"] = team2LogoImagePath;
    properties["tournament"] = tournament;
    properties["tournament_logo"] = tournamentImagePath;
    properties["isTeamSport"] = isTeamSport;
    properties["videoSrc"] = "football2.mp4";
    properties["thumbnail"] = thumbnailImagePath;
    properties["description"] = generateRandomLoremIpsum();

    if (id === 1 || id === 2) {
      properties["statusIsLive"] = true;
    } else if (id === 7) {
      properties["statusIsCatchUp"] = true;
    } else if (id === 3 || id === 4) {
      properties["statusIsVOD"] = true;
    } else if (id === 5 || id === 6) {
      properties["statusIsComingSoon"] = true;
    } else {
      properties["statusIsComingSoon"] = true;
    }

    return createTile(properties);
  }

  function convertToSlug(text) {
    return text.toLowerCase().replace(/[^\w ]+/g, '').replace(/ +/g, '-');
  }

});
define('base-method-ember-styleguide/pods/rail/model', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  // import Ember from 'ember';
  var Rail = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    slug: DS['default'].attr('string'),
    category: DS['default'].attr('string'),
    isPod: DS['default'].attr('boolean'),
    isFeatured: DS['default'].attr('boolean'),
    isChronological: DS['default'].attr('boolean'),
    tiles: DS['default'].hasMany('tile'),
    page: DS['default'].belongsTo('page')
  });

  exports['default'] = Rail;

});
define('base-method-ember-styleguide/pods/styleguide/account/cancel-subscription/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/account/cancel-subscription/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/account/cancel-subscription/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","account/cancel-subscription",["loc",[null,[2,2],[2,33]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/account/cancel-subscription/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Cancel Subscription"],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/account/my-account/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/account/my-account/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/account/my-account/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container limited-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("My Details");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("Subscription");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("My Devices");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4 bp3-col-6");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 3]),1,1);
        return morphs;
      },
      statements: [
        ["content","account/my-details",["loc",[null,[7,8],[7,30]]]],
        ["content","account/my-subscription",["loc",[null,[15,8],[15,35]]]],
        ["content","account/my-devices",["loc",[null,[23,8],[23,30]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/buttons/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/buttons/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/styleguide/buttons/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","iconfont iconfont-ls_icon_search");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 161,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Button");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Loading spinner appears after click.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Disabled button");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Will be enabled once the form is complete and validated (by the front end).");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Menu button");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Present in header, only one button can be open at the same time.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"style","display:inline-block");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Link ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("single");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("border size below augments on roll over.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3,"href","#");
          dom.setAttribute(el3,"class","link-unique");
          dom.setAttribute(el3,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el4 = dom.createTextNode("Lorem ipsum");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Link ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("in paragraph");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("When link is inside a paragraph, rest of the content dims.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#");
          dom.setAttribute(el4,"class","link-paragraph");
          dom.setAttribute(el4,"style","touch-action: manipulation; -ms-touch-action: manipulation");
          var el5 = dom.createTextNode("Integer faucibus");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" sagittis euismod. Curabitur luctus ex id commodo rhoncus. Aenean dictum finibus erat a hendrerit. Vestibulum sollicitudin nisl quis tellus consequat, nec hendrerit augue scelerisque.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n\n\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("script");
          var el2 = dom.createTextNode("\n  $('.link-paragraph').on('mouseover', function(e){\n    $(this).closest('p').addClass('dim');\n    $(this).removeClass('link');\n  });\n\n  $('.link-paragraph').on('mouseout', function(){\n    $(this).closest('p').removeClass('dim');\n    $(this).addClass('link');\n  });\n\n\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5, 3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","form-fields/form-button",[],["title","SUBMIT","position","right","btnType","primary"],["loc",[null,[9,6],[9,83]]]],
          ["inline","form-fields/form-button",[],["title","SUBMIT","position","right","btnType","primary","btnState","disabled"],["loc",[null,[19,6],[19,103]]]],
          ["block","web/icon-btn",[],["action","search","search","search"],0,null,["loc",[null,[30,6],[32,25]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 161,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/buttons/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Buttons & Links","header",true],0,null,["loc",[null,[1,0],[161,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/category/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/category/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/category/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/category/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/component/controller', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/component/controller'], function (exports, controller) {

	'use strict';



	exports['default'] = controller['default'];

});
define('base-method-ember-styleguide/pods/styleguide/component/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/component/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/component/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/component/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/components/badges/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/components/badges/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/components/badges/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/components/rail/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/components/rail/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/components/rail/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","web/rail-item",[],["model",["subexpr","@mut",[["get","rail",["loc",[null,[2,24],[2,28]]]]],[],[]],"sendVideo","sendVideo","routeChange","routeChange"],["loc",[null,[2,2],[2,78]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/components/rail/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Rail","unlimitedContainer","true"],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/components/tiles/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    testModel1: {
      "statusIsLive": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isFeatured": true
    },

    testModel2: {
      "statusIsCatchUp": true,
      "tournament": "Wimbledon 2015",
      "game": "Men's Final",
      "team1_short": "R. Nadal",
      "team2_short": "R. Federer",
      "team1_long": "Rafael Nadal",
      "team2_long": "Roger Federer",
      "thumbnail": "tennis/fixtures/tennis_7.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
    },

    testModel3: {
      "statusIsComingSoon": true,
      "tournament": "Premiere League",
      "game": "Final",
      "team1_short": "Manchester United",
      "team2_short": "Arsenal",
      "team1_long": "Manchester United",
      "team2_long": "Arsenal FC",
      "team1_logo": "football/competitors/manchester-united.png",
      "team2_logo": "football/competitors/arsenal.png",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae",
      "isTeamSport": true
    },

    testModel4: {
      "statusIsVOD": true,
      "title": "Cristiano Ronaldo: World at His Feet",
      "sport": "Football",
      "thumbnail": "football/fixtures/football_15.jpg",
      "description": "Praesent molestie lacus ut cursus laoreet. Cras elit lectus, cursus eu lacus vitae"
    },

    testModel5: {
      "stateIsCategory": true,
      "title": "Manchester United",
      "thumbnail": "football/competitors/manchester-united.png"
    }
  });

});
define('base-method-ember-styleguide/pods/styleguide/components/tiles/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/components/tiles/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","styleguide/component/tile-component",["loc",[null,[2,2],[2,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/components/tiles/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Tiles","docLink","pdf/LS_tiles.pdf","unlimitedContainer","true","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/demo/controller', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/demo/controller'], function (exports, controller) {

	'use strict';



	exports['default'] = controller['default'];

});
define('base-method-ember-styleguide/pods/styleguide/demo/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/demo/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/demo/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/demo/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/form-fields/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/form-fields/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 6
              },
              "end": {
                "line": 40,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas a augue et nunc luctus commodo. Nam tempor, ex ac pulvinar convallis.\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 6
              },
              "end": {
                "line": 65,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Checkbox\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 6
              },
              "end": {
                "line": 77,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Radio Button\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.8",
            "loc": {
              "source": null,
              "start": {
                "line": 78,
                "column": 6
              },
              "end": {
                "line": 80,
                "column": 6
              }
            },
            "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Radio Button 2\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 183,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Input ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","dim");
          var el5 = dom.createTextNode("normal state");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Type error inside field to view error state");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Input ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","dim");
          var el5 = dom.createTextNode("Password");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Input ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","dim");
          var el5 = dom.createTextNode("inline editing");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Click anywhere to get to edit mode");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Textarea");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Dropdown Menu ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Works with the tab key on desktop.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Checkbox ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("There are 2 different modes, one if it's a one liner, and another if it's a paragraph.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Radio Button ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Form Button ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("After click, loading spinner inside the button to indicate an action is in progress (click a second time to cancel).");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Loading spinner");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8 style-row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n\n\n\n\n\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [13, 3]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5, 3]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7, 3]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9, 3]),1,1);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [11, 3]),1,1);
          morphs[6] = dom.createMorphAt(element0,1,1);
          morphs[7] = dom.createMorphAt(element0,2,2);
          morphs[8] = dom.createMorphAt(dom.childAt(fragment, [15, 3]),1,1);
          morphs[9] = dom.createMorphAt(dom.childAt(fragment, [17, 3]),1,1);
          return morphs;
        },
        statements: [
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","text"],["loc",[null,[9,6],[9,70]]]],
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","password","inputValue","test"],["loc",[null,[18,6],[18,92]]]],
          ["inline","form-fields/inline-editing",[],["label","TEXT INLINE EDITING","initialText","Test Content","singleInput",true,"type","text"],["loc",[null,[28,6],[28,120]]]],
          ["block","form-fields/text-area",[],["label","TEXT AREA","initialText","Test Content","col","6"],0,null,["loc",[null,[39,6],[40,32]]]],
          ["inline","form-fields/dropdown-menu",[],["ShowBoth",true],["loc",[null,[52,6],[52,49]]]],
          ["block","form-fields/check-box",[],[],1,null,["loc",[null,[63,6],[65,32]]]],
          ["block","form-fields/radio-button",[],["group","test-group"],2,null,["loc",[null,[75,6],[77,35]]]],
          ["block","form-fields/radio-button",[],["group","test-group"],3,null,["loc",[null,[78,6],[80,35]]]],
          ["inline","form-fields/form-button",[],["title","SUBMIT","position","left","btnType","primary"],["loc",[null,[91,6],[91,82]]]],
          ["inline","form-fields/loading-spinner",[],["big",true],["loc",[null,[102,6],[102,46]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 183,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/form-fields/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Form Fields","header",true],0,null,["loc",[null,[1,0],[183,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/colors/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/colors/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/colors/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","styleguide/foundation/colour-module",["loc",[null,[2,2],[2,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/colors/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Colours","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/colours/controller', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/foundation/colours/controller'], function (exports, controller) {

	'use strict';



	exports['default'] = controller['default'];

});
define('base-method-ember-styleguide/pods/styleguide/foundation/colours/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/foundation/colours/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/foundation/colours/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/foundation/colours/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/foundation/experience-principles/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/experience-principles/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/experience-principles/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row experience-principles");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Be confident in our offering.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Livesport has a sporting pedigree second to none. The viewer should feel comfortable enough to let the system suggest the best content for them.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Champion video content.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Content is our most valuable asset. Don’t leave it on the sidelines.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Delight is in the detail.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("We should take inspiration from the tried and tested, but improve it with obsessive attention to detail. We’re changing the game, not inventing a new one.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Maintain consistent energy.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Sport is about excitement, anticipation and energy. The interface should reflect this at every opportunity.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Celebrate with the crowd.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Watching the game at home on your own doesn’t have to mean that you’re alone.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h2");
          var el4 = dom.createTextNode("Empower the individual.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Every aspect of the experience should be encouraging and motivational – much like a personal trainer.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/experience-principles/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Experience Principles","header",true],0,null,["loc",[null,[1,0],[32,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/grid/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/grid/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 215,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/grid/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row breakpoint-table");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3,"class","subsection-header");
          var el4 = dom.createTextNode("NAME");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("BP1");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("BP2");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("BP3");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("BP4");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("BP5");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3,"class","subsection-header");
          var el4 = dom.createTextNode("PRINCIPAL BP");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Small");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Medium");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("HD");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3,"class","subsection-header");
          var el4 = dom.createTextNode("START WIDTH");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("312px");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("448px");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("760px");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("1200px");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("1760px");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3,"class","subsection-header");
          var el4 = dom.createTextNode("COLUMNS");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("4");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("8");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("12");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("24");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("32");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row grid-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-24  bp5-col-32");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("Full width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row grid-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-4  bp3-col-6  bp4-col-12  bp5-col-16");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/2 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-4  bp3-col-6  bp4-col-12  bp5-col-16");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/2 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row grid-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/4 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/4 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/4 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-2  bp3-col-3  bp4-col-6  bp5-col-8");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1/4 width");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row grid-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-2 bp2-col-2  bp3-col-2  bp4-col-2  bp5-col-2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("2 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row grid-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-1 bp2-col-1  bp3-col-1  bp4-col-1  bp5-col-1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("1 Col");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 215,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/grid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Responsive Grid","docLink","_grid.scss","header",true],0,null,["loc",[null,[1,0],[215,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/icons/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/icons/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/icons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","styleguide/foundation/icon-font",["loc",[null,[2,2],[2,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/icons/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Icons","docLink","webfonts.zip","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/logo/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/logo/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/logo/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 text-center");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","dazn-logo");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/logo/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Logo","docLink","DAZN_logo.ai","header",true],0,null,["loc",[null,[1,0],[7,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/model/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/model/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/model/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2,"class","section-header");
          var el3 = dom.createTextNode("Interaction model for mobile, tablet, web and TV.\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Home");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Navigation");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Rails");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Focus");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Sports, tournaments and competitors");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createTextNode("Playback");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/model/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Interaction Model","docLink","pdf/LS_interaction_model.pdf","header",true],0,null,["loc",[null,[1,0],[14,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/rails/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/rails/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/rails/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2,"class","section-header");
          var el3 = dom.createTextNode("Document outlining the logic behind how the rails work across all breakpoints.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/rails/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Rails Logic","docLink","pdf/LS_rail_logic.pdf","unlimited",true,"header",true],0,null,["loc",[null,[1,0],[5,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/foundation/typography/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/foundation/typography/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/typography/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","styleguide/foundation/typography-module",["loc",[null,[2,2],[2,45]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/foundation/typography/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Typography","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/index/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","styleguide");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Livesport Styleguide");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/input-field/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/input-field/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/input-field/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Normal State");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Error State");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Success State");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Disabled State");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","mt-row input-styleguide");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4");
          var el3 = dom.createElement("h5");
          var el4 = dom.createTextNode("Inline Editing");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5, 3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [9, 3]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [13, 3]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [17, 3]),1,1);
          return morphs;
        },
        statements: [
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1"],["loc",[null,[5,6],[5,53]]]],
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","isError","true","inputValue","test content"],["loc",[null,[12,6],[12,94]]]],
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","isSuccess","true","inputValue","test content"],["loc",[null,[19,6],[19,96]]]],
          ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","isDisabled","true"],["loc",[null,[26,6],[26,71]]]],
          ["inline","form-fields/inline-editing",[],["label","LABEL","type","text","initialText","Test Content","inputType","text","singleInput",true],["loc",[null,[33,6],[33,123]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/input-field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Input Field"],0,null,["loc",[null,[1,0],[36,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/landing/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/landing/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/landing/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","global/landing-page",["loc",[null,[1,0],[1,23]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/myaccount/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/myaccount/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/myaccount/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","web/my-account",["loc",[null,[1,0],[1,18]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/navigation/tabs/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/navigation/tabs/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/navigation/tabs/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","navigation/tab/tab-container",["loc",[null,[2,2],[2,34]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/navigation/tabs/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Tab Navigation","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/not-found/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/not-found/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/not-found/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/not-found/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/payment-information/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    // actions: {
    //   clickButton: function(self){
    //     var thisChildren = this.get('thisChildren');
    //     console.log(thisChildren);

    //     // thisChildren.forEach(function(item){
    //     //   if (item.get('name') === 'error'){
    //     //     item.set('open', true);
    //     //   }
    //     // });
    //   }
    // }
  });

});
define('base-method-ember-styleguide/pods/styleguide/payment-information/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    // actions: {
    //   clickButton: function(self){
    //     var thisChildren = this.get('childViews');
    //     console.log(this);

    //     // thisChildren.forEach(function(item){
    //     //   if (item.get('name') === 'error'){
    //     //     item.set('open', true);
    //     //   }
    //     // });
    //   }
    // }
  });

});
define('base-method-ember-styleguide/pods/styleguide/payment-information/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/payment-information/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","form-layout payment");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-overlay");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","limited-container mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 header");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h1");
        var el7 = dom.createTextNode("Payment");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("br");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("Information");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("You will not be charged until after your free trial ends on 02/10/2015.");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("br");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("After your free trial £9.99 per Month. Cancel anytime.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-6");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-6");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-7 bp3-postset-5");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-2 bp3-col-3");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-2 bp3-col-2");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-2 bp3-col-2");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("By clicking the \"Start Membership\" button, you acknowledge that");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("br");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("you have read and agreed to the ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"class","link-paragraph");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Terms of Use");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" and ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"class","link-paragraph");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Privacy Policy");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 text-right");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5, 1, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element0,3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [9]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [11]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [13]),1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [17]),1,1);
        return morphs;
      },
      statements: [
        ["content","web/error-message",["loc",[null,[4,2],[4,23]]]],
        ["inline","form-fields/text-input",[],["label","First Name","inputType","text"],["loc",[null,[13,10],[13,72]]]],
        ["inline","form-fields/text-input",[],["label","Surname","inputType","text"],["loc",[null,[16,10],[16,69]]]],
        ["inline","form-fields/text-input",[],["label","Card Number","inputType","text"],["loc",[null,[19,10],[19,73]]]],
        ["inline","form-fields/dropdown-menu",[],["dropDownTitle","Expiry Month"],["loc",[null,[22,10],[22,68]]]],
        ["inline","form-fields/dropdown-menu",[],["dropDownTitle","Expiry Year"],["loc",[null,[25,10],[25,67]]]],
        ["inline","form-fields/text-input",[],["label","CVC","inputType","text"],["loc",[null,[28,10],[28,65]]]],
        ["inline","form-fields/form-button",[],["title","Start Membership","position","left","btnType","primary"],["loc",[null,[34,10],[34,96]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/route', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/route'], function (exports, route) {

	'use strict';



	exports['default'] = route['default'];

});
define('base-method-ember-styleguide/pods/styleguide/signup/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/signup/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/signup/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","form-layout signup");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-overlay");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","limited-container mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 header");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h1");
        var el7 = dom.createTextNode("Free Trial");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Sign up to start your 30 days free trial.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-6");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 bp3-col-6");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","bp1-col-4 text-right");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        dom.setAttribute(el6,"class","other-link");
        var el7 = dom.createTextNode("Existing customer? ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","#");
        dom.setAttribute(el7,"class","link-paragraph");
        dom.setAttribute(el7,"style","touch-action: manipulation; -ms-touch-action: manipulation");
        var el8 = dom.createTextNode("Sign in");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(".");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5, 1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]),1,1);
        return morphs;
      },
      statements: [
        ["content","web/error-message",["loc",[null,[4,2],[4,23]]]],
        ["inline","form-fields/text-input",[],["label","Email address","inputType","text"],["loc",[null,[13,10],[13,75]]]],
        ["inline","form-fields/text-input",[],["label","Password","inputType","password"],["loc",[null,[16,10],[16,74]]]],
        ["inline","form-fields/form-button",[],["title","Start Membership","position","left","btnType","primary"],["loc",[null,[19,10],[19,96]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/template', ['exports', 'ember-cli-ui-lib-metadata/pods/styleguide/template'], function (exports, template) {

	'use strict';



	exports['default'] = template['default'];

});
define('base-method-ember-styleguide/pods/styleguide/test/form/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/test/form/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/test/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Lorem ipsum dolor sit amet.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/test/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Consectetur adipiscing\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/test/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("         Etiam ut eleifend\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/test/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ut eleifend magna. Quisque lacinia nulla ante, convallis porttitor lorem iaculis in. Praesent diam nisl, lacinia vitae tristique eget, aliquet et risus.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 6
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/test/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","mt-container limited-container form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","bp1-col-4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        dom.setAttribute(el4,"class","title");
        var el5 = dom.createTextNode("Title");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6 form-check");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-6 form-check");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-8");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","sub-title");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","bp1-col-4 bp3-col-4 text-right form-button");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [19]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [5]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [7]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [9]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [11]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [13]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element0, [15]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element0, [17]),1,1);
        morphs[8] = dom.createMorphAt(element1,1,1);
        morphs[9] = dom.createMorphAt(element1,2,2);
        morphs[10] = dom.createMorphAt(dom.childAt(element0, [21, 1]),1,1);
        morphs[11] = dom.createMorphAt(dom.childAt(element0, [23]),1,1);
        return morphs;
      },
      statements: [
        ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","text"],["loc",[null,[7,35],[7,99]]]],
        ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","text"],["loc",[null,[8,35],[8,99]]]],
        ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","text"],["loc",[null,[9,35],[9,99]]]],
        ["inline","form-fields/text-input",[],["label","TEXT LABEL 1","inputType","text"],["loc",[null,[10,35],[10,99]]]],
        ["content","form-fields/dropdown-menu",["loc",[null,[11,35],[11,64]]]],
        ["content","form-fields/dropdown-menu",["loc",[null,[12,35],[12,64]]]],
        ["content","form-fields/dropdown-menu",["loc",[null,[13,35],[13,64]]]],
        ["block","form-fields/check-box",[],[],0,null,["loc",[null,[15,4],[17,30]]]],
        ["block","form-fields/radio-button",[],["group","test-group"],1,null,["loc",[null,[20,4],[22,35]]]],
        ["block","form-fields/radio-button",[],["group","test-group"],2,null,["loc",[null,[23,6],[25,35]]]],
        ["block","form-fields/check-box",[],["paragraph","true"],3,null,["loc",[null,[29,6],[31,32]]]],
        ["inline","form-fields/form-button",[],["title","SUBMIT","position","right","btnType","primary"],["loc",[null,[35,4],[35,81]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/test/typography/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/test/typography/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/test/typography/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["content","styleguide/test/typography-test",["loc",[null,[2,0],[2,35]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 11
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/test/typography/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("script");
        dom.setAttribute(el1,"type","text/javascript");
        var el2 = dom.createTextNode("\n      (function() {\n          var path = '//easy.myfonts.net/v2/js?sid=82910(font-family=Brown+Bold)&sid=82915(font-family=Brown+Light)&sid=82917(font-family=Brown+Medium)&sid=82919(font-family=Brown+Regular)&key=Gybqacu7u9',\n              protocol = ('https:' == document.location.protocol ? 'https:' : 'http:'),\n              trial = document.createElement('script');\n          trial.type = 'text/javascript';\n          trial.async = true;\n          trial.src = protocol + path;\n          var head = document.getElementsByTagName(\"head\")[0];\n          head.appendChild(trial);\n      })();\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Typography Test","header",true],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/titles/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/titles/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/titles/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/styleguide/video-player/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/styleguide/video-player/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/styleguide/video-player/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","web/video-player",["loc",[null,[2,2],[2,22]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 34
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/styleguide/video-player/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","styleguide/styleguide-wrapper",[],["title","Video Player"],0,null,["loc",[null,[1,0],[3,34]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/tile/model', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  var Tile = DS['default'].Model.extend({
    sport: DS['default'].attr('string'),
    route: DS['default'].attr('string'),
    type: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    slug: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    videoSrc: DS['default'].attr('string'),
    tournament: DS['default'].attr('string'),
    tournament_logo: DS['default'].attr('string'),
    game: DS['default'].attr('string'),
    thumbnail: DS['default'].attr('string'),
    team1: DS['default'].attr('string'),
    team1_short: DS['default'].attr('string'),
    team1_logo: DS['default'].attr('string'),
    team2: DS['default'].attr('string'),
    team2_short: DS['default'].attr('string'),
    team2_logo: DS['default'].attr('string'),
    isThumbnailLogo: DS['default'].attr('boolean'),
    isThumbnailPicture: DS['default'].attr('boolean'),
    isTeamSport: DS['default'].attr('boolean'),
    isTeam: DS['default'].attr('boolean'),
    isPlayer: DS['default'].attr('boolean'),
    isSport: DS['default'].attr('boolean'),
    isCompetition: DS['default'].attr('boolean'),
    isPlaying: DS['default'].attr('boolean'),
    hasHappened: DS['default'].attr('boolean'),
    statusIsLive: DS['default'].attr('boolean'),
    statusIsCatchUp: DS['default'].attr('boolean'),
    statusIsVOD: DS['default'].attr('boolean'),
    statusIsComingSoon: DS['default'].attr('boolean'),
    statusIsPaused: DS['default'].attr('boolean'),
    statusIsDelayed: DS['default'].attr('boolean'),
    stateIsCategory: DS['default'].attr('boolean'),
    rail: DS['default'].belongsTo('rail'),
    posterImage: DS['default'].attr('string'),
    randDate: Ember['default'].computed(function () {
      return Math.floor(Math.random() * 30);
    })
  });

  exports['default'] = Tile;

});
define('base-method-ember-styleguide/pods/tv/intro/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    actions: {
      goToHome: function goToHome() {
        this.transitionTo('tv.signup');
      }
    }
  });

});
define('base-method-ember-styleguide/pods/tv/intro/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/tv/intro/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","logo");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 27
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/tv/intro/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","global/intro-animation",[],["goToHome","goToHome"],0,null,["loc",[null,[1,0],[3,27]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/tv/login/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 17
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/tv/login/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("TV LOGIN Template");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/tv/signup/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    actions: {
      newSource: function newSource(data) {
        this.set('imgSrc', data);
      }
    },

    imgSrc: Ember['default'].computed('newSource', function () {
      var changeSource;
      if (this.get('newSource')) {
        changeSource = this.get('newSource');
      } else {
        changeSource = 'images/signup/1.png';
      }
      return new Ember['default'].String.htmlSafe(changeSource);
    })
  });

});
define('base-method-ember-styleguide/pods/tv/signup/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/tv/signup/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","imgSrc",["loc",[null,[2,13],[2,19]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/tv/signup/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","global/sign-up",[],["goToBrowse","goToBrowse","newSource","newSource"],0,null,["loc",[null,[1,0],[3,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/ui-library-metadata/breakpoint/adapter', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/breakpoint/adapter', 'base-method-ember-styleguide/styleguide/config'], function (exports, Adapter, config) {

  'use strict';

  exports['default'] = Adapter['default'].extend({
    fixtures: config['default'].breakpoints
  });

});
define('base-method-ember-styleguide/pods/ui-library-metadata/breakpoint/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/breakpoint/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/category/adapter', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/category/adapter', 'base-method-ember-styleguide/styleguide/config'], function (exports, Adapter, config) {

  'use strict';

  exports['default'] = Adapter['default'].extend({
    fixtures: config['default'].categories
  });

});
define('base-method-ember-styleguide/pods/ui-library-metadata/category/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/category/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/colour/adapter', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/colour/adapter', 'base-method-ember-styleguide/styleguide/config'], function (exports, Adapter, config) {

  'use strict';

  exports['default'] = Adapter['default'].extend({
    fixtures: config['default'].colours
  });

});
define('base-method-ember-styleguide/pods/ui-library-metadata/colour/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/colour/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/component/adapter', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/component/adapter'], function (exports, adapter) {

	'use strict';



	exports['default'] = adapter['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/component/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/component/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/navigation-page/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/navigation-page/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/ui-library-metadata/navigation-section/adapter', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/navigation-section/adapter', 'base-method-ember-styleguide/styleguide/config'], function (exports, Adapter, config) {

  'use strict';

  exports['default'] = Adapter['default'].extend({
    fixtures: config['default'].navigation
  });

});
define('base-method-ember-styleguide/pods/ui-library-metadata/navigation-section/model', ['exports', 'ember-cli-ui-lib-metadata/pods/ui-library-metadata/navigation-section/model'], function (exports, model) {

	'use strict';



	exports['default'] = model['default'];

});
define('base-method-ember-styleguide/pods/web/account/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/web/account/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/account/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","static-content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-16  bp5-col-24");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        var el6 = dom.createTextNode("Accounts");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-2  bp3-col-3  bp4-col-4  bp5-col-6");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Lorem ipsum dolor sit amet");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Curabitur sed justo");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Suspendisse porttitor");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Ut sed nisl interdum");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Morbi eget libero");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-6  bp3-col-9  bp4-col-12  bp5-col-18");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent semper lectus accumsan augue aliquet, at pulvinar ex finibus.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","web/global-header",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,26],[1,31]]]]],[],[]],"subnavOpen",true,"hideSearch",true,"nonVideo",true],["loc",[null,[1,0],[1,79]]]],
        ["content","web/global-footer",["loc",[null,[37,0],[37,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/help/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/web/help/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/help/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","static-content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-16  bp5-col-24");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        var el6 = dom.createTextNode("Help");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-2  bp3-col-3  bp4-col-4  bp5-col-6");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Lorem ipsum dolor sit amet");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Curabitur sed justo");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Suspendisse porttitor");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Ut sed nisl interdum");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Morbi eget libero");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-6  bp3-col-9  bp4-col-12  bp5-col-18");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent semper lectus accumsan augue aliquet, at pulvinar ex finibus. Duis sodales quis erat vitae rhoncus. Sed porta tortor pellentesque risus aliquam suscipit. Suspendisse in arcu pretium, interdum tortor non, congue felis. Nunc hendrerit lacinia enim, sit amet pellentesque lectus fringilla aliquet. Vivamus at gravida felis, in mattis augue. Fusce in nibh at erat egestas rhoncus nec ac nisl. Maecenas tristique efficitur nisl, sed mattis metus ullamcorper vel. Mauris malesuada faucibus nibh eu iaculis. Pellentesque feugiat aliquet enim, id eleifend elit suscipit non.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla. Proin eget malesuada orci, quis bibendum velit. Sed tristique, velit vel porta pharetra, leo odio pretium eros, vitae fringilla urna ipsum eget mauris. In finibus justo ac lorem sodales, dapibus fringilla dolor dictum. Sed ut tempor massa, quis rhoncus diam.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst. Phasellus odio ante, euismod vitae rutrum sed, fermentum pretium nisi. Proin in hendrerit ligula. Aliquam ex orci, tempus nec aliquet eget, ullamcorper quis leo. Nulla facilisi. Duis lacinia arcu a est vulputate gravida. In vel odio vestibulum, aliquet erat et, varius magna. Proin a sem massa.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("finibus. Duis sodales quis erat vitae rhoncus. Sed porta tortor pellentesque risus aliquam suscipit. Suspendisse in arcu pretium, interdum tortor non, congue felis. Nunc hendrerit lacinia enim, sit amet pellentesque lectus fringilla aliquet. Vivamus at gravida felis, in mattis augue. Fusce in nibh at erat egestas rhoncus nec ac nisl. Maecenas tristique efficitur nisl, sed mattis metus ullamcorper vel. Mauris malesuada faucibus nibh eu iaculis. Pellentesque feugiat aliquet enim, id eleifend elit suscipit non.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla. Proin eget malesuada orci, quis bibendum velit. Sed tristique, velit vel porta pharetra, leo odio pretium eros, vitae fringilla urna ipsum eget mauris. In finibus justo ac lorem sodales, dapibus fringilla dolor dictum. Sed ut tempor massa, quis rhoncus diam.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst. Phasellus odio ante, euismod vitae rutrum sed, fermentum pretium nisi. Proin in hendrerit ligula. Aliquam ex orci, tempus nec aliquet eget, ullamcorper quis leo. Nulla facilisi. Duis lacinia arcu a est vulputate gravida. In vel odio vestibulum, aliquet erat et, varius magna. Proin a sem massa.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent semper lectus accumsan augue aliquet, at pulvinar ex finibus. Duis sodales quis erat vitae rhoncus. Sed porta tortor pellentesque risus aliquam suscipit. Suspendisse in arcu pretium, interdum tortor non, congue felis. Nunc hendrerit lacinia enim, sit amet pellentesque lectus fringilla aliquet. Vivamus at gravida felis, in mattis augue. Fusce in nibh at erat egestas rhoncus nec ac nisl. Maecenas tristique efficitur nisl, sed mattis metus ullamcorper vel. Mauris malesuada faucibus nibh eu iaculis. Pellentesque feugiat aliquet enim, id eleifend elit suscipit non.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla. Proin eget malesuada orci, quis bibendum velit. Sed tristique, velit vel porta pharetra, leo odio pretium eros, vitae fringilla urna ipsum eget mauris. In finibus justo ac lorem sodales, dapibus fringilla dolor dictum. Sed ut tempor massa, quis rhoncus diam.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst. Phasellus odio ante, euismod vitae rutrum sed, fermentum pretium nisi. Proin in hendrerit ligula. Aliquam ex orci, tempus nec aliquet eget, ullamcorper quis leo. Nulla facilisi. Duis lacinia arcu a est vulputate gravida. In vel odio vestibulum, aliquet erat et, varius magna. Proin a sem massa.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("finibus. Duis sodales quis erat vitae rhoncus. Sed porta tortor pellentesque risus aliquam suscipit. Suspendisse in arcu pretium, interdum tortor non, congue felis. Nunc hendrerit lacinia enim, sit amet pellentesque lectus fringilla aliquet. Vivamus at gravida felis, in mattis augue. Fusce in nibh at erat egestas rhoncus nec ac nisl. Maecenas tristique efficitur nisl, sed mattis metus ullamcorper vel. Mauris malesuada faucibus nibh eu iaculis. Pellentesque feugiat aliquet enim, id eleifend elit suscipit non.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla. Proin eget malesuada orci, quis bibendum velit. Sed tristique, velit vel porta pharetra, leo odio pretium eros, vitae fringilla urna ipsum eget mauris. In finibus justo ac lorem sodales, dapibus fringilla dolor dictum. Sed ut tempor massa, quis rhoncus diam.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst. Phasellus odio ante, euismod vitae rutrum sed, fermentum pretium nisi. Proin in hendrerit ligula. Aliquam ex orci, tempus nec aliquet eget, ullamcorper quis leo. Nulla facilisi. Duis lacinia arcu a est vulputate gravida. In vel odio vestibulum, aliquet erat et, varius magna. Proin a sem massa.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","web/global-header",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,26],[1,31]]]]],[],[]],"subnavOpen",true,"hideSearch",true,"nonVideo",true],["loc",[null,[1,0],[1,79]]]],
        ["content","web/global-footer",["loc",[null,[51,0],[51,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/intro/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    actions: {
      goToHome: function goToHome() {
        this.transitionTo('web.signup');
      }
    }
  });

});
define('base-method-ember-styleguide/pods/web/intro/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/web/intro/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","logo");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 27
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/intro/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","global/intro-animation",[],["goToHome","goToHome"],0,null,["loc",[null,[1,0],[3,27]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/login/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/login/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("WEB LOGIN Template");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/settings/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('base-method-ember-styleguide/pods/web/settings/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/settings/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","static-content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","mt-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-8  bp3-col-12  bp4-col-16  bp5-col-24");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        var el6 = dom.createTextNode("Settings");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","mt-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-2  bp3-col-3  bp4-col-4  bp5-col-6");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Lorem ipsum dolor sit amet");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Curabitur sed justo");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Suspendisse porttitor");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Ut sed nisl interdum");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("Morbi eget libero");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","bp1-col-4 bp2-col-6  bp3-col-9  bp4-col-12  bp5-col-18");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent semper lectus accumsan augue aliquet, at pulvinar ex finibus. Duis sodales quis erat vitae rhoncus. Sed porta tortor pellentesque risus aliquam suscipit. Suspendisse in arcu pretium, interdum tortor non, congue felis. Nunc hendrerit lacinia enim, sit amet pellentesque lectus fringilla aliquet. Vivamus at gravida felis, in mattis augue. Fusce in nibh at erat egestas rhoncus nec ac nisl. Maecenas tristique efficitur nisl, sed mattis metus ullamcorper vel. Mauris malesuada faucibus nibh eu iaculis. Pellentesque feugiat aliquet enim, id eleifend elit suscipit non.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Praesent in nisi semper, sagittis erat sed, tincidunt ligula. Donec egestas augue a aliquet tempor. Cras placerat nibh in ex laoreet, ac aliquet purus fringilla. Proin eget malesuada orci, quis bibendum velit. Sed tristique, velit vel porta pharetra, leo odio pretium eros, vitae fringilla urna ipsum eget mauris. In finibus justo ac lorem sodales, dapibus fringilla dolor dictum. Sed ut tempor massa, quis rhoncus diam.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("In non molestie nibh. Nunc interdum diam sed sem luctus, sed interdum felis fringilla. In hac habitasse platea dictumst. Phasellus odio ante, euismod vitae rutrum sed, fermentum pretium nisi. Proin in hendrerit ligula. Aliquam ex orci, tempus nec aliquet eget, ullamcorper quis leo. Nulla facilisi. Duis lacinia arcu a est vulputate gravida. In vel odio vestibulum, aliquet erat et, varius magna. Proin a sem massa.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","web/global-header",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,26],[1,31]]]]],[],[]],"subnavOpen",true,"hideSearch",true,"nonVideo",true],["loc",[null,[1,0],[1,79]]]],
        ["content","web/global-footer",["loc",[null,[33,0],[33,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/signup/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    actions: {
      newSource: function newSource(data) {
        this.set('imgSrc', data);
      }
    },

    imgSrc: Ember['default'].computed('newSource', function () {
      var changeSource;
      if (this.get('newSource')) {
        changeSource = this.get('newSource');
      } else {
        changeSource = 'images/signup/1.png';
      }
      return new Ember['default'].String.htmlSafe(changeSource);
    })
  });

});
define('base-method-ember-styleguide/pods/web/signup/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    actions: {
      goToBrowse: function goToBrowse() {
        this.transitionTo('videos').then(function (newRoute) {
          newRoute.controller.model.set('firstTime', true);
        });
      }
    }

  });

});
define('base-method-ember-styleguide/pods/web/signup/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.8",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "base-method-ember-styleguide/pods/web/signup/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","imgSrc",["loc",[null,[2,13],[2,19]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 19
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/signup/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","global/sign-up",[],["goToBrowse","goToBrowse","newSource","newSource"],0,null,["loc",[null,[1,0],[3,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('base-method-ember-styleguide/pods/web/videos/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    firstTime2: Ember['default'].computed('firstTime', function () {
      console.log(this.get('firstTime2'));
      console.log(this.get('firstTime'));
    })
  });

});
define('base-method-ember-styleguide/pods/web/videos/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    id: 1,

    beforeModel: function beforeModel() {
      // Assume the 'loading' class displays an overlay with a loading animation
      Ember['default'].$('body').addClass('loading');
    },

    model: function model() {
      var self = this;

      if (self.get('storage').get('locale')) {
        self.get('i18n').set('locale', self.get('storage').get('locale'));
      }

      return self.store.findRecord('page', self.get('id'));
    },

    afterModel: function afterModel() {
      // Assume the 'loading' class displays an overlay with a loading animation
      Ember['default'].$('body').addClass('loading');
    },

    setupController: function setupController(controller, model) {
      this.controller.set('model', model);
    },

    actions: {
      goSearch: function goSearch() {
        this.transitionTo('search');
      },
      goCategory: function goCategory() {
        this.transitionTo('category');
      },
      resetApp: function resetApp() {
        this.transitionTo('intro');
      },

      goSport: function goSport() {
        console.log('goSport');
      },

      routeChange: function routeChange(model) {
        var self = this;
        var id = 1;

        switch (model.route) {
          case 'sport':
            switch (model.slug) {
              case 'american-football':
              case 'baseball':
              case 'basketball':
              case 'boxing':
              case 'darts':
              case 'equestrian':
              case 'golf':
              case 'horse-racing':
              case 'ice-hockey':
              case 'volleyball':
              case 'wrestling':
                id = 2;
                break;

              case 'football':
                id = 2;
                break;

              case 'tennis':
                id = 3;
                break;
            }
            break;

          case 'competitor':
          case 'competition':
            switch (model.sport) {
              case 'football':
                switch (model.slug) {
                  case 'champions-league':
                    id = 5;
                    break;

                  case 'arsenal':
                    id = 4;
                    break;

                  default:
                    id = 2;
                    break;
                }
                break;

              case 'tennis':
                switch (model.slug) {
                  case 'wimbledon':
                    id = 3;
                    break;

                  case 'andy-murray':
                    id = 6;
                    break;

                  default:
                    id = 3;
                    break;
                }
                break;
            }
            break;
        }
        console.log(model.route + '/' + model.slug + '/' + id);
        self.set('id', id);
        self.refresh();
      }
    }
  });

});
define('base-method-ember-styleguide/pods/web/videos/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.8",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 21
          }
        },
        "moduleName": "base-method-ember-styleguide/pods/web/videos/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","web/rails-list",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[2,23],[2,28]]]]],[],[]],"routeChange","routeChange"],["loc",[null,[2,0],[2,56]]]],
        ["content","web/global-footer",["loc",[null,[3,0],[3,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('base-method-ember-styleguide/router', ['exports', 'ember', 'base-method-ember-styleguide/config/environment', 'ember-cli-ui-lib-metadata/util/ui-library-setup-router'], function (exports, Ember, config, setupStyleguideRoutes) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    setupStyleguideRoutes['default'](this);

    this.resource('tv', { path: '/tv' }, function () {
      this.route('intro', { path: '/intro' });
      this.route('login', { path: '/login' });
      this.route('signup', { path: '/signup' });
    });

    this.resource('web', { path: '/web' }, function () {
      // this.route('intro', { path: '/intro' });
      // this.route('login', { path: '/login' });
      // this.route('signup', { path: '/signup' });

      this.route('account', { path: '/my-account' });
      this.route('settings', { path: '/settings' });
      this.route('help', { path: '/help' });

      this.route('videos', { path: '/videos' });
      this.route('videos.sport', { path: '/:sport_slug' });
      this.route('videos.competitor-competition', { path: '/:sport_slug/:section_slug' });
    });

    this.route('styleguide', {}, function () {
      this.route('account', {}, function () {
        this.route('cancel-subscription', {});
        this.route('my-account', {});
      });

      this.route('components', {}, function () {
        this.route('tiles', {});
        this.route('rail', {});
        this.route('badges');
      });

      this.route('form-fields', {});

      this.route('foundation', {}, function () {
        this.route('icons', {});
        this.route('grid', {});
        this.route('rails', {});
        this.route('model', {});
        this.route('experience-principles', {});
        this.route('typography', {});
        this.route('colors');
        this.route('logo');
      });

      this.route('navigation', {}, function () {
        this.route('tabs', {});
      });

      this.route('test', {}, function () {
        this.route('typography', {});
        this.route('form');
      });
      this.route('input-field', {});
      this.route('buttons', {});
      this.route('video-player', {});
      this.route('landing');
      this.route('titles');
      this.route('payment-information');
      this.route('signup');
      this.route('myaccount');
    });
  });

  exports['default'] = Router;

});
define('base-method-ember-styleguide/services/-gestures', ['exports', 'ember', 'base-method-ember-styleguide/config/environment', 'ember-gestures/services/-gestures'], function (exports, Ember, config, Service) {

  'use strict';

  var gestures = Ember['default'].merge({}, {
    useCapture: false
  });
  gestures = Ember['default'].merge(gestures, config['default'].gestures);

  exports['default'] = Service['default'].extend({
    useCapture: gestures.useCapture
  });

});
define('base-method-ember-styleguide/services/i18n', ['exports', 'ember-i18n/service'], function (exports, Service) {

	'use strict';

	exports['default'] = Service['default'];

});
define('base-method-ember-styleguide/services/resize', ['exports', 'ember-resize/services/resize'], function (exports, resize) {

	'use strict';



	exports['default'] = resize['default'];

});
define('base-method-ember-styleguide/services/storage', ['exports', 'ember-storage/services/storage'], function (exports, storage) {

	'use strict';

	exports['default'] = storage['default'];

});
define('base-method-ember-styleguide/styleguide/config', ['exports'], function (exports) {

  'use strict';

  /**
   Configuration for your styleguide
  */
  exports['default'] = {
    // Add the breakpoints for your site as POJOs with "label" and "width" properties
    breakpoints: [
    // {
    //   'label': 'extra small',
    //   'width': 312
    // },
    {
      'label': 'small',
      'width': 480
    }, {
      'label': 'medium',
      'width': 760
    }, {
      'label': 'HD',
      'width': 1200
    }],
    // Add any pages you want to appear in the side nav
    navigation: [{
      label: 'Foundation',
      pages: [
      // {
      //   'label': 'Colours',
      //   'route': 'styleguide.foundation.colours'
      // },
      {
        'label': 'Experience Principles',
        'route': 'styleguide.foundation.experience-principles',
        'status': 'complete'
      }, {
        'label': 'Interaction Model',
        'route': 'styleguide.foundation.model',
        'status': 'complete'
      }, {
        'label': 'Rails Logic',
        'route': 'styleguide.foundation.rails',
        'status': 'complete'
      }, {
        'label': 'Logo',
        'route': 'styleguide.foundation.logo',
        'status': 'complete'
      }, {
        'label': 'Icons',
        'route': 'styleguide.foundation.icons',
        'status': 'complete'
      }, {
        'label': 'Responsive Grid',
        'route': 'styleguide.foundation.grid',
        'status': 'complete'
      }, {
        'label': 'Typography',
        'route': 'styleguide.foundation.typography',
        'status': 'inprogress'
      }, {
        'label': 'Colours',
        'route': 'styleguide.foundation.colors',
        'status': 'inprogress'
      }]
    },
    // {
    //   label: 'Interactions',
    //   pages: [
    //     {
    //       'label': 'Form Fields',
    //       'route': 'styleguide.form-fields'
    //     },
    //     {
    //       'label': 'Buttons & Links',
    //       'route': 'styleguide.buttons'
    //     },
    //     {
    //       'label': 'Tabs',
    //       'route': 'styleguide.navigation.tabs'
    //     },
    //   ]
    // },
    {
      label: 'Components',
      pages: [{
        'label': 'Form Fields',
        'route': 'styleguide.form-fields',
        'status': 'inprogress'
      }, {
        'label': 'Buttons & Links',
        'route': 'styleguide.buttons',
        'status': 'inprogress'
      }, {
        'label': 'Tabs',
        'route': 'styleguide.navigation.tabs',
        'status': 'inprogress'
      }, {
        'label': 'Tiles',
        'route': 'styleguide.components.tiles',
        'status': 'inprogress'
      }]
    },

    // {
    //   'label': 'Badges',
    //   'route': 'styleguide.components.badges'
    // },
    // {
    //   'label': 'Rails',
    //   'route': 'styleguide.components.rail'
    // },
    // {
    //   'label': 'Video Player',
    //   'route': 'styleguide.video-player'
    // },
    // {
    //   'label': 'Titles & Headers',
    //   'route': 'styleguide.titles'
    // }
    {
      label: 'Pages',
      pages: [{
        'label': 'Form test',
        'route': 'styleguide.test.form',
        'status': 'inprogress'
      }, {
        'label': 'Landing page',
        'route': 'styleguide.landing',
        'status': 'inprogress'
      }, {
        'label': 'Payment Information',
        'route': 'styleguide.payment-information',
        'status': 'inprogress'
      }, {
        'label': 'Sign up',
        'route': 'styleguide.signup',
        'status': 'inprogress'
      }, {
        'label': 'My account',
        'route': 'styleguide.myaccount',
        'status': 'inprogress'
      }]
    },
    // {
    //   'label': 'Expanding notification',
    //   'route': 'styleguide.account.my-account'
    // }

    // {
    //   label: 'Test',
    //   pages: [
    //     {
    //       'label': 'Form test',
    //       'route': 'styleguide.test.form'
    //     }
    //   ]
    // },
    {
      isComponentsMarker: true
    }],
    // Overwrite these categories with whatever suits your site
    categories: [{
      label: 'Foundation'
    }, {
      label: 'Components',
      subcategories: [{
        label: 'Tiles'
      }, {
        label: 'Form'
      }]
    }],
    colours: [{
      variable: 'primary-color',
      hex: '#4894d0',
      description: 'Use as main interaction color',
      lighterTones: [{
        variable: 'primary-color-light-20',
        hex: '#71acda',
        description: '20%'
      }, {
        variable: 'primary-color-light-40',
        hex: '#99c3e5',
        'class': 'primary-color-lighter-2',
        description: '40%'
      }, {
        variable: 'primary-color-light-60',
        hex: '#c2dbef',
        'class': 'primary-color-lighter-3',
        description: '60%'
      }],
      darkerTones: [{
        variable: 'primary-color-dark-20',
        hex: '#2a6da2',
        'class': 'primary-color-darker',
        description: '20%'
      }]
    }, {
      variable: 'accent-color',
      hex: '#ee3569',
      cssClass: 'accent-color',
      description: 'Use as main interaction color',
      lighterTones: [{
        variable: 'accent-color-light-20',
        hex: '#f2648c',
        description: '20%'
      }, {
        variable: 'accent-color-light-40',
        hex: '#f693af',
        description: '40%'
      }, {
        variable: 'accent-color-light-60',
        hex: '#fac2d2',
        description: '60%'
      }],
      darkerTones: [{
        variable: 'accent-color-dark-20',
        hex: '#c61144',
        description: '20%'
      }]
    }, {
      variable: 'background-light',
      hex: '#f2f2f3',
      description: 'Use as main interaction color'
    }, {
      variable: 'background-lighter',
      hex: '#ffffff',
      description: 'Use as main interaction color'
    }, {
      variable: 'dark-font-primary',
      hex: '#000',
      description: 'Use as body text',
      component: 'styleguide/colours-page/type-block'
    }, {
      variable: 'dark-font-secondary',
      hex: '#333',
      description: 'Use as ...',
      component: 'styleguide/colours-page/type-block'
    }, {
      variable: 'dark-font-disabled',
      hex: '#999',
      description: 'Use as ...',
      component: 'styleguide/colours-page/type-block'
    }, {
      variable: 'dark-font-separator',
      hex: '#ccc',
      description: 'Use as ...'
    }, {
      variable: 'light-font-primary',
      hex: '#fff',
      description: 'Use as body text on a dark background',
      component: 'styleguide/colours-page/type-block',
      componentParams: {
        background: '#0d0d0d'
      }
    }, {
      variable: 'light-font-secondary',
      hex: '#d9d9d9',
      description: 'Use as ...',
      component: 'styleguide/colours-page/type-block',
      componentParams: {
        background: '#0d0d0d'
      }
    }, {
      variable: 'light-font-disabled',
      hex: '#b3b3b3',
      description: 'Use as ...',
      component: 'styleguide/colours-page/type-block',
      componentParams: {
        background: '#0d0d0d'
      }
    }, {
      variable: 'light-font-separator',
      hex: '#666666',
      description: 'Use as ...'
    }, {
      variable: 'color-success',
      hex: '#2bb34b',
      description: 'Use to display messages on success',
      component: 'styleguide/colours-page/alert-block',
      lighterTones: [{
        variable: 'color-success-faded',
        hex: '#e4f9e9',
        description: '50%'
      }]
    }, {
      variable: 'color-error',
      hex: '#d01f31',
      description: 'Use to display messages on error',
      component: 'styleguide/colours-page/alert-block',
      lighterTones: [{
        variable: 'color-error-faded',
        hex: '#fdf1f2',
        description: '50%'
      }]
    }, {
      variable: 'color-warning',
      hex: '#fcb618',
      description: 'Use to display warning messages',
      component: 'styleguide/colours-page/alert-block',
      lighterTones: [{
        variable: 'color-warning-faded',
        hex: '#fff9eb',
        description: '42%'
      }]
    }]
  };

});
define('base-method-ember-styleguide/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/helpers/highlight.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/highlight.js should pass jshint', function() { 
    ok(true, 'helpers/highlight.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/helpers/resolver', ['exports', 'ember/resolver', 'base-method-ember-styleguide/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('base-method-ember-styleguide/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/helpers/start-app', ['exports', 'ember', 'base-method-ember-styleguide/app', 'base-method-ember-styleguide/config/environment'], function (exports, Ember, Application, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('base-method-ember-styleguide/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/initializers/i18n.jshint', function () {

  'use strict';

  module('JSHint - initializers');
  test('initializers/i18n.js should pass jshint', function() { 
    ok(true, 'initializers/i18n.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/cancel-subscription/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('account/cancel-subscription', 'Integration | Component | account/cancel subscription', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 31
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'account/cancel-subscription', ['loc', [null, [1, 0], [1, 31]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'account/cancel-subscription', [], [], 0, null, ['loc', [null, [2, 4], [4, 36]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/cancel-subscription/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/account/cancel-subscription');
  test('integration/pods/components/account/cancel-subscription/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/account/cancel-subscription/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/check-box-cancel/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('account/check-box-cancel', 'Integration | Component | account/check box cancel', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 28
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'account/check-box-cancel', ['loc', [null, [1, 0], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'account/check-box-cancel', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/check-box-cancel/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/account/check-box-cancel');
  test('integration/pods/components/account/check-box-cancel/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/account/check-box-cancel/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-details/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('account/my-details', 'Integration | Component | account/my details', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'account/my-details', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'account/my-details', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-details/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/account/my-details');
  test('integration/pods/components/account/my-details/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/account/my-details/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-devices/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('account/my-devices', 'Integration | Component | account/my devices', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'account/my-devices', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'account/my-devices', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-devices/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/account/my-devices');
  test('integration/pods/components/account/my-devices/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/account/my-devices/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-subscription/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('account/my-subscription', 'Integration | Component | account/my subscription', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 27
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'account/my-subscription', ['loc', [null, [1, 0], [1, 27]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'account/my-subscription', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/account/my-subscription/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/account/my-subscription');
  test('integration/pods/components/account/my-subscription/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/account/my-subscription/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/item-video/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/item-video', 'Integration | Component | content/item video', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/item-video', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/item-video', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/item-video/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/item-video');
  test('integration/pods/components/content/item-video/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/item-video/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/more-info/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/more-info', 'Integration | Component | content/more info', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 21
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/more-info', ['loc', [null, [1, 0], [1, 21]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/more-info', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/more-info/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/more-info');
  test('integration/pods/components/content/more-info/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/more-info/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/rail-category/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/rail-category', 'Integration | Component | content/rail category', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/rail-category', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/rail-category', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/rail-category/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/rail-category');
  test('integration/pods/components/content/rail-category/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/rail-category/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/rail-video/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/rail-video', 'Integration | Component | content/rail video', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/rail-video', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/rail-video', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/rail-video/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/rail-video');
  test('integration/pods/components/content/rail-video/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/rail-video/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-control/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/video-control', 'Integration | Component | content/video control', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/video-control', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/video-control', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-control/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/video-control');
  test('integration/pods/components/content/video-control/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/video-control/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-player/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/video-player', 'Integration | Component | content/video player', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 24
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/video-player', ['loc', [null, [1, 0], [1, 24]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/video-player', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-player/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/video-player');
  test('integration/pods/components/content/video-player/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/video-player/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-scrub/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('content/video-scrub', 'Integration | Component | content/video scrub', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 23
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'content/video-scrub', ['loc', [null, [1, 0], [1, 23]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'content/video-scrub', [], [], 0, null, ['loc', [null, [2, 4], [4, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/content/video-scrub/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/content/video-scrub');
  test('integration/pods/components/content/video-scrub/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/content/video-scrub/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/check-box/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/check-box', 'Integration | Component | form fields/check box', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/check-box', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/check-box', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/check-box/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/check-box');
  test('integration/pods/components/form-fields/check-box/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/check-box/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/dropdown-menu/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/dropdown-menu', 'Integration | Component | form fields/dropdown menu', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 29
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/dropdown-menu', ['loc', [null, [1, 0], [1, 29]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/dropdown-menu', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/dropdown-menu/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/dropdown-menu');
  test('integration/pods/components/form-fields/dropdown-menu/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/dropdown-menu/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/form-button/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/form-button', 'Integration | Component | form fields/form button', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 27
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/form-button', ['loc', [null, [1, 0], [1, 27]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/form-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/form-button/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/form-button');
  test('integration/pods/components/form-fields/form-button/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/form-button/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/inline-editing/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/inline-editing', 'Integration | Component | form fields/inline editing', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 30
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/inline-editing', ['loc', [null, [1, 0], [1, 30]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/inline-editing', [], [], 0, null, ['loc', [null, [2, 4], [4, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/inline-editing/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/inline-editing');
  test('integration/pods/components/form-fields/inline-editing/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/inline-editing/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/loading-spinner/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/loading-spinner', 'Integration | Component | form fields/loading spinner', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 31
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/loading-spinner', ['loc', [null, [1, 0], [1, 31]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/loading-spinner', [], [], 0, null, ['loc', [null, [2, 4], [4, 36]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/loading-spinner/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/loading-spinner');
  test('integration/pods/components/form-fields/loading-spinner/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/loading-spinner/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/radio-button/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/radio-button', 'Integration | Component | form fields/radio button', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 28
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/radio-button', ['loc', [null, [1, 0], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/radio-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/radio-button/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/radio-button');
  test('integration/pods/components/form-fields/radio-button/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/radio-button/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/switch-button/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/switch-button', 'Integration | Component | form fields/switch button', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 29
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/switch-button', ['loc', [null, [1, 0], [1, 29]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/switch-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/switch-button/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/switch-button');
  test('integration/pods/components/form-fields/switch-button/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/switch-button/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/text-area/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/text-area', 'Integration | Component | form fields/text area', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/text-area', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/text-area', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/text-area/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/text-area');
  test('integration/pods/components/form-fields/text-area/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/text-area/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/text-input/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('form-fields/text-input', 'Integration | Component | form fields/text input', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'form-fields/text-input', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'form-fields/text-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/form-fields/text-input/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/form-fields/text-input');
  test('integration/pods/components/form-fields/text-input/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/form-fields/text-input/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/category-page/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/category-page', 'Integration | Component | global/category page', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 24
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/category-page', ['loc', [null, [1, 0], [1, 24]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/category-page', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/category-page/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/category-page');
  test('integration/pods/components/global/category-page/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/category-page/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/intro-animation/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/intro-animation', 'Integration | Component | global/intro animation', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/intro-animation', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/intro-animation', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/intro-animation/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/intro-animation');
  test('integration/pods/components/global/intro-animation/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/intro-animation/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/keypress-component/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/keypress-component', 'Integration | Component | global/keypress component', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 29
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/keypress-component', ['loc', [null, [1, 0], [1, 29]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/keypress-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/keypress-component/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/keypress-component');
  test('integration/pods/components/global/keypress-component/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/keypress-component/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/landing-page/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/landing-page', 'Integration | Component | global/landing page', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 23
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/landing-page', ['loc', [null, [1, 0], [1, 23]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/landing-page', [], [], 0, null, ['loc', [null, [2, 4], [4, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/landing-page/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/landing-page');
  test('integration/pods/components/global/landing-page/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/landing-page/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/search-module/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/search-module', 'Integration | Component | global/search module', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 24
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/search-module', ['loc', [null, [1, 0], [1, 24]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/search-module', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/search-module/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/search-module');
  test('integration/pods/components/global/search-module/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/search-module/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/sign-up/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('global/sign-up', 'Integration | Component | global/sign up', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 18
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'global/sign-up', ['loc', [null, [1, 0], [1, 18]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'global/sign-up', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/global/sign-up/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/global/sign-up');
  test('integration/pods/components/global/sign-up/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/global/sign-up/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-container/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('navigation/tab/tab-container', 'Integration | Component | navigation/tab/tab container', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 32
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'navigation/tab/tab-container', ['loc', [null, [1, 0], [1, 32]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'navigation/tab/tab-container', [], [], 0, null, ['loc', [null, [2, 4], [4, 37]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-container/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/navigation/tab/tab-container');
  test('integration/pods/components/navigation/tab/tab-container/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/navigation/tab/tab-container/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-content/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('navigation/tab/tab-content', 'Integration | Component | navigation/tab/tab content', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 30
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'navigation/tab/tab-content', ['loc', [null, [1, 0], [1, 30]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'navigation/tab/tab-content', [], [], 0, null, ['loc', [null, [2, 4], [4, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-content/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/navigation/tab/tab-content');
  test('integration/pods/components/navigation/tab/tab-content/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/navigation/tab/tab-content/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-nav/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('navigation/tab/tab-nav', 'Integration | Component | navigation/tab/tab nav', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'navigation/tab/tab-nav', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'navigation/tab/tab-nav', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/navigation/tab/tab-nav/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/navigation/tab/tab-nav');
  test('integration/pods/components/navigation/tab/tab-nav/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/navigation/tab/tab-nav/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/component/tile-component/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/component/tile-component', 'Integration | Component | styleguide/component/tile component', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 39
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/component/tile-component', ['loc', [null, [1, 0], [1, 39]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/component/tile-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 44]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/component/tile-component/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/component/tile-component');
  test('integration/pods/components/styleguide/component/tile-component/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/component/tile-component/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/colour-module/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/foundation/colour-module', 'Integration | Component | styleguide/foundation/colour module', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 39
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/foundation/colour-module', ['loc', [null, [1, 0], [1, 39]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/foundation/colour-module', [], [], 0, null, ['loc', [null, [2, 4], [4, 44]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/colour-module/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/foundation/colour-module');
  test('integration/pods/components/styleguide/foundation/colour-module/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/foundation/colour-module/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/experience-principles/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/foundation/experience-principles', 'Integration | Component | styleguide/foundation/experience principles', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 47
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/foundation/experience-principles', ['loc', [null, [1, 0], [1, 47]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/foundation/experience-principles', [], [], 0, null, ['loc', [null, [2, 4], [4, 52]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/experience-principles/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/foundation/experience-principles');
  test('integration/pods/components/styleguide/foundation/experience-principles/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/foundation/experience-principles/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/icon-font/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/foundation/icon-font', 'Integration | Component | styleguide/foundation/icon font', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 35
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/foundation/icon-font', ['loc', [null, [1, 0], [1, 35]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/foundation/icon-font', [], [], 0, null, ['loc', [null, [2, 4], [4, 40]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/icon-font/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/foundation/icon-font');
  test('integration/pods/components/styleguide/foundation/icon-font/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/foundation/icon-font/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/responsive-grid/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/foundation/responsive-grid', 'Integration | Component | styleguide/foundation/responsive grid', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 41
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/foundation/responsive-grid', ['loc', [null, [1, 0], [1, 41]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/foundation/responsive-grid', [], [], 0, null, ['loc', [null, [2, 4], [4, 46]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/responsive-grid/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/foundation/responsive-grid');
  test('integration/pods/components/styleguide/foundation/responsive-grid/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/foundation/responsive-grid/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/typography-module/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/foundation/typography-module', 'Integration | Component | styleguide/foundation/typography module', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 43
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/foundation/typography-module', ['loc', [null, [1, 0], [1, 43]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/foundation/typography-module', [], [], 0, null, ['loc', [null, [2, 4], [4, 48]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/foundation/typography-module/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/foundation/typography-module');
  test('integration/pods/components/styleguide/foundation/typography-module/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/foundation/typography-module/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/navigation/nav-tab/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/navigation/nav-tab', 'Integration | Component | styleguide/navigation/nav tab', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 33
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/navigation/nav-tab', ['loc', [null, [1, 0], [1, 33]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/navigation/nav-tab', [], [], 0, null, ['loc', [null, [2, 4], [4, 38]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/navigation/nav-tab/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/navigation/nav-tab');
  test('integration/pods/components/styleguide/navigation/nav-tab/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/navigation/nav-tab/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/styleguide-wrapper/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/styleguide-wrapper', 'Integration | Component | styleguide/styleguide wrapper', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 33
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/styleguide-wrapper', ['loc', [null, [1, 0], [1, 33]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/styleguide-wrapper', [], [], 0, null, ['loc', [null, [2, 4], [4, 38]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/styleguide-wrapper/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/styleguide-wrapper');
  test('integration/pods/components/styleguide/styleguide-wrapper/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/styleguide-wrapper/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/test/typography-test/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/test/typography-test', 'Integration | Component | styleguide/test/typography test', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 35
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/test/typography-test', ['loc', [null, [1, 0], [1, 35]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/test/typography-test', [], [], 0, null, ['loc', [null, [2, 4], [4, 40]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/test/typography-test/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/test/typography-test');
  test('integration/pods/components/styleguide/test/typography-test/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/test/typography-test/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/tile-wrapper/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('styleguide/tile-wrapper', 'Integration | Component | styleguide/tile wrapper', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 27
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'styleguide/tile-wrapper', ['loc', [null, [1, 0], [1, 27]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'styleguide/tile-wrapper', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/styleguide/tile-wrapper/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/styleguide/tile-wrapper');
  test('integration/pods/components/styleguide/tile-wrapper/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/styleguide/tile-wrapper/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/error-message/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/error-message', 'Integration | Component | web/error message', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 21
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/error-message', ['loc', [null, [1, 0], [1, 21]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/error-message', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/error-message/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/error-message');
  test('integration/pods/components/web/error-message/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/error-message/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/global-footer/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/global-footer', 'Integration | Component | web/global footer', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 21
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/global-footer', ['loc', [null, [1, 0], [1, 21]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/global-footer', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/global-footer/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/global-footer');
  test('integration/pods/components/web/global-footer/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/global-footer/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/icon-btn/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/icon-btn', 'Integration | Component | web/icon btn', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 16
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/icon-btn', ['loc', [null, [1, 0], [1, 16]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/icon-btn', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/icon-btn/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/icon-btn');
  test('integration/pods/components/web/icon-btn/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/icon-btn/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/my-account/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/my-account', 'Integration | Component | web/my account', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 18
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/my-account', ['loc', [null, [1, 0], [1, 18]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/my-account', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/my-account/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/my-account');
  test('integration/pods/components/web/my-account/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/my-account/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/rail-item/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/rail-item', 'Integration | Component | web/rail item', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 17
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/rail-item', ['loc', [null, [1, 0], [1, 17]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/rail-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/rail-item/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/rail-item');
  test('integration/pods/components/web/rail-item/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/rail-item/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/rails-list/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/rails-list', 'Integration | Component | web/rails list', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 18
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/rails-list', ['loc', [null, [1, 0], [1, 18]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/rails-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/rails-list/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/rails-list');
  test('integration/pods/components/web/rails-list/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/rails-list/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/tile-badge/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/tile-badge', 'Integration | Component | web/tile badge', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 18
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/tile-badge', ['loc', [null, [1, 0], [1, 18]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/tile-badge', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/tile-badge/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/tile-badge');
  test('integration/pods/components/web/tile-badge/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/tile-badge/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/tile-content/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/tile-content', 'Integration | Component | web/tile content', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 20
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/tile-content', ['loc', [null, [1, 0], [1, 20]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/tile-content', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/tile-content/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/tile-content');
  test('integration/pods/components/web/tile-content/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/tile-content/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/video-player/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('web/video-player', 'Integration | Component | web/video player', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 20
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'web/video-player', ['loc', [null, [1, 0], [1, 20]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.8',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.8',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'web/video-player', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('base-method-ember-styleguide/tests/integration/pods/components/web/video-player/component-test.jshint', function () {

  'use strict';

  module('JSHint - integration/pods/components/web/video-player');
  test('integration/pods/components/web/video-player/component-test.js should pass jshint', function() { 
    ok(true, 'integration/pods/components/web/video-player/component-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/de-de/config.jshint', function () {

  'use strict';

  module('JSHint - locales/de-de');
  test('locales/de-de/config.js should pass jshint', function() { 
    ok(true, 'locales/de-de/config.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/de-de/translations.jshint', function () {

  'use strict';

  module('JSHint - locales/de-de');
  test('locales/de-de/translations.js should pass jshint', function() { 
    ok(true, 'locales/de-de/translations.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/en-gb/config.jshint', function () {

  'use strict';

  module('JSHint - locales/en-gb');
  test('locales/en-gb/config.js should pass jshint', function() { 
    ok(true, 'locales/en-gb/config.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/en-gb/translations.jshint', function () {

  'use strict';

  module('JSHint - locales/en-gb');
  test('locales/en-gb/translations.js should pass jshint', function() { 
    ok(true, 'locales/en-gb/translations.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/ja-jp/config.jshint', function () {

  'use strict';

  module('JSHint - locales/ja-jp');
  test('locales/ja-jp/config.js should pass jshint', function() { 
    ok(true, 'locales/ja-jp/config.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/locales/ja-jp/translations.jshint', function () {

  'use strict';

  module('JSHint - locales/ja-jp');
  test('locales/ja-jp/translations.js should pass jshint', function() { 
    ok(true, 'locales/ja-jp/translations.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/mixins/scroll-event.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/scroll-event.js should pass jshint', function() { 
    ok(true, 'mixins/scroll-event.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/application/adapter.jshint', function () {

  'use strict';

  module('JSHint - pods/application');
  test('pods/application/adapter.js should pass jshint', function() { 
    ok(true, 'pods/application/adapter.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/account/cancel-subscription/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/account/cancel-subscription');
  test('pods/components/account/cancel-subscription/component.js should pass jshint', function() { 
    ok(true, 'pods/components/account/cancel-subscription/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/account/check-box-cancel/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/account/check-box-cancel');
  test('pods/components/account/check-box-cancel/component.js should pass jshint', function() { 
    ok(true, 'pods/components/account/check-box-cancel/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/account/my-details/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/account/my-details');
  test('pods/components/account/my-details/component.js should pass jshint', function() { 
    ok(true, 'pods/components/account/my-details/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/account/my-devices/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/account/my-devices');
  test('pods/components/account/my-devices/component.js should pass jshint', function() { 
    ok(true, 'pods/components/account/my-devices/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/account/my-subscription/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/account/my-subscription');
  test('pods/components/account/my-subscription/component.js should pass jshint', function() { 
    ok(true, 'pods/components/account/my-subscription/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/item-video/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/item-video');
  test('pods/components/content/item-video/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/item-video/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/more-info/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/more-info');
  test('pods/components/content/more-info/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/more-info/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/rail-category/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/rail-category');
  test('pods/components/content/rail-category/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/rail-category/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/rail-video/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/rail-video');
  test('pods/components/content/rail-video/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/rail-video/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/video-control/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/video-control');
  test('pods/components/content/video-control/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/video-control/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/video-player/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/video-player');
  test('pods/components/content/video-player/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/video-player/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/content/video-scrub/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/content/video-scrub');
  test('pods/components/content/video-scrub/component.js should pass jshint', function() { 
    ok(true, 'pods/components/content/video-scrub/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/check-box/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/check-box');
  test('pods/components/form-fields/check-box/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/check-box/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/dropdown-menu/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/dropdown-menu');
  test('pods/components/form-fields/dropdown-menu/component.js should pass jshint', function() { 
    ok(false, 'pods/components/form-fields/dropdown-menu/component.js should pass jshint.\npods/components/form-fields/dropdown-menu/component.js: line 78, col 8, Missing semicolon.\n\n1 error'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/form-button/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/form-button');
  test('pods/components/form-fields/form-button/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/form-button/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/inline-editing/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/inline-editing');
  test('pods/components/form-fields/inline-editing/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/inline-editing/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/loading-spinner/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/loading-spinner');
  test('pods/components/form-fields/loading-spinner/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/loading-spinner/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/radio-button/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/radio-button');
  test('pods/components/form-fields/radio-button/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/radio-button/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/switch-button/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/switch-button');
  test('pods/components/form-fields/switch-button/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/switch-button/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/text-area/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/text-area');
  test('pods/components/form-fields/text-area/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/text-area/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/form-fields/text-input/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/form-fields/text-input');
  test('pods/components/form-fields/text-input/component.js should pass jshint', function() { 
    ok(true, 'pods/components/form-fields/text-input/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/category-page/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/category-page');
  test('pods/components/global/category-page/component.js should pass jshint', function() { 
    ok(true, 'pods/components/global/category-page/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/intro-animation/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/intro-animation');
  test('pods/components/global/intro-animation/component.js should pass jshint', function() { 
    ok(true, 'pods/components/global/intro-animation/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/keypress-component/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/keypress-component');
  test('pods/components/global/keypress-component/component.js should pass jshint', function() { 
    ok(true, 'pods/components/global/keypress-component/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/landing-page/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/landing-page');
  test('pods/components/global/landing-page/component.js should pass jshint', function() { 
    ok(false, 'pods/components/global/landing-page/component.js should pass jshint.\npods/components/global/landing-page/component.js: line 6, col 5, \'letScroll\' is defined but never used.\n\n1 error'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/search-module/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/search-module');
  test('pods/components/global/search-module/component.js should pass jshint', function() { 
    ok(true, 'pods/components/global/search-module/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/global/sign-up/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/global/sign-up');
  test('pods/components/global/sign-up/component.js should pass jshint', function() { 
    ok(true, 'pods/components/global/sign-up/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/navigation/tab/tab-container/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/navigation/tab/tab-container');
  test('pods/components/navigation/tab/tab-container/component.js should pass jshint', function() { 
    ok(true, 'pods/components/navigation/tab/tab-container/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/navigation/tab/tab-content/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/navigation/tab/tab-content');
  test('pods/components/navigation/tab/tab-content/component.js should pass jshint', function() { 
    ok(true, 'pods/components/navigation/tab/tab-content/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/navigation/tab/tab-nav/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/navigation/tab/tab-nav');
  test('pods/components/navigation/tab/tab-nav/component.js should pass jshint', function() { 
    ok(true, 'pods/components/navigation/tab/tab-nav/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/component/tile-component/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/component/tile-component');
  test('pods/components/styleguide/component/tile-component/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/component/tile-component/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/foundation/colour-module/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/foundation/colour-module');
  test('pods/components/styleguide/foundation/colour-module/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/foundation/colour-module/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/foundation/experience-principles/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/foundation/experience-principles');
  test('pods/components/styleguide/foundation/experience-principles/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/foundation/experience-principles/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/foundation/icon-font/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/foundation/icon-font');
  test('pods/components/styleguide/foundation/icon-font/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/foundation/icon-font/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/foundation/responsive-grid/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/foundation/responsive-grid');
  test('pods/components/styleguide/foundation/responsive-grid/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/foundation/responsive-grid/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/foundation/typography-module/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/foundation/typography-module');
  test('pods/components/styleguide/foundation/typography-module/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/foundation/typography-module/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/navigation/nav-tab/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/navigation/nav-tab');
  test('pods/components/styleguide/navigation/nav-tab/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/navigation/nav-tab/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/styleguide-wrapper/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/styleguide-wrapper');
  test('pods/components/styleguide/styleguide-wrapper/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/styleguide-wrapper/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/test/typography-test/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/test/typography-test');
  test('pods/components/styleguide/test/typography-test/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/test/typography-test/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/styleguide/tile-wrapper/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/styleguide/tile-wrapper');
  test('pods/components/styleguide/tile-wrapper/component.js should pass jshint', function() { 
    ok(true, 'pods/components/styleguide/tile-wrapper/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/error-message/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/error-message');
  test('pods/components/web/error-message/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/error-message/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/global-footer/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/global-footer');
  test('pods/components/web/global-footer/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/global-footer/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/global-header/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/global-header');
  test('pods/components/web/global-header/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/global-header/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/global-header/search/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/global-header/search');
  test('pods/components/web/global-header/search/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/global-header/search/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/icon-btn/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/icon-btn');
  test('pods/components/web/icon-btn/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/icon-btn/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/my-account/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/my-account');
  test('pods/components/web/my-account/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/my-account/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/rail-item/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/rail-item');
  test('pods/components/web/rail-item/component.js should pass jshint', function() { 
    ok(false, 'pods/components/web/rail-item/component.js should pass jshint.\npods/components/web/rail-item/component.js: line 61, col 18, \'thisHeight\' is defined but never used.\npods/components/web/rail-item/component.js: line 92, col 11, \'self\' is defined but never used.\npods/components/web/rail-item/component.js: line 91, col 24, \'event\' is defined but never used.\n\n3 errors'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/rails-list/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/rails-list');
  test('pods/components/web/rails-list/component.js should pass jshint', function() { 
    ok(false, 'pods/components/web/rails-list/component.js should pass jshint.\npods/components/web/rails-list/component.js: line 118, col 41, Missing semicolon.\npods/components/web/rails-list/component.js: line 134, col 41, Missing semicolon.\npods/components/web/rails-list/component.js: line 316, col 41, Missing semicolon.\npods/components/web/rails-list/component.js: line 272, col 9, \'childArr\' is defined but never used.\n\n4 errors'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/tile-badge/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/tile-badge');
  test('pods/components/web/tile-badge/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/tile-badge/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/tile-content/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/tile-content');
  test('pods/components/web/tile-content/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/tile-content/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/video-player/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/video-player');
  test('pods/components/web/video-player/component.js should pass jshint', function() { 
    ok(false, 'pods/components/web/video-player/component.js should pass jshint.\npods/components/web/video-player/component.js: line 282, col 6, Missing semicolon.\npods/components/web/video-player/component.js: line 343, col 29, \'$\' is not defined.\npods/components/web/video-player/component.js: line 354, col 5, \'$\' is not defined.\npods/components/web/video-player/component.js: line 36, col 9, \'mode\' is defined but never used.\npods/components/web/video-player/component.js: line 343, col 63, \'e\' is defined but never used.\n\n5 errors'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/video-player/controls/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/video-player/controls');
  test('pods/components/web/video-player/controls/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/video-player/controls/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/components/web/video-player/scrub-bar/component.jshint', function () {

  'use strict';

  module('JSHint - pods/components/web/video-player/scrub-bar');
  test('pods/components/web/video-player/scrub-bar/component.js should pass jshint', function() { 
    ok(true, 'pods/components/web/video-player/scrub-bar/component.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/page/model.jshint', function () {

  'use strict';

  module('JSHint - pods/page');
  test('pods/page/model.js should pass jshint', function() { 
    ok(false, 'pods/page/model.js should pass jshint.\npods/page/model.js: line 178, col 15, Duplicate key \'isPlayer\'.\npods/page/model.js: line 149, col 7, \'ran\' is defined but never used.\npods/page/model.js: line 287, col 41, \'length\' is defined but never used.\n\n3 errors'); 
  });

});
define('base-method-ember-styleguide/tests/pods/rail/model.jshint', function () {

  'use strict';

  module('JSHint - pods/rail');
  test('pods/rail/model.js should pass jshint', function() { 
    ok(true, 'pods/rail/model.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/account/cancel-subscription/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/account/cancel-subscription');
  test('pods/styleguide/account/cancel-subscription/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/account/cancel-subscription/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/account/my-account/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/account/my-account');
  test('pods/styleguide/account/my-account/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/account/my-account/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/buttons/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/buttons');
  test('pods/styleguide/buttons/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/buttons/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/components/badges/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/components/badges');
  test('pods/styleguide/components/badges/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/components/badges/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/components/rail/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/components/rail');
  test('pods/styleguide/components/rail/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/components/rail/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/components/tiles/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/components/tiles');
  test('pods/styleguide/components/tiles/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/components/tiles/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/form-fields/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/form-fields');
  test('pods/styleguide/form-fields/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/form-fields/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/colors/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/colors');
  test('pods/styleguide/foundation/colors/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/colors/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/experience-principles/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/experience-principles');
  test('pods/styleguide/foundation/experience-principles/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/experience-principles/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/grid/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/grid');
  test('pods/styleguide/foundation/grid/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/grid/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/icons/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/icons');
  test('pods/styleguide/foundation/icons/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/icons/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/logo/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/logo');
  test('pods/styleguide/foundation/logo/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/logo/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/model/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/model');
  test('pods/styleguide/foundation/model/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/model/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/rails/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/rails');
  test('pods/styleguide/foundation/rails/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/rails/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/foundation/typography/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/foundation/typography');
  test('pods/styleguide/foundation/typography/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/foundation/typography/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/index/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/index');
  test('pods/styleguide/index/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/index/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/input-field/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/input-field');
  test('pods/styleguide/input-field/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/input-field/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/landing/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/landing');
  test('pods/styleguide/landing/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/landing/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/myaccount/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/myaccount');
  test('pods/styleguide/myaccount/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/myaccount/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/navigation/tabs/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/navigation/tabs');
  test('pods/styleguide/navigation/tabs/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/navigation/tabs/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/payment-information/controller.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/payment-information');
  test('pods/styleguide/payment-information/controller.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/payment-information/controller.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/payment-information/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/payment-information');
  test('pods/styleguide/payment-information/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/payment-information/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/signup/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/signup');
  test('pods/styleguide/signup/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/signup/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/test/form/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/test/form');
  test('pods/styleguide/test/form/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/test/form/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/test/typography/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/test/typography');
  test('pods/styleguide/test/typography/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/test/typography/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/titles/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/titles');
  test('pods/styleguide/titles/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/titles/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/styleguide/video-player/route.jshint', function () {

  'use strict';

  module('JSHint - pods/styleguide/video-player');
  test('pods/styleguide/video-player/route.js should pass jshint', function() { 
    ok(true, 'pods/styleguide/video-player/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/tile/model.jshint', function () {

  'use strict';

  module('JSHint - pods/tile');
  test('pods/tile/model.js should pass jshint', function() { 
    ok(true, 'pods/tile/model.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/tv/intro/route.jshint', function () {

  'use strict';

  module('JSHint - pods/tv/intro');
  test('pods/tv/intro/route.js should pass jshint', function() { 
    ok(true, 'pods/tv/intro/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/tv/signup/controller.jshint', function () {

  'use strict';

  module('JSHint - pods/tv/signup');
  test('pods/tv/signup/controller.js should pass jshint', function() { 
    ok(true, 'pods/tv/signup/controller.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/account/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/account');
  test('pods/web/account/route.js should pass jshint', function() { 
    ok(true, 'pods/web/account/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/help/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/help');
  test('pods/web/help/route.js should pass jshint', function() { 
    ok(true, 'pods/web/help/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/intro/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/intro');
  test('pods/web/intro/route.js should pass jshint', function() { 
    ok(true, 'pods/web/intro/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/settings/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/settings');
  test('pods/web/settings/route.js should pass jshint', function() { 
    ok(true, 'pods/web/settings/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/signup/controller.jshint', function () {

  'use strict';

  module('JSHint - pods/web/signup');
  test('pods/web/signup/controller.js should pass jshint', function() { 
    ok(true, 'pods/web/signup/controller.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/signup/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/signup');
  test('pods/web/signup/route.js should pass jshint', function() { 
    ok(true, 'pods/web/signup/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/videos/controller.jshint', function () {

  'use strict';

  module('JSHint - pods/web/videos');
  test('pods/web/videos/controller.js should pass jshint', function() { 
    ok(true, 'pods/web/videos/controller.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/pods/web/videos/route.jshint', function () {

  'use strict';

  module('JSHint - pods/web/videos');
  test('pods/web/videos/route.js should pass jshint', function() { 
    ok(true, 'pods/web/videos/route.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/styleguide/config.jshint', function () {

  'use strict';

  module('JSHint - styleguide');
  test('styleguide/config.js should pass jshint', function() { 
    ok(true, 'styleguide/config.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/test-helper', ['base-method-ember-styleguide/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('base-method-ember-styleguide/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/mixins/scroll-event-test', ['ember', 'base-method-ember-styleguide/mixins/scroll-event', 'qunit'], function (Ember, ScrollEventMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | scroll event');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ScrollEventObject = Ember['default'].Object.extend(ScrollEventMixin['default']);
    var subject = ScrollEventObject.create();
    assert.ok(subject);
  });

});
define('base-method-ember-styleguide/tests/unit/mixins/scroll-event-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/scroll-event-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/scroll-event-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/category/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:category', 'Unit | Route | category', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/category/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/category');
  test('unit/pods/category/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/category/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/default/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:default', 'Unit | Route | default', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/default/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/default');
  test('unit/pods/default/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/default/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/intro/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:intro', 'Unit | Route | intro', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/intro/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/intro');
  test('unit/pods/intro/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/intro/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/search/controller-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:search', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/search/controller-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/search');
  test('unit/pods/search/controller-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/search/controller-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/search/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:search', 'Unit | Route | search', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/search/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/search');
  test('unit/pods/search/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/search/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/signup/controller-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/signup/controller-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/signup');
  test('unit/pods/signup/controller-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/signup/controller-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/signup/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:signup', 'Unit | Route | signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/signup/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/signup');
  test('unit/pods/signup/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/signup/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/account/cancel-subscription/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/account/cancel-subscription', 'Unit | Route | styleguide/account/cancel subscription', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/account/cancel-subscription/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/account/cancel-subscription');
  test('unit/pods/styleguide/account/cancel-subscription/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/account/cancel-subscription/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/account/my-account/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/account/my-account', 'Unit | Route | styleguide/account/my account', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/account/my-account/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/account/my-account');
  test('unit/pods/styleguide/account/my-account/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/account/my-account/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/buttons/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/buttons', 'Unit | Route | styleguide/buttons', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/buttons/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/buttons');
  test('unit/pods/styleguide/buttons/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/buttons/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/badges/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/components/badges', 'Unit | Route | styleguide/components/badges', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/badges/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/components/badges');
  test('unit/pods/styleguide/components/badges/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/components/badges/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/rail/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/components/rail', 'Unit | Route | styleguide/components/rail', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/rail/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/components/rail');
  test('unit/pods/styleguide/components/rail/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/components/rail/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/tiles/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/components/tiles', 'Unit | Route | styleguide/components/tiles', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/components/tiles/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/components/tiles');
  test('unit/pods/styleguide/components/tiles/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/components/tiles/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/form-fields/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/form-fields', 'Unit | Route | styleguide/form fields', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/form-fields/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/form-fields');
  test('unit/pods/styleguide/form-fields/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/form-fields/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/colors/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/colors', 'Unit | Route | styleguide/foundation/colors', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/colors/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/colors');
  test('unit/pods/styleguide/foundation/colors/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/colors/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/experience-principles/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/experience-principles', 'Unit | Route | styleguide/foundation/experience principles', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/experience-principles/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/experience-principles');
  test('unit/pods/styleguide/foundation/experience-principles/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/experience-principles/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/grid/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/grid', 'Unit | Route | styleguide/foundation/grid', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/grid/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/grid');
  test('unit/pods/styleguide/foundation/grid/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/grid/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/icons/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/icons', 'Unit | Route | styleguide/foundation/icons', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/icons/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/icons');
  test('unit/pods/styleguide/foundation/icons/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/icons/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/logo/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/logo', 'Unit | Route | styleguide/foundation/logo', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/logo/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/logo');
  test('unit/pods/styleguide/foundation/logo/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/logo/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/model/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/model', 'Unit | Route | styleguide/foundation/model', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/model/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/model');
  test('unit/pods/styleguide/foundation/model/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/model/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/rails/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/rails', 'Unit | Route | styleguide/foundation/rails', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/rails/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/rails');
  test('unit/pods/styleguide/foundation/rails/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/rails/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/typography/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/foundation/typography', 'Unit | Route | styleguide/foundation/typography', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/foundation/typography/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/foundation/typography');
  test('unit/pods/styleguide/foundation/typography/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/foundation/typography/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/index/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/index', 'Unit | Route | styleguide/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/index/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/index');
  test('unit/pods/styleguide/index/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/index/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/input-field/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/input-field', 'Unit | Route | styleguide/input field', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/input-field/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/input-field');
  test('unit/pods/styleguide/input-field/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/input-field/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/landing/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/landing', 'Unit | Route | styleguide/landing', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/landing/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/landing');
  test('unit/pods/styleguide/landing/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/landing/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/myaccount/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/myaccount', 'Unit | Route | styleguide/myaccount', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/myaccount/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/myaccount');
  test('unit/pods/styleguide/myaccount/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/myaccount/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/navigation/tabs/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/navigation/tabs', 'Unit | Route | styleguide/navigation/tabs', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/navigation/tabs/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/navigation/tabs');
  test('unit/pods/styleguide/navigation/tabs/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/navigation/tabs/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/payment-information/controller-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:styleguide/payment-information', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/payment-information/controller-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/payment-information');
  test('unit/pods/styleguide/payment-information/controller-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/payment-information/controller-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/payment-information/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/payment-information', 'Unit | Route | styleguide/payment information', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/payment-information/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/payment-information');
  test('unit/pods/styleguide/payment-information/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/payment-information/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/signup/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/signup', 'Unit | Route | styleguide/signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/signup/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/signup');
  test('unit/pods/styleguide/signup/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/signup/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/test/form/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/test/form', 'Unit | Route | styleguide/test/form', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/test/form/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/test/form');
  test('unit/pods/styleguide/test/form/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/test/form/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/test/typography/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/test/typography', 'Unit | Route | styleguide/test/typography', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/test/typography/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/test/typography');
  test('unit/pods/styleguide/test/typography/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/test/typography/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/titles/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/titles', 'Unit | Route | styleguide/titles', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/titles/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/titles');
  test('unit/pods/styleguide/titles/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/titles/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/video-player/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:styleguide/video-player', 'Unit | Route | styleguide/video player', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/styleguide/video-player/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/styleguide/video-player');
  test('unit/pods/styleguide/video-player/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/styleguide/video-player/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/test/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:test', 'Unit | Route | test', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/test/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/test');
  test('unit/pods/test/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/test/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/video/model-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('video', 'Unit | Model | video', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/video/model-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/video');
  test('unit/pods/video/model-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/video/model-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/videos/controller-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:videos', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/videos/controller-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/videos');
  test('unit/pods/videos/controller-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/videos/controller-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/videos/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:videos', 'Unit | Route | videos', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/videos/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/videos');
  test('unit/pods/videos/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/videos/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/tests/unit/pods/web/signup/route-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:web/signup', 'Unit | Route | web/signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('base-method-ember-styleguide/tests/unit/pods/web/signup/route-test.jshint', function () {

  'use strict';

  module('JSHint - unit/pods/web/signup');
  test('unit/pods/web/signup/route-test.js should pass jshint', function() { 
    ok(true, 'unit/pods/web/signup/route-test.js should pass jshint.'); 
  });

});
define('base-method-ember-styleguide/util/ui-library-setup-router', ['exports', 'ember-cli-ui-lib-metadata/util/ui-library-setup-router'], function (exports, ui_library_setup_router) {

	'use strict';



	exports['default'] = ui_library_setup_router['default'];

});
define('base-method-ember-styleguide/utils/i18n/compile-template', ['exports', 'ember-i18n/compile-template'], function (exports, compileTemplate) {

	'use strict';

	exports['default'] = compileTemplate['default'];

});
define('base-method-ember-styleguide/utils/i18n/missing-message', ['exports', 'ember-i18n/missing-message'], function (exports, missingMessage) {

	'use strict';

	exports['default'] = missingMessage['default'];

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('base-method-ember-styleguide/config/environment', ['ember'], function(Ember) {
  var prefix = 'base-method-ember-styleguide';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("base-method-ember-styleguide/tests/test-helper");
} else {
  require("base-method-ember-styleguide/app")["default"].create({"name":"base-method-ember-styleguide","version":"0.0.0+479d02e5"});
}

/* jshint ignore:end */
//# sourceMappingURL=base-method-ember-styleguide-abad981b0dff171e6398160cce62f532.map